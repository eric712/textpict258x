; This is ed2342.asm alpha test version of text editor ed2342.850
; stuck at line 19442
; changing to ed2342.aso or ed2342.asm or ed2342.txt or ed2342.850
; Changeing ed2340.asm to ed2341.asm by adding nzalways0d0a
; changing edmackxb.852 to ed2340.asm or edmacktb.850 by getting rid of xlib
; Surgery is needed on header 8048000h to remove
; XLib funtions from DT_NEEDED_01 address 0008 within 8048700h supervisor.
; change length of loader entry for 8048700h by subtracting 8.
; Tree stump DT_RELTAB_17 relocation table change beginning 0600.0658h
;            DT_RELSIZ_18 A0h to 048h
;            0600 tree stump points to 0400h. first entry 01 0410.04C0
;            0400h points to 0100h
;            remove entries in 0100h from 0108h until libc.so.6 at 0250h
;            change hash table entry at 0320h 013.008h
; -------------
; 8048880 from 0658h to 0400h to 0100h
; -------------
; attempting to fix findtwoeq on Aug 22,2020
; Beginning of file edmackxb.852 version of edmackxb.asm
; July 11 2020 fix read for no extra line at end.
; June 19 2020 adding base 64 capability for HTML.
; FAT 12 notes for 1.44 megabyte floppy disk image.
; 33=(2-1)+32
;     2 to 2848
; if beginning at sector 0
; boot sector is 0
; fat table 1 is 1-9
; fat table 2 is 10-18
; root directory is 19-32   14 sectors * 16 directory entries per sector
; 224 entries total
; data area is 33-2879
; ----
; boot sector entries
; starting  bytes                 length  stored data
; 000       eb 3c 90 MSDOS5.0     11
; 011       00 02                 02      bytes per sector
; 013       01                    01      sectors per cluster
; 014       01 00                 02      number of reserved sectors
; 016       02                    01      number of FATs
; 017       E0 00                 02      number of root directory entries
; 019       40 0B                 02      total sector count
; 021       F0                    01      unknown at 21
; 022       09 00                 02      sectors per FAT
; 024       12 00                 02      sectors per track
; 026       02 00                 02      number of heads
; 028       00 00 00 00           04      unknown at 028
; 032       00 00 00 00           04      total sector count for FAT 32 only
; 036       00 00                 02      unknown at 036
; 038       29                    01      boot signature
; 039       B8 12 F2 1A           04      volume ID number
; 043       STARTUP 20 20 20 20   11      volume label
; 054       FAT12 20 20 20        08      file system FAT 12 or FAT 16
; 062                                     unknown at 62
; ---
; fat entry values
; 0000 unused
; 0248 to 0255 last cluster
; 0002 to 2848 number of next valid cluster
; 0240 to 0247 invalid cluster
; page break
; ----------
; next page of FAT 12 notes
; root directory starts at 19 * 512
; size is 224 * 32
; 32 byte directory entries
; first byte of 32 byte record is 0 for free entry.
; where   len
; 00      8 uppercase filename without extension padded with blanks.
; 08      3 uppercase extension without .dot
; 11      1 attributes
; 12      2 reserved
; 14      2 time of creation
; 16      2 date created
; 18      2 last access date
; 20      2 not used in FAT 12
; 22      2 last write time
; 24      2 last write date
; 26      2 first logical cluster
; 28      4 file size in bytes
; ----------------------------
; 11      1 attributes notes
; 01  read only
; 02  hidden
; 04  system
; 08  volume label
; 10h subdirectory
; 20h archive
; 40h unknown
; 80h unknown
; -----------
; notes were for starting sector of 0 or sometimes 2
; programming often assumes first sector is 1
; sectnucode for beginning at sector 1 is 4 1 2 5 6 3
; -----------
; change regular edmackxx.852 to edmackxb.852
; use drive b:\ as virtual disk image bimg2880.img contents.
; b:\filename.txt for filename.txt inside bimg2880.img FAT 12
; 1.44 megabyte floppy disk image only.
; change size of result to 73728
; changing edmackxx.trq to edmackxb.852 by changing ELF header.
; changing edmackxx.852 to edmackxx.trq
; edmackxx.852 size would have been 57344 out of 73728.
; using .bss memory instead of stack
; edmackxx.852 ABOLISH MICROSOFT WINDOWS!!
; edmackxx.852 has been converted to use 32-bit Linux XWindows.
; edmackmi.852 create whole individual LINES of pixels
; edmack.852 was for Windows
; edmack.850 change callback to add imed to esp
; this is the first line of this program
; this edmackxb.asm or edmackxb.852 text editor program
; is written by Eric Matteson. Permission is granted
; to copy this source code file edmackxb.asm and to publish
; it on the Internet and to use it at least for
; non-profit use.
; to assemble with nasm
; cp edmackxb.852 edmackxb.asm
; nasm -f bin -o edmackxb.dbg edmackxb.asm
; mv edmackxb.dbg edmackxb.out
; chmod 755 edmackxb.out
; dir -l edmackxb.*
; edmackxb.out will be exactly 73728 bytes if it is
; assembled correctly.
; it is best to use casm6.c based assembler to
; assemble edmackxb.852 if it is available.
; ./edmackxb.out
; to run this program on linux
; ----
; edmackxb.852 assembler source code is next.
 section .code
 bits 32
 org 00000000h
; insert header here
; ---------------------
; ------------------ 0000 begin elf header
; unsigned char e_ident[EI_NIDENT]
; 07Fh "E" "L" "F" 01h 01h 01h 00h
; 00h  00h 00h 00h 00h 00h 00h 00h
firstcodeh: db 07Fh
 db "ELF"
 dd 00010101h
  dd 00000000h
 dd 00000000h
; -----------------------
; ------------------ 0010
; at 0010h
; 10_e_type value 0002h     12 e_machine 0003h
 dd 00030002h
; 14_e_version 00000001h
 dd 00000001h
; 18_e_entry 08049000h
 dd 08049000h
; 1C_e_phoff 00000034h
 dd 00000034h
; ------------------ 0020
; 20_e_shoff 00000054h
; dd 00000054h to 00000000h
 dd 00000000h
; 24_e_flags 00000000h
 dd 00000000h
; 28_e_ehsize 0034h     2A_e_phentsize 0020h
 dd 00200034h
; 2C_e_phnum 0005h      2E_e_shentsize 0028h
; 00280005h
 dd 00280005h
; 30_e_shnum 0007h      32_e_shstrndx 0001h
; dd 00010007h to 00000000h
 dd 00000000h
; end of elf header before 0034h
; ----------- 0034
; Elf32_Phdr_s
; dd PT_INTERP_3 ; p_type
; dd interp_300 - firstcode ; p_offset
; dd interp ; p_vaddr
; dd interp ; p_paddr
; dd interpsz_19 ; p_filesz
; dd interpsz_19 ; p_memsz
; dd PF_R_4 ; p_flags
; dd 0    ; p_align
 dd 00000003h
 dd 00000300h
 dd 08048300h
; ----------- 0040h
 dd 08048300h
 dd 00000013h
 dd 00000013h
 dd 00000004h
 dd 00000001h
; --------------------------- phentsz is 20h
; --------- 0054
; dd PT_LOAD_1
; dd 0
; dd firstcode
; dd firstcode
; dd filesz
; dd memsz
; dd PF_R_4   | PF_W_2  |
; dd 4096
 dd 00000001h
 dd 00000000h
 dd 08048000h
; --------- 0060h
 dd 08048000h
 dd 00001000h
 dd 00001000h
 dd 00000006h
 dd 00001000h
; -------------------
; --------- 0074
; dyntab 01B0 to 02B0h
; dd PT_DYNAMIC_2
; dd dyntab_01b0h_02b0h - firstcode
; dd dyntab
; dd dyntab
; dd dyntabsz_050h
; dd dyntabsz
; dd PF_R_4 | PF_W_2
; dd 4
 dd 00000002h
 dd 00000700h
 dd 08048700h
; --------- 0080h
 dd 08048700h
 dd 00000058h
 dd 00000058h
 dd 00000006h
; --------- 0090h
 dd 00000004h
; --------------------
; dd PT_LOAD_1
; dd 0
; dd rncmain105
; dd rncmain105
; dd filesz-4096
; dd memsz-4096
; dd PF_R_4   |   |  PF_X_1
; dd 4096
 dd 00000001h
 dd 00001000h
 dd 08049000h
; ---------
 dd 08049000h
 dd 00011000h
 dd 00011000h
 dd 00000005h
 dd 00001000h
; ---------------------
 dd 00000001h
 dd 00012000h
 dd 0805A000h
 dd 0805A000h
 dd 00000000h
ramsizech dd 02800000h
 dd 00000006h
 dd 00001000h
; ---------------------
 dd 0,0,0
 dd 0,0,0,0,0,0,0,0
; 0094.00d4.00e0.0100
; 0100 relocated stringtable
 db 000h,000h,000h,000h,000h,000h,000h,000h
; 0108h
 dd 0,0,0,0
; 0118h
 dd 0,0,0,0,0,0,0,0
; 0138h
 dd 0,0,0,0
; 0148h
 dd 0,0,0,0
; 0158h
 dd 0,0,0,0
; 0168h
 dd 0,0,0,0
; 0178h
 dd 0,0,0,0,0,0
; 0190h
 dd 0,0,0,0,0,0
; 01a8h
 dd 0,0,0,0
; 01b8h
 dd 0,0,0,0
; 01c8h
 dd 0,0,0,0
; 01d8h
 dd 0,0,0,0,0,0
; 11 xlib functions deleted
; 01f0h
 dd 0,0,0,0,0,0,0,0
; 0210h
 dd 0,0,0,0,0,0,0,0
; 0230h
 dd 0,0,0,0,0,0,0,0
; 0250h
 db "libc.so."
 db "6"
 db 000h,000h,000h,000h,000h,000h,000h
; 0260h
 db "exit"
 dd 0
; 0268h
 db "read"
 dd 0
; 0270h
 db "write"
 db 000h,000h,000h
; 0278h
 db "open"
 dd 0
; 0280h
 db "close"
 db 000h,000h,000h
; 0288h
 db "creat"
 db 000h,000h,000h
; 0290h
 db "lseek"
 db 000h,000h,000h
; 0298h
 db "ioctl"
 db 00h,00h,00h
; 02A0h
; 8 entries for libc.6 plus 0 other entries
; 8 relocatable entries total
; 02a0h
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
; 0300h
; 0300h interpreter for loader
 db "/lib/ld-"
 db "linux.so"
 db ".2"
 db 000h,000h
 dd 0,0,0
; 0320h
; hash table for 20 entries
; 19 names plus ending 0
; 0320h
 dd 19
 dd 20
 dd 19
 dd 18
 dd 17
 dd 16
 dd 15
 dd 14
 dd 13
; 0340h
 dd 12
 dd 11
 dd 10
 dd 9
 dd 8
 dd 7
 dd 6
 dd 5
; 0360h
 dd 4
 dd 3
 dd 2
 dd 1
; ---- 0371h
 dd 0
 dd 0
 dd 0
 dd 0
 dd 0
 dd 0
 dd 0
; 0390h
 dd 0
 dd 0
 dd 0
 dd 0
 dd 0
 dd 0
 dd 0
 dd 0
; 03b0h
 dd 0
 dd 0
 dd 0
; ------- end of hash table 03bch
 dd 0
; 03c0h
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
; 0400h
; 0400h symbol table entry size = 010h
; 0400h symbol table size is determined by relocation table size
; and relocation table pointer values near 0658h.
 dd 00000000h,0,0,0000h
; ----------------------
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0
; ---------------------
 dd 00000160h,0,0,0012h
 dd 00000168h,0,0,0012h
 dd 00000170h,0,0,0012h
 dd 00000178h,0,0,0012h
 dd 00000180h,0,0,0012h
 dd 00000188h,0,0,0012h
 dd 00000190h,0,0,0012h
 dd 00000198h,0,0,0012h
 dd 00000000h,0,0,0000h
; 0550h
 dd 0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
; 0600h
; 0600h relocation entry size = 08
; 0600h relocation table size is 0A0h.048h
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0
; 0658h is actual address of relocation table.
 dd 08048880h,00000c07h
 dd 08048884h,00000d07h
 dd 08048888h,00000e07h
 dd 0804888ch,00000f07h
 dd 08048890h,00001007h
 dd 08048894h,00001107h
 dd 08048898h,00001207h
 dd 0804889Ch,00001307h
 dd 00000000h,00000000h
; 06a0h
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
; 0700h dyntab
; dyntab at 0700h
; dyntab size=058h.060h.058h
; ---------------------
; dd DT_STRTAB_5  , strtab_228h328h
; dd DT_strsz_10 , strtabsz_04eh
; dd DT_SYMTAB_6 , symtab_01c0h
; dd DT_SYMENT_11 , symentsz_010h
; dd DT_REL_17 , reltab_0268h
; dd DT_RELSZ_18 , reltabsz_40h
; dd DT_RELENT_19 , relentsz_8
; dd DT_HASH_4 , hashtab_00D4h
; dd DT_NEEDED_1 , libc_name_0229h
; dd DT_NULL_0 , 0
; dd 0 , 0
; --------------------------
 dd 5,08048100h
 dd 10,304
; 01c0h.0710h
 dd 6,08048400h
 dd 11,16
; 01d0h.0720h
 dd 17,08048658h
 dd 18,72
; 01e0h.0730h
 dd 19,8
 dd 4,08048320h
; 01f0h.0740h
 dd 1,00000150h
 dd 0,0,0,0,0,0
; 0760h
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
; 0800h previous relocatable subroutine addresses lists
; 0800h 0 entries
 dd 0
 dd 0
 dd 0
 dd 0
 dd 0
 dd 0
 dd 0
 dd 0
 dd 0
 dd 0
 dd 0
; ------
 dd 0,0,0,0,0
; 0840
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
; 0880h actual relocatable subroutine addresses list.
; 0880 8 entries
 dd 0
 dd 0
 dd 0
 dd 0
 dd 0
 dd 0
 dd 0
 dd 0
; ---
 dd 0,0,0,0,0,0,0,0
; 08c0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
; 0900h
; ----------------------
; 0900h
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
; ----------------------
; 0c00h
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
; ----------------------
; 01000h
; ---------------------
; begin 32-bit code here
; clc
; xor eax,eax
; call rncmain105
; ----------
 xor eax,eax
 xor eax,eax
 xor eax,eax
 xor eax,eax
firstcode9: call rncmain125
 xor edx,edx
 add edx,1201
 sub edx,1200
 xor ecx,ecx
 push ecx
 push ecx
 push ecx
 push eax
 push edx
 call twioswitch
 xor edx,edx
 add edx,1220
; sub edx,1200
 sub edx,1220
 add esp,edx
 db 00h, 00h, 00h
 db 00h, 00h
 dd 00000000h
flopstring db "bimg2880.img"
 dd 0
; ******** temporary list
; ******** end of temporary list
; 0164
data0314 db "xxxxxxxx"
; xxxxxxxxxxxxxxxxxxxxxx
; xxxxxxxxxxxxxxxxxxxxxx
outpixtable: dd 32
 dd 09d96e2h
 dd 09896e2h
 dd 08096e2h
 dd 09796e2h
 dd 09096e2h
 dd 09a96e2h
 dd 09c96e2h
 dd 09696e2h
 dd 09e96e2h
 dd 08c96e2h
 dd 09b96e2h
 dd 08496e2h
 dd 09f96e2h
 dd 09996e2h
 dd 08896e2h
; .
 dd 0dh
 dd 0ah
; xxxxxxxxxx
; ----------------------
tcgets dd 00005401h
tcsets dd 00005402h
icannonand dd 0FFFFFFFDh
icannonor dd 00000002h
echoand dd 0FFFFFFF7h
echoor dd 00000008h
; ----------------------
sectnucode: db 04h,01h,02h,05h,06h,03h,00h,00h
aandy db 07fh,0bfh,0dfh,0efh
        db 0f7h,0fbh,0fdh,0feh
chbackground  dd 0fc01fe00h
 db 03h,0f8h,07h,0f0h,0fh,0e0h
 db 1fh,0c0h,03fh,080h,07fh,00h
dotprevcur db 0ffh,07fh,0feh,0ffh
 db 0fdh,0ffh,0fbh,0ffh,0f7h,0ffh,0efh
 db 0ffh,0dfh,0ffh,0bfh,0ffh
; 11111111 01111111  11111110 11111111    11111101 11111111
; 11111011 11111111  11110111 11111111    11101111 11111111
; 11011111 11111111  10111111 11111111
 db 0ffh,0bfh,0ffh,07fh,0feh,0ffh
 db 0fdh,0ffh,0fbh,0ffh,0f7h
 db 0ffh,0efh,0ffh,0dfh,0ffh
; 11111111 10111111  11111111 01111111    11111110 11111111
; 11111101 11111111  11111011 11111111    11110111 11111111
; 11101111 11111111  11011111 11111111
 db 0ffh,0dfh,0ffh,0bfh,0ffh,07fh
 db 0feh,0ffh,0fdh,0ffh,0fbh
 db 0ffh,0f7h,0ffh,0efh,0ffh
; 11111111 11011111  11111111 10111111    11111111 01111111
; 11111110 11111111  11111101 11111111    11111011 11111111
; 11110111 11111111  11101111 11111111
 db 0ffh,0efh,0ffh,0dfh,0ffh,0bfh
 db 0ffh,07fh,0feh,0ffh,0fdh
 db 0ffh,0fbh,0ffh,0f7h,0ffh
; 11111111 11101111  11111111 11011111    11111111 10111111
; 11111111 01111111  11111110 11111111    11111101 11111111
; 11111011 11111111  11110111 11111111
 db 0ffh,0f7h,0ffh,0efh,0ffh,0dfh
 db 0ffh,0bfh,0ffh,07fh,0feh
 db 0ffh,0fdh,0ffh,0fbh,0ffh
; 11111111 11110111  11111111 11101111    11111111 11011111
; 11111111 10111111  11111111 01111111    11111110 11111111
; 11111101 11111111  11111011 11111111
 db 0ffh,0fbh,0ffh,0f7h,0ffh,0efh
 db 0ffh,0dfh,0ffh,0bfh,0ffh
 db 07fh,0feh,0ffh,0fdh,0ffh
; 11111111 11111011  11111111 11110111    11111111 11101111
; 11111111 11011111  11111111 10111111    11111111 01111111
; 11111110 11111111  11111101 11111111
 db 0ffh,0fdh,0ffh,0fbh,0ffh,0f7h
 db 0ffh,0efh,0ffh,0dfh,0ffh
 db 0bfh,0ffh,07fh,0feh,0ffh
; 11111111 11111101  11111111 11111011    11111111 11110111
; 11111111 11101111  11111111 11011111    11111111 10111111
; 11111111 01111111  11111110 11111111
prebh db 00h,00h
constbh db 42h,4dh
 dd 17558
 dd 0
consthdrsize dd 0000003eh
 dd 00000028h
biwidth dd 00000140h
biheight dd 0000008Ah
 dd 00010001h
 dd 0
 dd 17496
 dd 00000ec4h
 dd 00000ec4h
 dd 0,0,00000000h
 dd 00FFFF00h
; -----------------------
; revtab12 is ASCII key to bios key table.
revtab12: db   000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H
 db   00EH, 00FH, 01CH, 000H, 000H, 01CH, 000H, 000H
 db   000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H
 db   000H, 000H, 000H, 001H, 000H, 000H, 000H, 000H
 db   039H, 082H, 0A8H, 084H, 085H, 086H, 088H, 028H
 db   08AH, 08BH, 089H, 08DH, 033H, 00CH, 034H, 035H
 db   00BH, 002H, 003H, 004H, 005H, 006H, 007H, 008H
 db   009H, 00AH, 0A7H, 027H, 0B3H, 00DH, 0B4H, 0B5H
 db   083H, 09EH, 0B0H, 0AEH, 0A0H, 092H, 0A1H, 0A2H
 db   0A3H, 097H, 0A4H, 0A5H, 0A6H, 0B2H, 0B1H, 098H
 db   099H, 090H, 093H, 09FH, 094H, 096H, 0AFH, 091H
 db   0ADH, 095H, 0ACH, 01AH, 02BH, 01BH, 087H, 08CH
 db   029H, 01EH, 030H, 02EH, 020H, 012H, 021H, 022H
 db   023H, 017H, 024H, 025H, 026H, 032H, 031H, 018H
 db   019H, 010H, 013H, 01FH, 014H, 016H, 02FH, 011H
 db   02DH, 015H, 02CH, 09AH, 0ABH, 09BH, 0A9H, 000H
; bios shift keys are not included because
; shift keyed values have 128 added to them.
; bios shift is 42 or 54
; xwindow shift is 50 or 62
; MS_Windows_shift is 16 or
; -----------------------
biostolnx: db 000h,009h,00ah,00bh,00ch,00dh,00eh,00fh
 db 010h,011h,012h,013h,014h,015h,016h,017h
; 1x
 db 018h,019h,01ah,01bh,01ch,01dh,01eh,01fh
 db 020h,021h,022h,023h,024h,025h,026h,027h
; 2x
 db 028h,029h,02ah,02bh,02ch,02dh,02eh,02fh
 db 030h,031h,032h,033h,034h,035h,036h,037h
; 3x
 db 038h,039h,03ah,03bh,03ch,03dh,03eh,03fh,
 db 012h,041h,000h,000h,000h,000h,000h,000h
; 4x
 db 000h,000h,000h,000h,000h,04dh,000h,061h
 db 062h,063h,052h,064h,054h,066h,056h,067h
; 5x
 db 068h,069h,06ah,06bh,000h,000h,000h,000h
 db 000h,000h,000h,000h,000h,000h,000h,000h
; 6x
 db 000h,000h,000h,000h,000h,000h,000h,000h
 db 000h,000h,000h,000h,000h,000h,000h,000h
; 7x
 db 000h,000h,000h,000h,000h,000h,000h,000h
 db 000h,000h,000h,000h,000h,000h,000h,000h
; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
; lnxtobios needs and 127 limiter
lnxtobios: db 000h,000h,000h,000h,000h,000h,000h,000h
 db 000h,001h,002h,003h,004h,005h,006h,007h
 db 008h,009h,00ah,00bh,00ch,00dh,00eh,00fh
 db 010h,011h,012h,013h,014h,015h,016h,017h
 db 018h,019h,01ah,01bh,01ch,000h,01eh,01fh
 db 020h,021h,022h,023h,024h,025h,026h,027h
 db 028h,000h,02ah,000h,02ch,02dh,02eh,02fh
 db 030h,031h,032h,033h,034h,035h,036h,037h
 db 038h,039h,000h,000h,000h,000h,000h,000h
 db 000h,000h,000h,000h,000h,045h,046h,047h
 db 048h,049h,04ah,04bh,04ch,04dh,04eh,04fh
 db 050h,051h,052h,053h,000h,000h,000h,000h
 db 000h,000h,048h,000h,04bh,000h,04dh,000h
 db 050h,000h,000h,000h,01ch,010h,000h,000h
 db 000h,000h,000h,000h,000h,000h,000h,000h
 db 000h,000h,000h,000h,000h,000h,000h,000h
fixxwvtab: db 0ffh,0feh,0fdh,0fch,0fbh,0fah,0f9h,0f8h
 db 0f7h,0f6h,0f5h,0f4h,0f3h,0f2h,0f1h,0f0h
 db 0efh,0eeh,0edh,0ech,0ebh,0eah,0e9h,0e8h
 db 0e7h,0e6h,0e5h,0e4h,0e3h,0e2h,0e1h,0e0h
 db 0dfh,0deh,0ddh,0dch,0dbh,0dah,0d9h,0d8h
 db 0d7h,0d6h,0d5h,0d4h,0d3h,0d2h,0d1h,0d0h
 db 0cfh,0ceh,0cdh,0cch,0cbh,0cah,0c9h,0c8h
 db 0c7h,0c6h,0c5h,0c4h,0c3h,0c2h,0c1h,0c0h
 db 0bfh,0beh,0bdh,0bch,0bbh,0bah,0b9h,0b8h
 db 0b7h,0b6h,0b5h,0b4h,0b3h,0b2h,0b1h,0b0h
 db 0afh,0aeh,0adh,0ach,0abh,0aah,0a9h,0a8h
 db 0a7h,0a6h,0a5h,0a4h,0a3h,0a2h,0a1h,0a0h
 db 09fh,09eh,09dh,09ch,09bh,09ah,099h,098h
 db 097h,096h,095h,094h,093h,092h,091h,090h
 db 08fh,08eh,08dh,08ch,08bh,08ah,089h,088h
 db 087h,086h,085h,084h,083h,082h,081h,080h
 db 07fh,07eh,07dh,07ch,07bh,07ah,079h,078h
 db 077h,076h,075h,074h,073h,072h,071h,070h
 db 06fh,06eh,06dh,06ch,06bh,06ah,069h,068h
 db 067h,066h,065h,064h,063h,062h,061h,060h
 db 05fh,05eh,05dh,05ch,05bh,05ah,059h,058h
 db 057h,056h,055h,054h,053h,052h,051h,050h
 db 04fh,04eh,04dh,04ch,04bh,04ah,049h,048h
 db 047h,046h,045h,044h,043h,042h,041h,040h
 db 03fh,03eh,03dh,03ch,03bh,03ah,039h,038h
 db 037h,036h,035h,034h,033h,032h,031h,030h
 db 02fh,02eh,02dh,02ch,02bh,02ah,029h,028h
 db 027h,026h,025h,024h,023h,022h,021h,020h
 db 01fh,01eh,01dh,01ch,01bh,01ah,019h,018h
 db 017h,016h,015h,014h,013h,012h,011h,010h
 db 00fh,00eh,00dh,00ch,00bh,00ah,009h,008h
 db 007h,006h,005h,004h,003h,002h,001h,000h
onefontdir dd 02020200h,02060204h
 dd 020a0208h,020e020ch
 dd 02120210h,02160214h,021a0218h,021e021ch
 dd 02220220h,02260224h,022a0228h,022e022ch
 dd 02320230h,02360234h,023a0238h,023e023ch
 dd 02420240h,02640253h,028a0275h,02b4029fh
 dd 02ca02bdh,02e402d7h,02f602edh,030402fbh
 dd 031e0309h,0340032bh,03620355h,03900377h
 dd 03b60399h,03d803cfh,03ee03e5h,040003f7h
 dd 04260411h,044c0437h,046e0459h,048c047fh
 dd 04ae04a1h,04c404bbh,04da04d1h,04f804ebh
 dd 051e050dh,0544052fh,05620559h,0580056fh
 dd 059a0591h,05b805abh,05ca05c5h,05e405d7h
 dd 05f205e9h,06180607h,06360625h,0658064bh
 dd 06760669h,068c067fh,06a20699h,06c006b3h
 dd 06ea06d9h,070806ffh,0726071dh,073c0733h
 dd 0756074dh,07740767h,078e0785h,07ac079fh
; xxxxxxxxxxxx
 dd 02020200h,02060204h,020a0208h,020e020ch
 dd 02120210h,02160214h,021a0218h,021e021ch
 dd 02220220h,02260224h,022a0228h,022e022ch
 dd 02320230h,02360234h,023a0238h,023e023ch
 dd 02020200h,02060204h,020a0208h,020e020ch
 dd 02120210h,02160214h,021a0218h,021e021ch
 dd 02220220h,02260224h,022a0228h,022e022ch
 dd 02320230h,02360234h,023a0238h,023e023ch
 dd 02020200h,02060204h,020a0208h,020e020ch
 dd 02120210h,02160214h,021a0218h,021e021ch
 dd 02220220h,02260224h,022a0228h,022e022ch
 dd 02320230h,02360234h,023a0238h,023e023ch
 dd 02020200h,02060204h,020a0208h,020e020ch
 dd 02120210h,02160214h,021a0218h,021e021ch
 dd 02220220h,02260224h,022a0228h,022e022ch
 dd 02320230h,02360234h,023a0238h,023e023ch
; top of font    5*7 letter on 7*9 box
;    xpos 1-5 within 0-6
;    ypos 1-7 within 0-8
;    x    y    size    drawtype
; drawtype    direction
;        1    right
;        2    down
;        3    upperleft lowerright
;        4    lowerleft upperright
twofontdll db "0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-"
 db "0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-"
;  32 blank  exclaimation  doublequotes poundsign
 db "0-2142314226212721-"
 db "2222422213214321-2162416213511551-"
;  36  dollarsign  percent
 db "11511122125317513162-16543122132153323731-"
;  38 ampersand  singlequote ( )
 db "13421451175151622334-13212422-132415231332-"
 db "313353323734-"
; 42 * + , - . /
 db "165412533252-14513252-35214522-"
 db "1441-35224522-1644-"
; 48 0 1 2
 db "12525252213127311654-"
 db  "316227311324-"
 db "52221522114124312731-"
; 51 3 4 5
 db "11411441174152225522-"
 db "114224315162-"
 db "22225522213124312731-"
; 54 6 7 8
 db "552212221522213124312731-"
 db "11511654-"
 db "2131243127315222552212221522-"
;    57 9 : ;
 db "213124312731522255221222-"
 db "33213521-222125213522-"
;    60  lessthan  equalsign  greaterthan  question
 db "14341433-13411541-17341143-"
 db "3431513211413432-"
;    64 at A
 db "33322433516211511162-"
 db "2131243111625162-"
;    66 B C D
 db "21332433243127311162-213127311252-"
 db "21335322273411621121-"
;    69 E F G
 db "2131243127311162-116221312431-"
 db "24331421273121311162-"
; 72 H I J K
 db "243151621162-213127313252-"
 db "17415162-243424331162-"
;    76 L M N
 db "27311162-3324113352521252-"
 db "233351621162-"
;    79 O P Q
 db "13344223543214322731-"
 db "2431113151421162-1151124215443333-"
;    82 R S T
 db "24311141514211621343-"
 db "21213731145154321142-11513252-"
;    85 U V W
 db "273151621162-3734143312225232-"
 db "1734342351621162-"
; 88 X Y Z [
 db "16541253-1132513223313432-"
 db "165411511751-113117311252-"
; 92 backslash ] upper  underline
; graveaccentbackwardssinglequote
 db "1253-313137315252-"
 db "312112214221-1751-21213221-"
; 97 a b c
 db "21312431273152521522-"
 db "2431273155221252-"
 db "243127311522-"
; 100 d e f
 db "1522243127315252-"
 db "21312431273152221252-"
 db "214124211252-"
; 103 g h i j
 db "1434133351622731-"
 db "243154321162-"
 db "23422121-273153423121-"
; 107 k l m n
 db "253424332252-22523621-"
 db "1341143234325432-134314325332-"
; 111 o p q
 db "142437341523323314225422-"
 db "4322232125211342-"
 db "11511451514211423342-"
; 114 r s t u
 db "23311432-12411232143127341741-"
 db "13513252-143254322731-"
; 115 v w x y
 db "37341433-1641133233325332-"
 db "16441343-2232423224313522-"
; 122 z  leftset  or  rightset
 db "174414312731-3131373114213162-"
 db "31323522-1131316234311731-"
;  126 sinewave
 db "122131234121-0-0-0-0-0-0-0-"
 db "0-0-0-0-0-0-0-0-0-0-0-0-0"
;    end of vector font
 db "."
 dd 0,0,0,0,0,0,0,0
;  small font 128 * (4 * half byte lines )
; 512 byte size
; 3*5 within 4*6 to 4*8
tnyfourfont:  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 00h, 00h, 00h, 00h
  db 01h, 11h, 01h, 00h
  db 05h, 00h, 00h, 00h
  db 05h, 75h, 75h, 00h
  db 07h, 67h, 37h, 00h
  db 04h, 17h, 41h, 00h
  db 06h, 64h, 77h, 00h
  db 02h, 00h, 00h, 00h
  db 01h, 64h, 61h, 00h
  db 04h, 31h, 34h, 00h
  db 05h, 07h, 05h, 00h
  db 02h, 27h, 22h, 00h
  db 00h, 00h, 13h, 00h
  db 00h, 07h, 00h, 00h
  db 00h, 00h, 02h, 00h
  db 01h, 12h, 44h, 00h
  db 07h, 55h, 57h, 00h
  db 01h, 11h, 11h, 00h
  db 07h, 17h, 47h, 00h
  db 07h, 17h, 17h, 00h
  db 05h, 57h, 11h, 00h
  db 07h, 47h, 17h, 00h
  db 07h, 47h, 57h, 00h
  db 07h, 11h, 11h, 00h
  db 07h, 57h, 57h, 00h
  db 07h, 57h, 17h, 00h
  db 00h, 20h, 20h, 00h
  db 00h, 10h, 13h, 00h
  db 01h, 24h, 21h, 00h
  db 00h, 70h, 70h, 00h
  db 04h, 21h, 24h, 00h
  db 07h, 53h, 02h, 00h
  db 07h, 37h, 57h, 00h
  db 07h, 57h, 55h, 00h
  db 06h, 56h, 56h, 00h
  db 07h, 44h, 47h, 00h
  db 06h, 55h, 56h, 00h
  db 07h, 47h, 47h, 00h
  db 07h, 47h, 44h, 00h
  db 07h, 45h, 53h, 00h
  db 05h, 57h, 55h, 00h
  db 07h, 22h, 27h, 00h
  db 01h, 15h, 57h, 00h
  db 05h, 64h, 65h, 00h
  db 04h, 44h, 47h, 00h
  db 06h, 67h, 55h, 00h
  db 05h, 62h, 35h, 00h
  db 06h, 55h, 53h, 00h
  db 07h, 57h, 44h, 00h
  db 06h, 55h, 31h, 00h
  db 07h, 56h, 65h, 00h
  db 06h, 47h, 13h, 00h
  db 07h, 22h, 22h, 00h
  db 05h, 55h, 57h, 00h
  db 00h, 55h, 52h, 00h
  db 05h, 56h, 64h, 00h
  db 05h, 22h, 55h, 00h
  db 05h, 52h, 22h, 00h
  db 03h, 17h, 46h, 00h
  db 07h, 44h, 47h, 00h
  db 04h, 42h, 21h, 00h
  db 07h, 11h, 17h, 00h
  db 02h, 50h, 00h, 00h
  db 00h, 00h, 77h, 00h
  db 03h, 20h, 00h, 00h
  db 07h, 17h, 57h, 00h
  db 04h, 47h, 57h, 00h
  db 00h, 07h, 47h, 00h
  db 00h, 17h, 57h, 00h
  db 07h, 57h, 47h, 00h
  db 00h, 64h, 64h, 00h
  db 00h, 74h, 53h, 00h
  db 00h, 47h, 55h, 00h
  db 02h, 02h, 22h, 00h
  db 02h, 02h, 26h, 00h
  db 00h, 54h, 65h, 00h
  db 00h, 02h, 23h, 00h
  db 00h, 06h, 75h, 00h
  db 00h, 56h, 23h, 00h
  db 00h, 07h, 57h, 00h
  db 00h, 75h, 74h, 00h
  db 00h, 75h, 31h, 00h
  db 00h, 07h, 44h, 00h
  db 06h, 45h, 13h, 00h
  db 00h, 27h, 22h, 00h
  db 00h, 05h, 57h, 00h
  db 00h, 05h, 52h, 00h
  db 00h, 76h, 64h, 00h
  db 00h, 52h, 50h, 00h
  db 00h, 52h, 22h, 00h
  db 03h, 15h, 46h, 00h
  db 03h, 36h, 33h, 00h
  db 06h, 62h, 66h, 00h
  db 06h, 63h, 66h, 00h
  db 06h, 30h, 00h, 00h
  db 00h, 00h, 00h, 00h
; bottom of small font 127
lnibba db 00fh,01fh,02fh,03fh,04fh,05fh,06fh,07fh
       db 08fh,09fh,0afh,0bfh,0cfh,0dfh,0efh,0ffh
rnibba db 0f0h,0f1h,0f2h,0f3h,0f4h,0f5h,0f6h,0f7h
       db 0f8h,0f9h,0fah,0fbh,0fch,0fdh,0feh,0ffh
lnibbo db 000h,010h,020h,030h,040h,050h,060h,070h
       db 080h,090h,0a0h,0b0h,0c0h,0d0h,0e0h,0f0h
rnibbo db 000h,001h,002h,003h,004h,005h,006h,007h
       db 008h,009h,00ah,00bh,00ch,00dh,00eh,00fh
; font686.txt  print 4*5 letter in 6*8 box or 6*6 box
; font686.txt  get 6*6 image from array for each character
; font686.txt  each character is 36 bits or 4.5 bytes
; 9 bytes each two characters
; 144 byte header for first 32 characters 00 - 31
; 1075
font686: db   000H, 000H, 000H, 000H
 db   000H, 000H, 000H, 000H
 db   000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H
 db   000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H
 db   000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H
 db   000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H
 db   000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H
 db   000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H
 db   000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H
 db   000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H
 db   000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H
 db   000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H
 db   000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H
 db   000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H
 db   000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H
 db   000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H
 db   000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H
 db   000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H
 db   000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H
 db   000H, 000H, 000H, 000H, 000H, 008H, 020H, 0C0H
 db   00CH, 001H, 026H, 080H, 000H, 000H, 00AH, 078H
 db   0A7H, 094H, 001H, 0E5H, 01EH, 029H, 0E0H, 01CH
 db   050H, 0C2H, 08EH, 000H, 066H, 096H, 049H, 0E0H
 db   00CH, 010H, 000H, 000H, 000H, 062H, 008H, 020H
 db   060H, 018H, 010H, 041H, 018H, 001H, 063H, 01EH
 db   031H, 0A0H, 00CH, 031H, 0E3H, 00CH, 000H, 000H
 db   000H, 030H, 040H, 000H, 001H, 0C0H, 000H, 000H
 db   000H, 000H, 030H, 0C0H, 002H, 010H, 082H, 010H
 db   001H, 0E4H, 092H, 049H, 0E0H, 004H, 030H, 041H
 db   004H, 001H, 0E0H, 09EH, 041H, 0E0H, 01EH, 009H
 db   0E0H, 09EH, 001H, 024H, 09EH, 008H, 020H, 01EH
 db   041H, 0E0H, 09EH, 001H, 0E4H, 01EH, 049H, 0E0H
 db   01EH, 008H, 020H, 082H, 001H, 0E4H, 09EH, 049H
 db   0E0H, 01EH, 049H, 0E0H, 09EH, 000H, 003H, 000H
 db   030H, 000H, 000H, 030H, 003H, 004H, 000H, 063H
 db   018H, 030H, 060H, 000H, 078H, 007H, 080H, 001H
 db   083H, 006H, 031H, 083H, 012H, 010H, 001H, 000H
 db   000H, 0C4H, 086H, 028H, 0E0H, 01EH, 049H, 0E4H
 db   092H, 001H, 0C4H, 09CH, 049H, 0C0H, 01EH, 041H
 db   004H, 01EH, 001H, 085H, 012H, 051H, 080H, 01EH
 db   041H, 0E4H, 01EH, 001H, 0E4H, 01EH, 041H, 000H
 db   00EH, 041H, 0C4H, 08EH, 001H, 024H, 09EH, 049H
 db   020H, 00EH, 010H, 041H, 00EH, 000H, 020H, 082H
 db   009H, 0E0H, 012H, 051H, 085H, 012H, 001H, 004H
 db   010H, 041H, 0E0H, 018H, 061H, 065H, 092H, 001H
 db   026H, 09AH, 059H, 020H, 00CH, 049H, 020H, 08CH
 db   001H, 0E4H, 09EH, 041H, 000H, 00CH, 049H, 042H
 db   006H, 001H, 0C4H, 09EH, 051H, 060H, 00CH, 041H
 db   0E0H, 08CH, 001H, 0E2H, 008H, 020H, 080H, 012H
 db   049H, 024H, 09EH, 001H, 024H, 094H, 050H, 080H
 db   012H, 069H, 0A1H, 086H, 001H, 022H, 08CH, 051H
 db   020H, 012H, 048H, 0C3H, 00CH, 000H, 0E0H, 08CH
 db   041H, 0C0H, 00CH, 020H, 082H, 00CH, 001H, 004H
 db   008H, 010H, 020H, 00CH, 010H, 041H, 00CH, 000H
 db   042H, 080H, 000H, 000H, 000H, 000H, 000H, 01EH
 db   001H, 002H, 000H, 000H, 000H, 01EH, 009H, 0E4H
 db   09EH, 001H, 004H, 01CH, 049H, 0C0H, 000H, 038H
 db   082H, 00EH, 000H, 020H, 09EH, 049H, 0E0H, 01EH
 db   049H, 0E4H, 01EH, 000H, 0E2H, 00CH, 020H, 080H
 db   00EH, 048H, 0E0H, 09CH, 001H, 004H, 01EH, 049H
 db   020H, 008H, 000H, 082H, 008H, 000H, 000H, 004H
 db   011H, 0C0H, 00AH, 030H, 083H, 00AH, 000H, 004H
 db   010H, 041H, 0C0H, 00EH, 029H, 024H, 080H, 000H
 db   004H, 09AH, 059H, 020H, 000H, 031H, 024H, 08CH
 db   000H, 003H, 08AH, 038H, 080H, 01CH, 051H, 0C2H
 db   006H, 000H, 003H, 088H, 020H, 080H, 00CH, 020H
 db   0E0H, 08CH, 000H, 003H, 084H, 010H, 040H, 000H
 db   049H, 027H, 080H, 000H, 004H, 094H, 020H, 000H
 db   000H, 051H, 047H, 00CH, 000H, 004H, 08CH, 031H
 db   020H, 000H, 028H, 0A1H, 004H, 000H, 003H, 084H
 db   021H, 0C0H, 006H, 010H, 0C1H, 006H, 000H, 082H
 db   000H, 020H, 080H, 018H, 020H, 0C2H, 018H, 000H
 db   0A5H, 000H, 000H, 000H, 000H, 000H, 000H, 000H
; bottom of this font
bamkeylnxtow: db 000h,000h,000h,000h,000h,000h,000h,000h,
 db 000h,01bh,031h,032h,033h,034h,035h,036h
 db 037h,038h,039h,030h,0bdh,0bbh,008h,000h
 db 051h,057h,045h,052h,054h,059h,055h,049h
 db 04fh,050h,0dbh,0ddh,00dh,011h,041h,053h
 db 044h,046h,047h,048h,04ah,04bh,04ch,0bah
 db 0deh,0c0h,010h,0dch,05ah,058h,043h,056h
 db 042h,04eh,04dh,0bch,0beh,0bfh,010h,06ah
 db 000h,020h,000h,000h,000h,000h,000h,000h
 db 000h,000h,000h,000h,000h,000h,000h,037h
 db 038h,039h,06dh,034h,035h,036h,06bh,031h
 db 032h,033h,030h,06eh,000h,000h,000h,000h
 db 000h,024h,026h,021h,025h,000h,027h,023h
 db 028h,022h,02dh,02eh,00dh,011h,024h,026h
 db 021h,025h,027h,023h,028h,022h,02dh,02eh
 db 000h,000h,000h,000h,000h,000h,000h,000h
; 080 offset
 db 000h,000h,000h,000h,000h,000h,000h,000h
 db 000h,000h,000h,000h,000h,000h,000h,000h
 db 000h,000h,000h,000h,000h,000h,000h,000h
 db 000h,000h,000h,000h,000h,000h,000h,000h
 db 000h,000h,000h,000h,000h,000h,000h,000h
 db 000h,000h,000h,000h,000h,000h,000h,000h
 db 000h,000h,000h,000h,000h,000h,000h,000h
 db 000h,000h,000h,000h,000h,000h,000h,000h
 db 000h,000h,000h,000h,000h,000h,000h,000h
 db 000h,000h,000h,000h,000h,000h,000h,000h
 db 000h,000h,000h,000h,000h,000h,000h,000h
 db 000h,000h,000h,000h,000h,000h,000h,000h
 db 000h,000h,000h,000h,000h,000h,000h,000h
 db 000h,000h,000h,000h,000h,000h,000h,000h
 db 000h,000h,000h,000h,000h,000h,000h,000h
 db 000h,011h,000h,000h,000h,000h,000h,000h
trevbyte: db 000h,080h,040h,0c0h,020h,0a0h,060h,0e0h
 db 010h,090h,050h,0d0h,030h,0b0h,070h,0f0h
 db 008h,088h,048h,0c8h,028h,0a8h,068h,0e8h
 db 018h,098h,058h,0d8h,038h,0b8h,078h,0f8h
 db 004h,084h,044h,0c4h,024h,0a4h,064h,0e4h
 db 014h,094h,054h,0d4h,034h,0b4h,074h,0f4h
 db 00ch,08ch,04ch,0cch,02ch,0ach,06ch,0ech
 db 01ch,09ch,05ch,0dch,03ch,0bch,07ch,0fch
 db 002h,082h,042h,0c2h,022h,0a2h,062h,0e2h
 db 012h,092h,052h,0d2h,032h,0b2h,072h,0f2h
 db 00ah,08ah,04ah,0cah,02ah,0aah,06ah,0eah
 db 01ah,09ah,05ah,0dah,03ah,0bah,07ah,0fah
 db 006h,086h,046h,0c6h,026h,0a6h,066h,0e6h
 db 016h,096h,056h,0d6h,036h,0b6h,076h,0f6h
 db 00eh,08eh,04eh,0ceh,02eh,0aeh,06eh,0eeh
 db 01eh,09eh,05eh,0deh,03eh,0beh,07eh,0feh
 db 001h,081h,041h,0c1h,021h,0a1h,061h,0e1h
 db 011h,091h,051h,0d1h,031h,0b1h,071h,0f1h
 db 009h,089h,049h,0c9h,029h,0a9h,069h,0e9h
 db 019h,099h,059h,0d9h,039h,0b9h,079h,0f9h
 db 005h,085h,045h,0c5h,025h,0a5h,065h,0e5h
 db 015h,095h,055h,0d5h,035h,0b5h,075h,0f5h
 db 00dh,08dh,04dh,0cdh,02dh,0adh,06dh,0edh
 db 01dh,09dh,05dh,0ddh,03dh,0bdh,07dh,0fdh
 db 003h,083h,043h,0c3h,023h,0a3h,063h,0e3h
 db 013h,093h,053h,0d3h,033h,0b3h,073h,0f3h
 db 00bh,08bh,04bh,0cbh,02bh,0abh,06bh,0ebh
 db 01bh,09bh,05bh,0dbh,03bh,0bbh,07bh,0fbh
 db 007h,087h,047h,0c7h,027h,0a7h,067h,0e7h
 db 017h,097h,057h,0d7h,037h,0b7h,077h,0f7h
 db 00fh,08fh,04fh,0cfh,02fh,0afh,06fh,0efh
 db 01fh,09fh,05fh,0dfh,03fh,0bfh,07fh,0ffh
wdkey000: dd 000000000h,000000000h
        dd 000002008h,000000d00h
 dd 000000000h,000000000h,01B000000h,000000000h
 dd 0CFD1C920h,0CDC8CBC7h,0000000D0h,000D3D200h
 dd 033323130h,037363534h,000003938h,000000000h
 dd 063626100h,067666564h,06B6A6968h,06F6E6D6Ch
 dd 073727170h,077767574h,0007A7978h,000000000h
 dd 033323130h,037363534h,02B2A3938h,02F2E2D00h
 dd 0BEBDBCBBh,0C2C1C0BFh,00000C4C3h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,03D3B0000h,02F2E2D2Ch
 dd 000000060h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,05B000000h,000275D5Ch
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
; xxxxxxxxxxxx
 dd 000000000h,000000000h,000000000h,00000A000h
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000020h,000000000h,000000000h,000000000h
 dd 023402129h,0265E2524h,00000282Ah,000000000h
 dd 043424100h,047464544h,04B4A4948h,04F4E4D4Ch
 dd 053525150h,057565554h,0005A5958h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,02B3A0000h,03F3E5F3Ch
 dd 00000007Eh,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,07B000000h,000227D7Ch
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
; xxxxxxxxxxxx
 dd 000000000h,000000000h,000002008h,000000d00h
 dd 000000000h,000000000h,01B000000h,000000000h
 dd 0CFD1C920h,0CDC8CBC7h,0000000D0h,000D3D200h
 dd 033323130h,037363534h,000003938h,000000000h
 dd 003020100h,007060504h,00B0A0908h,00F0E0D0Ch
 dd 013121110h,017161514h,0001A1918h,000000000h
 dd 033323130h,037363534h,02B2A3938h,02F2E2D00h
 dd 0BEBDBCBBh,0C2C1C0BFh,00000C4C3h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,03D3B0000h,02F2E2D2Ch
 dd 000000060h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,05B000000h,000275D5Ch
 dd 000000000h,000000000h,000000000h,000000000h
 dd 000000000h,000000000h,000000000h,000000000h
; xxxxxxxxxxxx
amkeydown dd 874
amkeyup dd 875
ampaint dd 633
amdestroy dd 620
amcreate dd 619
fstab1864: dd 01,01,01,01
 dd 01,01,01,01
 dd 03,04,11,12
 dd 03,03,03,03
; fstab1864  8 1928    4 1960    2 1896    1 1880
chdelval dd 2050,2142,2142,2142
    dd 2054,2055,2156,2142
    dd 2158,2142,2142,2142
    dd 2142,2142,2142,2142
; insert litharg here 0555
litharg db "000576.."
 db "000000..000008..000016..000024.."
 db "000031..000038..000041..000043..000045.."
 db "000049..000053..000056..000061..000067..000072.."
 db "000078..000086..000088..000093.."
 db "000098..000102..000109..000114..000119..000126.."
 db "000129..000132..000136.."
 db "000141.."
;        000207 is 30th
 db "000207..000267..000327..000387..000447.."
 db "000507..000567..000627..000687..000747.."
 db "000807..000867..000927..000987..001047.."
 db "001107..001167..001227..001287..001347.."
 db "001407..001467.."
;        001608 is 53rd
 db "001527..001608..001648..001688.."
 db "001708..001748..001788..001818.."
 db "001878..001928..001982..002017..002047.."
 db "002115..002138.."
 db "002177..002215..002275.."
;        002177 is 67nth
 db "002344.."
 db "002424.."
; begin actual text at
;(last numbers line number + 1) * 8
; estimated starting offset is 576
 db "unknown command!insertb insert delete af m k tof b"
 db "ot up down input quit print!replace v open save n"
 db "ew change find list inputc uc l"
 db "c gui guiy!"
;    gui guiy is line 27
 db "[eddie4] ....   te"
 db "xt editor made             by Eric Matteson    !"
 db "a.sAve.as...u.Uppercase...j.not.used.....z.Zchangedoccheck.!"
 db "b.Bot.v.Virtscrn.888888888888888888888888888888888888888888!"
 db "c.list.Commands..88888888......8888888.88.....8888.88888888!"
 db "d.set.bkgnD......88888888..88..88...88.88.....8888.88888888!"
 db "e.Exit...........88888888......88.8.88.8888.888888.8888..88!"
 db "f.set.upleFt.....88888888..88..88.8..8.8888.888888.88888888!"
 db "g.set.lowriGht...88888888..88..88.88...8888.888888.88888888!"
 db "h.rigHtmost......888888888888888888888888888888888888888888!"
 db "i.fInd...........888888888888888888888888888888888888888888!"
 db "l.Load.text......88...88888......88......88......88.....888!"
 db "m.upleft.Move....88.8...888.888..88..88..88..88888888.88888!"
 db "n.New..a.sAve.As.88.888.888......88......88.....88888.88888!"
 db "o.Open...........88.8...888.8..8888..88..88..88888888.88888!"
 db "p.upleft.coPy....88...88888.88...88..88..88..88888888.88888!"
 db "q.Quit...........888888888888888888888888888888888888888888!"
 db "r.Return....x.Xmarginset....y.Ylinenumber...k.normalEND....!"
 db "t.Tof............8..EVEN.IF.THERE.IS.A.WAR.NOW.............!"
 db "v..edmacktb.852..8..VOTE.TO.ABOLISH.THE.US.MILITARY.DRAFT..!"
 db "=.load.hex.......8...AND.ITS..REGISTRATION...NOW...........!"
 db "@.load.base.64......Vote.for.an.all.volunteer.jury.system..!"
 db "line.21...b:/.......Vote.for.an.all.volunteer.jury.system..!"
 db "line.22...b:/filename.txt..for.file.inside.bimg2880.img....!"
;    need next lines number 27.52
 db " HOME GETS MENU  ANTI-DRAFT EDMACKTB.852 "
 db "xxx yyyyyyy vv  lllllll  HOME GETS MU  !"
 db "Enter filename to be saved   by save as!"
 db "Enter filename to be saved   by exit  y!"
 db "Save file first y )!"
; save as 53    exit 54
;            55 exit save question
; 56 bkgnd    57 open
;    58 load    59 find
 db "enter   one  character  for  background!"
 db "Enter filename to be opened for reading!"
 db "Enter filename to  be  loaded!"
 db "Enter leftmost portion of li"
 db "ne to find except        blanks!"
 db "Enter   line  number  between  1  and  last  line!"
 db "Vote against the U.S. military draft ev"
 db "en in wartime.!"
 db "Enter line  to be  inserted before!"
 db "Enter  line  to  be  inserted!"
 db "input mode. Press enter twice in a ro"
 db "w (zero length line) when done!"
 db "is to be replaced with!"
 db "is zero length line correct ) (y or n)!"
 db "change leftmost portion except blanks!"
; 67    change
 db "press just enter to continu"
 db "e or        h enter to halt list!"
 db "inputc mode. Press enter twice in a r"
 db "ow (zero length line) when done!"
 db "nznormalend == 1. Press ESC to return to menu.    "
 db "05/13/2022!!!!................!!!!!!!!..........!!"
; end of litharg
jasonsname db "edmackJN"
 dd 0,0
scotsname db "edmackXS"
 dd 0,0,0,0,0,0
; int revicram(char* ricstart, int ricwid)
; 1000 ebp   1004 oldretad    1008 *ricstart  1012 ricwid
;  984 edx    988 ebx          992 esi         996 edi
;                              976 eax         980 ecx
revicram: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 add edi,1004
 mov edx,edi
 sub edx,1000
 mov ebx,edi
 sub ebx,1003
 mov esi,[ebp+1008]
 sub esi,1008
 mov ecx,[ebp+1012]
 xor edi,edi
 mov [ebp+1008],edi
revitop: or ecx,ecx
 jz revibot
 mov al,[esi+1008]
 add esi,ebx
 mov [ebp+edi*1+1008],al
 add edi,ebx
 sub ecx,ebx
 cmp edi,edx
 js revitop
revibot: mov esi,[ebp+1004]
 mov [ebp+1012],esi
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of revicram
; void revuncram(char* rucstart, int rucwid, int rucvalue)
; 1016 rucvalue
; 1000 ebp   1004 oldretad    1008 *rucstart  1012 rucwid
;  984 edx    988 ebx          992 esi         996 edi
;                              976 eax         980 ecx
revuncram: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 add edi,1004
 mov edx,edi
 sub edx,1000
 mov ebx,edi
 sub ebx,1003
 mov edi,[ebp+1008]
 sub edi,1004
 mov ecx,[ebp+1012]
 xor esi,esi
revutop: or ecx,ecx
 jz revubot
 mov al,[ebp+esi*1+1016]
 add esi,ebx
 mov [edi+1004],al
 add edi,ebx
 sub ecx,ebx
 cmp esi,edx
 js revutop
revubot: mov esi,[ebp+1004]
 mov [ebp+1016],esi
 mov edi,[ebp+976]
 mov [ebp+1012],edi
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 ret
; bottom of revuncram
; int nibget12(int nibsub1, char* nibbrug)
; 1000 ebp    1004 retad    1008 nibsub1    1012 nibbrug
;  984 edx     988 ebx       992 esi         996 edi
;  968 1       972 0         976 eax         980 ecx
;  952 5       956 4         960 3           964 2
;  936         940 8         944 7           948
;  920         924 12        928 11          932 nibrem
;  904 17      908 16        912 15          916 espaddend
nibget12: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 add edi,1018
 xor ebx,ebx
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
 mov edx,edi
 sub edx,1017
nibgetpu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz nibgetpu
 mov [ebp+916],eax
 mov edx,[ebp+1008]
 sub edx,[ebp+968]
 mov ecx,edx
 and ecx,[ebp+968]
 mov [ebp+932],ecx
 mov esi,edx
 shr esi,1
 xor edx,edx
 mov ebx,[ebp+1012]
 sub ebx,400
 mov dl,[ebx+esi*1+400]
 mov eax,[ebp+932]
 and eax,[ebp+968]
 jnz niboddre
 mov ecx,[ebp+956]
 shr edx,cl
niboddre: and edx,[ebp+912]
 mov ecx,[ebp+1004]
 mov [ebp+1012],ecx
 mov [ebp+1008],edx
 add esp,[ebp+916]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of nibget12
; void nibput12(char *nibdug,int niboub1,int nv12)
; 1004 retad   1008 *nibdug   1012 niboub1   1016 nv12
; 988 ebx    992 esi    996 edi    1000 ebp
; 972 0      976 eax    980 ecx     984 edx
; 956 4      960 3      964 2       968 1
; 940 8      944 7      948 6       952 nv15
; 924 12     928 11     932 10      936 nidtarg_??
; 908 16     912 15     916 14      920 niboub0
; 892 20     896 19     900 18      904 nidhalf
; 876 24     880 23     884 22      888 nidrem
; 860 28     864 27     868 26      872 espaddend
nibput12: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1029
 mov edx,edi
 sub edx,1028
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
nibbpu12: push ebx
 add ebx,edx
 sub ecx,edx
 jnz nibbpu12
 mov [ebp+872],eax
; xor ebx,ebx
; mov [ebp+936],ebx
 mov ecx,[ebp+1012]
 sub ecx,[ebp+968]
 mov [ebp+920],ecx
 mov edx,[ebp+920]
 shr edx,1
 mov [ebp+904],edx
 mov ecx,[ebp+1016]
 and ecx,[ebp+912]
 mov [ebp+952],ecx
 mov edx,[ebp+920]
 and edx,[ebp+968]
 mov [ebp+888],edx
 mov ebx,[ebp+1008]
 sub ebx,1004
 mov esi,[ebp+904]
 xor edx,edx
 mov dl,[ebx+esi*1+1004]
 mov edi,[ebp+972]
 cmp edi,[ebp+888]
 jnz nibbone
 and edx,0ff0fh
 mov eax,[ebp+952]
 mov ecx,[ebp+956]
 shl eax,cl
 or edx,eax
nibbone: mov edi,[ebp+968]
 cmp edi,[ebp+888]
 jnz nibbdvg
 and edx,0fff0h
 or edx,[ebp+952]
nibbdvg: mov edi,esi
 mov [ebx+edi*1+1004],dl
 add esp,[ebp+872]
 mov esi,[ebp+976]
 mov edi,[ebp+1004]
 mov [ebp+1012],esi
 mov [ebp+1016],edi
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 ret
; bottom of nibput12
; int nampy(int nasl, int nasr)
; 1004 retad    1008 nasl    1012 nasr
; 992 esi        996 edi    1000 ebp
; 980 ecx        984 edx    988 ebx
nampy: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 xor eax,eax
 xor edx,edx
 add edx,1000
 mov ebx,edx
 sub ebx,999
 mov esi,[ebp+1008]
 mov edi,[ebp+1012]
namlop: mov ecx,ebx
 and ecx,edi
 jz namzur
 add eax,esi
namzur: shr edi,1
 add esi,esi
 or edi,edi
 jz nambot
 add edx,ebx
 cmp edx,1032
 js namlop
nambot: mov edx,[ebp+1004]
 mov [ebp+1012],edx
 mov [ebp+1008],eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; end of nampy
; int smposdiv(int posnu,int posde)
; 2004 retad    2008 posnu      2012 posde
; 1992 esi        1996 edi        2000 ebp
; 1980 ecx        1984 edx        1988 ebx
; 1968 cst32    1972 cst1        1976 frac
smposdiv: push ebp
 mov ebp,esp
 sub ebp,2000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 xor eax,eax
 push eax
 push eax
 push eax
 xor esi,esi
 add esi,1000
 mov ecx,esi
 sub ecx,968
 sub esi,999
 mov [ebp+1972],esi
 mov [ebp+1968],ecx
 mov esi,[ebp+2008]
 xor ecx,ecx
 xor edi,edi
loopdivt: mov edx,[ebp+1976]
 clc
 adc [ebp+1976],edx
 clc
 adc esi,esi
 adc edi,edi
 mov edx,edi
 sub edx,[ebp+2012]
 jb loopdivz
 mov edi,edx
 mov ebx,[ebp+1972]
 add [ebp+1976],ebx
loopdivz: add ecx,[ebp+1972]
 cmp ecx,[ebp+1968]
 js loopdivt
 mov eax,[ebp+1976]
 mov esi,[ebp+2004]
 mov [ebp+2012],esi
 mov [ebp+2008],eax
 pop ecx
 pop edx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of smposdiv
; int hdigval(char* hdf, int hds)
; 1004 retad    1008 *hdf    1012 hds
; 988 ebx    992 esi    996 edi    1000 ebp
; 972 0    976 eax    980 ecx    984 edx
; 956 4    960 3    964 2    968 1
; 940 8    944 7    948 6    952 5
; 924 12    928 11    932 10    936 9
; 908 16    912 15    916 14    920 13
; 892 20    896 19    900 18    904 17
; 876 24    880 23    884 22    888 21
; 860 28    864 27    868 26    872 25
; 844 32    848 31    852 30    856 29
; 828 36    832 35    836 34    840 33
; 812 40    816 39    820 38    824 37
; 796 44    800 43    804 42    808 41
; 780 48    784 47    788 46    792 45 -
; 764 52    768 51    772 50    776 49
; 748 56    752 55    756 54    760 53
; 732 60    736 59    740 58    744 57
; 716 64    720 63    724 62    728 61
; 700 68 D    704 67 C    708 66 B    712 65 A
; 684 72 H    688 71 G    692 70 F    696 69 E
; 668 76 L    672 75 K    676 74 J    680 73 I
; 652 80 P    656 79 O    660 78 N    664 77 M
; 636 84 T    640 83 S    644 82 R    648 81 Q
; 620 88 X    624 87 W    628 86 V    632 85 U
; 604 92    608 91    612 90 Z    616 89 Y
; 588 96    592 95    596 94        600
; 572 100 d    576 99 c    580 98 b    584 97 a
; 556 104 h    560 103 g    564 102 f    568 101 e
; 540 108 l    544 107 k    548 106 j    552 105 i
; 524 112 p    528 111 o    532 110 n    536 109 m
; 508 116 t    512 115 s    516 114 r    520 113 q
; 492 120 x    496 119 w    500 118 v    504 117 u
; 476 124    480 123    484 122 z  488 121 y
; 460 128    464 127    468 126    472 espfixer
hdigval: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1130
 mov ecx,esi
 mov edx,esi
 xor edi,edi
 sub ecx,1000
 sub edx,1129
 mov eax,ecx
 add eax,eax
 add eax,eax
hdigvu: push edi
 add edi,edx
 sub ecx,edx
 push edi
 add edi,edx
 sub ecx,edx
 jnz hdigvu
 mov [ebp+472],eax
 mov edi,[ebp+460]
 mov ebx,[ebp+1008]
 sub ebx,2048
 xor edx,edx
 mov esi,[ebp+1012]
 mov dl,[ebx+esi*1+2048]
 cmp edx,[ebp+972]
 js hlowfail
 cmp edx,[ebp+788]
 jns hlowfail
 mov edi,edx
hlowfail: mov ecx,[ebp+780]
 cmp edx,ecx
 js htenfail
 cmp edx,[ebp+740]
 jns htenfail
 mov edi,edx
 sub edi,ecx
htenfail: xor ecx,ecx
 add ecx,[ebp+752]
 cmp edx,[ebp+712]
 js huhexfail
 cmp edx,[ebp+620]
 jns huhexfail
 mov edi,edx
 sub edi,ecx
huhexfail: mov ecx,[ebp+624]
 cmp edx,[ebp+584]
 js hlhexfail
 cmp edx,[ebp+492]
 jns hlhexfail
 mov edi,edx
 sub edi,ecx
hlhexfail: mov [ebp+1008],edi
 mov esi,[ebp+1004]
 mov [ebp+1012],esi
 add esp,[ebp+472]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of hdigval
; int rlnvalue(int subd0,char* rlvasewid,char* rlnline)
; 1004 retad    1008 subd0    1012 *rlvasewid    1016 *rlnline
; 988 ebx    992 esi     996 edi      1000 ebp
; 972 0    976 eax    980 ecx    984 edx
; 956 4    960 3    964 2    968 1
; 940 8    944 7    948 6    952 5
; 924 12    928 11    932 10    936 9
; 908 16    912 15    916 14    920 13
; 892 20    896 19    900 18    904 product
; 876 24    880 23    884 22    888
; 860 28    864 27    868 26    872
; 844 32    848 31    852 30    856 width
; 828 36    832 35    836 34    840 base-1
; 812 40    815 39    820 38    824 negind
; 796 44    800 43    804 42    808 espfix
; 780 48    784 47    788 46    792 45 -
rlnvalue: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1050
 mov edx,esi
 mov ecx,esi
 sub ecx,1000
 sub edx,1049
 mov eax,ecx
 add eax,eax
 add eax,eax
 xor edi,edi
rlnvalpu: push edi
 add edi,edx
 sub ecx,edx
 push edi
 add edi,edx
 sub ecx,edx
 jnz rlnvalpu
 mov [ebp+808],eax
 xor edx,edx
 mov [ebp+904],edx
 xor esi,esi
 mov [ebp+824],esi
 mov ecx,[ebp+928]
 mov edx,[ebp+936]
 xor edi,edi
 mov [ebp+840],edx
 mov [ebp+856],ecx
 mov ebx,[ebp+1012]
 cmp ebx,[ebp+972]
 jz rlnvawnull
rlnvawloop: push esi
 push ebx
 call hdigval
; rem add esp,[ebp+940]
 mov [ebp+edi*1+840],eax
 add edi,[ebp+908]
 add esi,[ebp+968]
 cmp esi,[ebp+964]
 js rlnvawloop
rlnvawnull: mov edi,[ebp+972]
 mov ebx,[ebp+1016]
rlnearly: mov esi,[ebp+972]
 add esi,edi
 add esi,[ebp+1008]
 cmp edi,[ebp+856]
 jns rlnrloop
 push esi
 push ebx
 call hdigval
; rem add esp,[ebp+940]
 cmp eax,[ebp+792]
 jnz rlnposone
 mov edx,[ebp+968]
 mov [ebp+824],edx
rlnposone: mov edx,[ebp+840]
 add edx,[ebp+968]
 cmp eax,edx
 js rlnrloop
 add edi,[ebp+968]
 xor edx,edx
 jz rlnearly
rlnrloop: mov esi,[ebp+972]
 add esi,edi
 add esi,[ebp+1008]
 cmp edi,[ebp+856]
 jns rlnrdone
 push esi
 push ebx
 call hdigval
; rem add esp,[ebp+940]
 mov edx,[ebp+840]
 add edx,[ebp+968]
 cmp eax,edx
 jns rlnrdone
 mov ecx,eax
 mov eax,[ebp+904]
 push edx
 push eax
 call nampy
; rem add esp,[ebp+940]
 add ecx,eax
 mov [ebp+904],ecx
 add edi,[ebp+968]
 xor edx,edx
 jz rlnrloop
rlnrdone: xor edi,edi
 mov esi,[ebp+904]
 xor edx,edx
 cmp edx,[ebp+824]
 jz rlnpostwo
 sub edi,esi
 mov [ebp+904],edi
rlnpostwo: mov edx,[ebp+904]
; mov [ebp+976],edx
 mov [ebp+1012],edx
 mov esi,[ebp+1004]
 mov [ebp+1016],esi
 add esp,[ebp+808]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 ret
; bottom of rlnvalue
; chnvalue(*chwv,subv,inchn,*bwv)
; 1020 *bwv    1016 inchn    1012 subv    1008 *chvw
; 1004 retad    1000 ebpsav    996 edisav    992 esisa
; 988 ebxsav    984 edxsav    980 ecxsav    976 eaxsav
; 960 3    964 2    968 1    972 0
; 944 7    948 6    952 5    956 4
; 928 11    932 10    936 9    940 8
; 912 15    916 14    920 13    924 12
; 896 19    900 fixesp    904 17    908 16
; 880        884 22    888 21    892 20
; 864 27    868 26    872 25    876 24
; 848 31    852 30    856 29    860 28
; 832 35    836 34    840 33    844 32
; 816 39    820        824 37    828 36
; 800        804 42    808 41    812 40
; 784 47    788 46    792 45    796 44
; 768 51    772 50    776 49    780 48
; 752 55    756 54    760 53    764 52
; 736 59    740 58    744 57    748 56
; 720        724 62    728 61    732
; 704 67 C    708 66 B    712 65 A    716
; 688 71 G    692 70 F    696 69 E    700 68 D
; 672 75    676 74    680 73    684
; 656 79    660 78    664 77    668 76
; 640 83    644 82    648 81    652 80
; 624 87    628 86    632 85    636 poschn
; 608 91    612 90 Z    616 89 Y    620
; 592 base-1    596 width    600    604
; 576 94 c    580 98 b    584 97 a    588
; 560 103 g    564 102 f    568 101 e    572 100 d
; 464 - 559 96 character buffer
chnvalue: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,2128
 mov ecx,esi
 mov edx,esi
 sub ecx,2000
 sub edx,2127
 xor edi,edi
 mov eax,ecx
 add eax,eax
 add eax,eax
chnvalpu: push edi
 add edi,edx
 sub ecx,edx
 jnz chnvalpu
 mov [ebp+900],eax
 xor esi,esi
 mov ebx,[ebp+1020]
 cmp ebx,[ebp+972]
 jz wnullbwv
 sub ebx,2048
chnlbwv: xor edx,edx
 mov edi,esi
 mov dl,[ebx+esi*1+2048]
 mov ecx,[ebp+972]
 cmp edx,[ebp+780]
 js keepchnl
 mov ecx,[ebp+780]
 cmp edx,[ebp+712]
 js keepchnl
 mov ecx,[ebp+752]
 cmp edx,[ebp+584]
 js keepchnl
 mov ecx,[ebp+624]
keepchnl: sub edx,ecx
 mov [ebp+edi*4+592],edx
 add esi,[ebp+968]
 cmp esi,[ebp+964]
 js chnlbwv
 xor ecx,ecx
 jz chnwgot
wnullbwv: mov ecx,[ebp+912]
 mov edx,[ebp+940]
 mov [ebp+592],ecx
 mov [ebp+596],edx
 xor ecx,ecx
 jz chnwgot
chnwcrash: jmp chnvpop
chnwgot: mov ecx,[ebp+592]
 mov edx,[ebp+596]
 cmp ecx,[ebp+968]
 js chnwcrash
 cmp edx,[ebp+968]
 js chnwcrash
 cmp ecx,[ebp+844]
 jns chnwcrash
 cmp edx,[ebp+832]
 jns chnwcrash
 mov edi,[ebp+1016]
 mov esi,[ebp+972]
 sub esi,[ebp+968]
 mov edx,esi
 sub edx,edi
 cmp edi,[ebp+972]
 js chnawkneg
 mov edx,edi
chnawkneg: mov [ebp+636],edx
 mov edi,[ebp+596]
chnwdecloop: sub edi,[ebp+968]
 cmp edi,[ebp+972]
 js chnwdecbot
chnwdecvvop: mov edx,[ebp+592]
 add edx,[ebp+968]
 mov esi,[ebp+636]
 push edx
 push esi
 call smposdiv
; rem add esp,[ebp+940]
 mov [ebp+636],eax
 push eax
 push edx
 call nampy
; rem add esp,[ebp+940]
 sub esi,eax
 cmp esi,[ebp+972]
 jns chnremok
 add esi,edx
chnremok: mov eax,[ebp+592]
 sub eax,esi
 mov ecx,[ebp+1016]
 cmp ecx,[ebp+972]
 js chnbwkneg
 mov eax,esi
chnbwkneg: add eax,[ebp+780]
 cmp eax,[ebp+740]
 js chndhexw
 add eax,[ebp+944]
chndhexw: mov [ebp+edi*1+464],al
 xor edx,edx
 jz chnwdecloop
; jmp chnwdecloop
chnwdecbot: mov edx,[ebp+804]
 xor esi,esi
 mov ecx,[ebp+636]
chnforward: mov edi,esi
 add edi,[ebp+1008]
 sub edi,[ebp+968]
 add edi,[ebp+1012]
 sub edi,512
 cmp ecx,[ebp+972]
 jnz skipchnzw
 mov dl,[ebp+esi*1+464]
skipchnzw: mov [edi+512],dl
 add esi,[ebp+968]
 cmp esi,[ebp+596]
 js chnforward
chnvpop: mov esi,[ebp+900]
 mov eax,[ebp+976]
 mov edx,[ebp+1004]
 mov [ebp+1020],edx
 mov [ebp+1016],eax
 add esp,esi
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 pop eax
 ret
; bottom of chnvalue
; int getretad()
getretad: push ebp
 mov ebp,esp
 sub ebp,300
 mov eax,[ebp+304]
 pop ebp
 ret
; int getreala(int ofthis)
; 364 ofthis  360 retad  356 ebpsave  352 esisave
getreala: push ebp
 push esi
 mov ebp,esp
 sub ebp,352
 xor eax,eax
 lea esi,[eax+getonea]
 call getretad
getonea: sub eax,esi
 add eax,[ebp+364]
 mov esi,[ebp+360]
 mov [ebp+364],esi
 mov [ebp+360],eax
 pop esi
 pop ebp
 pop eax
 ret
; bottom of getreala
; sf3base=(((secpar1 - 1) >> 1) * 3) + 512
; int threenib(lnes* flopray, int secpar1)
; 1000 ebp   1004 oldretad  1008 *flopray   1012 secpar1
; 984 edx    988 ebx        992 esi         996 edi
; 968 1      972 0          976 eax         980 ecx
; 952 5      956 4          960 3           964 2
; 936 9      940 8          944 7           948 6
; 920 13     924 12         928 11          932
; 904 17     908 16         912 15          916 sf3suu
; 888 21     892 20         896 19          900 .sft
; 872 25     876 24         880 23          884 .sf3s
; 856 29     860 28         864 27          868 sf3nib
; 840 33     844 32         848 31          852 sf3base
; 824 37     828 36         832 35          836 sf3ctr
; 808 41     812 40         816 39          820 sf3odd
; 792 45     796 44         800 43          804 sf3res
; 776 49     780 48         784 47          788 secpar0
; 760 53     764 52         768 51          772 espaddend
threenib: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 add edi,1054
 mov edx,edi
 sub edx,1053
 xor ebx,ebx
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
threenibpu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz threenibpu
 mov [ebp+772],eax
 mov ecx,[ebp+1012]
 sub ecx,[ebp+968]
 mov [ebp+788],ecx
 mov esi,ecx
 and ecx,[ebp+968]
 mov eax,ecx
 add ecx,ecx
 add ecx,eax
 mov [ebp+820],ecx
 shr esi,1
 mov eax,[ebp+960]
 push eax
 push esi
 call nampy
 sub edi,542
 add edi,eax
 mov [ebp+852],edi
 xor ecx,ecx
 mov [ebp+804],ecx
 mov [ebp+836],ecx
 push ecx
 call getreala
 mov [ebp+916],eax
thniblop: mov ebx,[ebp+916]
 mov esi,[ebp+836]
 add esi,[ebp+820]
 mov edx,[ebp+1008]
 sub edx,8192
 lea ecx,[edx+fdimg2880]
 xor edx,edx
 mov dl,[ebx+esi*1+sectnucode]
 add ecx,[ebp+852]
; mov ecx,[ebp+852]
; add ecx,[ebp+1008]
 push ecx
 push edx
 call nibget12
 mov edx,[ebp+804]
 add edx,edx
 add edx,edx
 add edx,edx
 add edx,edx
 add edx,eax
 mov [ebp+804],edx
 mov esi,[ebp+836]
 add esi,[ebp+968]
 mov [ebp+836],esi
 cmp esi,[ebp+960]
 js thniblop
 mov ebx,[ebp+1004]
 mov [ebp+1012],ebx
 mov esi,[ebp+804]
 mov [ebp+1008],esi
 add esp,[ebp+772]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of threenib
; void nibwrt3(lnes *wra3, int secwh1, int secvl)
; 1004 retad  1008 *wra3  1012 secwh1  1016 secvl
;  988 ebx    992 esi     996 edi      1000 ebp
; 972 0       976 eax     980 ecx      984 edx
; 956 4       960 3       964 2        968 1
; 940 8       944 7       948 6        952 cstaddrcs
; 924 12      928 11      932 10       936 seghalf
; 908 16      912 15      916 14       920 sfgsuu
; 892 20      896 19      900 18       904 sfgbase
; 876 24      880 23      884 22       888 sfgctr
; 860 28      864 27      868 26       872 sfgodd
; 844 32      848 31      852 30       856 secsr
; 828 36      832 35      836 34       840 secwh0
; 812 40      816 39      820 38       824 espaddend
nibwrt3: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1041
 mov edx,edi
 sub edx,1040
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
nibwrpu3: push ebx
 add ebx,edx
 sub ecx,edx
 jnz nibwrpu3
 mov [ebp+824],eax
 xor ecx,ecx
 push ecx
 call getreala
 mov [ebp+952],eax
 mov edx,[ebp+1012]
 sub edx,[ebp+968]
 mov [ebp+840],edx
 mov esi,[ebp+840]
 shr esi,1
 mov [ebp+936],esi
 mov ecx,[ebp+1016]
 mov [ebp+856],ecx
 mov edx,[ebp+936]
 mov eax,[ebp+960]
 push edx
 push eax
 call nampy
 sub edi,529
 add edi,eax
 mov [ebp+904],edi
 mov ecx,[ebp+840]
 and ecx,[ebp+968]
 mov eax,[ebp+960]
 push ecx
 push eax
 call nampy
 mov [ebp+872],eax
 mov ecx,[ebp+964]
 mov [ebp+888],ecx
nibwrlo3: mov esi,[ebp+972]
 mov edx,[ebp+888]
 cmp edx,esi
 js nibwrlo5
 mov ebx,[ebp+952]
 mov esi,[ebp+872]
 add esi,[ebp+888]
 xor eax,eax
 mov al,[ebx+esi*1+sectnucode]
 mov ebx,[ebp+1008]
 sub ebx,8192
 lea edi,[ebx+fdimg2880]
 add edi,[ebp+904]
 mov edx,[ebp+856]
 push edx
 push eax
 push edi
 call nibput12
 mov ecx,[ebp+956]
 shr edx,cl
 mov [ebp+856],edx
 mov esi,[ebp+888]
 sub esi,[ebp+968]
 mov [ebp+888],esi
 xor edx,edx
 jz nibwrlo3
nibwrlo5: mov esi,[ebp+1004]
 mov edi,[ebp+972]
 mov [ebp+1012],edi
 mov [ebp+1016],esi
 add esp,[ebp+824]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 ret
; bottom of nibwrt3
; void readsect(lnes* rgptr)
; initialize fp05 to 0 at open and initialize sfgcur to first sector.
; 1000 ebp   1004 retad   1008 *rgptr
;  984 edx    988 ebx      992 esi    996 edi
;  968 1      972 0        976 eax    980 ecx
;  952 5      956 4        960 3      964 2
;  936 9      940 8        944 7      948 6
;  920 13     924 12       928 11     932 10
;  904 17     908 16       912 15     916 14
;  888 21     892 20       896 19     900 espaddend
;  872 25     876 24       880 23     884 sfgnum
;  856 29     860 28       864 27     868 sfgcur002
;  840 33     844 32       848 31     852 sfgnuy
;  824 37     828 36       832 35     836 sfgbase
;  808 41     812 40       816 39     820
;  792 45     796 44       800 43     804
;  776 49     780 48       784 47     788
;  760 53     764 52       768 51     772 50
;  744 57     748 56       752 55     756 54
;  728 61     732 60       736 59     740
;  712 65     716 64       720 63     724
readsect: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1066
 mov edx,esi
 sub edx,1065
 mov ecx,esi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
 xor ebx,ebx
readsectpu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz readsectpu
 mov [ebp+900],eax
 mov ebx,[ebp+1008]
 mov ecx,ebx
 sub ebx,8192
 mov eax,[ebx+sfgcur]
; rem mov [ebx+sfgshow02],eax
 push eax
 push ecx
 call threenib
; rem mov [ebx+sfgshow02],eax
 mov [ebp+884],eax
; 884 sfgnum insert repair excessive value
 xor edx,edx
 add edx,4080
 cmp eax,edx
 jns tutank009
 cmp eax,[ebp+968]
 js tutank009
; ---------------- 20 bytes inserted here
 mov edx,[ebp+972]
 cmp edx,[ebx+fp05]
 jnz skirstnum
tutank009: mov eax,[ebx+sfgcur]
 mov [ebp+884],eax
skirstnum: mov edi,[ebp+884]
 mov esi,edi
 add edi,[ebp+968]
 mov [ebp+868],edi
 add esi,[ebp+844]
 mov [ebp+852],esi
; ----------------
 mov edx,[ebp+852]
 sub edx,[ebp+968]
 mov eax,[ebx+hiskwid]
 push eax
 push edx
 call nampy
 mov [ebp+836],eax
 lea esi,[ebx+fdimg2880]
 add esi,[ebp+836]
 lea edi,[ebx+hiskrba]
 mov ecx,[ebx+hiskwid]
 sub esi,2000
 sub edi,2000
 xor edx,edx
 mov eax,[ebp+968]
rsectloop: mov dl,[esi+2000]
 mov [edi+2000],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz rsectloop
 mov ecx,[ebx+hiskwid]
 add [ebx+fp05],ecx
 mov esi,[ebx+sfgcur]
 mov edi,[ebp+868]
 mov [ebx+sfgprv],esi
 mov [ebx+sfgcur],edi
 mov edi,[ebp+976]
 mov esi,[ebp+1004]
 mov [ebp+1008],esi
 mov [ebp+1004],edi
 add esp,[ebp+900]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 ret
; bottom of readsect
; void riedline(struct lnes *rl)
; 1004 retad    1008 *rl
; 992 esi    996 edi    1000 ebpsave
; 980 ecx    984 edx    988 ebx
; 968        972        976 eax
; 956 ctra06    960 ctrd04    964
; 944 rund    948 bund    952 ctrzz
; 932 cst32    936 cst126    940
; 920 cst0    924 cst1    928 cst204
; 908 cst08    912 cst1a    916 cst13
; 896 cst04    900        904 cst0a
; 884        888        892
; 872    876        880 cpa80w
riedline: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 xor ecx,ecx
 add ecx,2026
 sub ecx,2000
riedrlpu: push edi
 add ecx,1000
 sub ecx,1001
 jnz riedrlpu
 xor esi,esi
 add esi,1000
 mov ecx,esi
 sub ecx,999
 mov [ebp+924],ecx
 mov ecx,esi
 sub ecx,996
 mov [ebp+896],ecx
 mov ecx,esi
 sub ecx,990
 mov [ebp+904],ecx
 mov ecx,esi
 sub ecx,992
 mov [ebp+908],ecx
 mov ecx,esi
 sub ecx,974
 mov [ebp+912],ecx
 mov ecx,esi
 sub ecx,987
 mov [ebp+916],ecx
 mov ecx,esi
 sub ecx,796
 mov [ebp+928],ecx
 mov ecx,esi
 sub ecx,968
 mov [ebp+932],ecx
 mov ecx,esi
 sub ecx,874
 mov [ebp+936],ecx
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov ecx,[ebx+a80w]
 mov [ebp+880],ecx
 xor esi,esi
 mov [ebp+960],esi
 mov [ebp+956],esi
 mov [ebp+952],esi
reedloop01: mov edx,[ebp+956]
 cmp edx,[ebp+880]
 js chkrep
 xor esi,esi
 jz afterloop01
chkrep: xor esi,esi
 cmp esi,[ebx+rep0]
 jnz crepeat
 mov esi,[ebp+1008]
 push esi
 call riadone
; rem add esp,[ebp+896]
crepeat: mov ecx,[ebx+one2]
 mov [ebp+948],ecx
 xor esi,esi
 mov [ebx+rep0],esi
 jz cmpxc
afterloop01: xor esi,esi
 jz afterloop02
reedloop02: xor esi,esi
 jz reedloop01
cmpxc: mov ecx,[ebp+948]
 mov [ebp+944],ecx
 cmp ecx,[ebp+928]
 jz cmpxa1
 cmp ecx,[ebp+932]
 jns yreedu
 mov edx,[ebp+932]
 mov [ebp+944],edx
 cmp ecx,[ebp+916]
 jz cmpxd1
 cmp ecx,[ebp+920]
 jz cmpxd1
 cmp ecx,[ebp+904]
 jz cmpxa1
 cmp ecx,[ebp+912]
 jz cmpxa1
 mov esi,[ebp+956]
 mov edx,[ebp+944]
 mov [ebx+esi*1+evrd],dl
 add esi,[ebp+924]
 mov [ebp+956],esi
xreedj1: xor esi,esi
 jz reedloop02
afterloop02: xor esi,esi
 jz afterloop03
cmpxa1: xor esi,esi
 jz cmpxa2
cmpxd1: xor esi,esi
 jz cmpxd2
yreedu: mov edx,[ebp+944]
 mov esi,[ebp+956]
 mov [ebx+esi*1+evrd],dl
 add esi,[ebp+924]
 mov [ebp+956],esi
 xor esi,esi
 jz xreedj1
cmpxd2: xor esi,esi
 jz afterlined
cmpxa2: xor esi,esi
 jz afterlinea
afterloop03: xor esi,esi
 jz afterloop04
reedloop04: xor esi,esi
 jz xreedj1
afterlined: xor esi,esi
 jz afterlinea
aftquit01: xor esi,esi
 jz blanright1
afterlinea: mov edx,[ebp+948]
 cmp edx,[ebp+904]
 jz aftquit01
 cmp edx,[ebp+912]
 jz aftquit01
 cmp edx,[ebp+928]
 jz aftquit01
 xor esi,esi
 jz dseek
afterminea: xor esi,esi
 jz afterlinea
afterloop04: xor esi,esi
 jz afterloop05
reedloop05: xor esi,esi
 jz reedloop04
aftquit02: xor esi,esi
 jz aftquit01
blanright1: xor esi,esi
 jz blanright2
dseek: mov edx,[ebp+948]
 cmp edx,[ebp+916]
 jz dloopp
 cmp edx,[ebp+920]
 jz dloopp
 mov ecx,[ebp+896]
 mov [ebx+rep0],ecx
 xor esi,esi
 jz aftquit02
dloopp: xor esi,esi
 cmp esi,[ebx+eofi]
 jz dloop
aftquit03: xor esi,esi
 jz aftquit02
afterloop05: xor esi,esi
 jz afterloop06
reedloop06: xor esi,esi
 jz reedloop05
blanright2: xor esi,esi
 jz blanright3
aftermineb: xor esi,esi
 jz afterminea
dloop: mov edx,[ebp+1008]
 push edx
 call riadone
; rem add esp,[ebp+896]
 mov edx,[ebx+one2]
 mov [ebp+948],edx
xtafterlinea: mov edx,[ebp+960]
 add edx,[ebp+924]
 mov [ebp+960],edx
 cmp edx,[ebp+896]
 js atafterlinea
 mov edx,[ebp+948]
 cmp edx,[ebp+920]
 jz reefixdz
 cmp edx,[ebp+916]
 jz reefixdz
 xor esi,esi
 jz atafterlinea
reefixdz: xor esi,esi
 jz aftquit03
afterloop06: xor esi,esi
 jz afterloop07
reedloop07: xor esi,esi
 jz reedloop06
blanright3: xor esi,esi
 jz blanright4
atafterlinea: xor esi,esi
 jz aftermineb
blanright4: mov edx,[ebp+956]
 mov [ebp+952],edx
blanlop: mov ecx,[ebp+956]
 cmp ecx,[ebp+880]
 jns rpopline
 mov edi,[ebp+956]
 mov edx,[ebp+932]
 mov [ebx+edi*1+evrd],dl
 add edi,[ebp+924]
 mov [ebp+956],edi
 xor esi,esi
 jz blanlop
aftquit05: xor esi,esi
 jz reefixdz
afterloop07: xor esi,esi
 jz afterloop08
reedloop08: xor esi,esi
 jz reedloop07
ttafterlinea: xor esi,esi
 jz atafterlinea
rpopline: mov edx,[ebx+rep0]
 mov [ebp+944],edx
 xor esi,esi
 jz reedret
afterloop08: xor esi,esi
 cmp esi,[ebx+eofi]
 jz alproca
aftquit06: xor esi,esi
 jz aftquit05
alproca: xor esi,esi
 jz alprocb
alprocb: mov edx,[ebp+1008]
 push edx
 call riadone
; rem add esp,[ebp+896]
 mov edx,[ebx+one2]
 mov [ebp+948],edx
 xor esi,esi
 cmp esi,[ebx+eofi]
 jz rtafterlinea
 xor edx,edx
 add edx,1008
 sub edx,1000
 mov [ebp+952],edx
rtafterlinea: xor esi,esi
 jz ttafterlinea
reedret: xor edx,edx
 mov ecx,[ebp+1004]
 mov eax,[ebp+976]
 mov [ebp+1008],ecx
 mov [ebp+1004],eax
 add edx,2104
 sub edx,2000
 add esp,edx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 ret
; end of riadline
; void riadone.triadone(struct lnes *ro)
; 1000 ebpsave    1004 retad    1008 *ro
; 988 ebx    992 esi    996 edi
; 976 eax    980 ecx    984 edx
; 964 cst20    968    972
; 952 rdhd    956 cst1    960 cst0
; 940 rdha    944 rdhb    948 diskreclen
; 928 honeb    932 cst32    936 cst16
; 916 cphiskwid    920 han20    924 riskrba
; 904 rjunk    908    912
; 892        896    900
riadone: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edx,edx
 xor ecx,ecx
 add ecx,3000
 sub ecx,2979
riadabpu: push edx
 add ecx,1000
 sub ecx,1001
 jnz riadabpu
 xor esi,esi
 add esi,1000
 mov ecx,esi
 sub ecx,999
 mov [ebp+956],ecx
 mov ecx,esi
 sub ecx,968
 mov [ebp+932],ecx
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov edi,[ebx+hiskwid]
 mov [ebp+916],edi
 mov ecx,esi
 sub ecx,984
 mov [ebp+936],ecx
 mov ecx,esi
 sub ecx,980
 mov [ebp+964],ecx
 mov ecx,[ebp+956]
 mov [ebp+940],ecx
 mov [ebp+944],ecx
roteof2: mov edi,[ebx+fp04]
 cmp edi,[ebx+fl06]
 js rnoteof
 mov ecx,[ebp+956]
 mov [ebx+eofi],ecx
 mov ecx,[ebp+932]
 mov [ebp+928],ecx
 xor esi,esi
 jz yrnoteol
yreof: mov edi,[ebp+956]
 mov [ebx+eofi],edi
yrnoteof: mov esi,[ebx+pose]
 xor edx,edx
 mov dl,[ebx+esi*1+hiskrba]
 mov [ebp+928],edx
 mov esi,[ebp+956]
 add [ebx+pose],esi
yrnoteol: mov edi,[ebp+928]
 mov [ebx+one2],edi
 xor esi,esi
 jz bbrlnc
breof: xor esi,esi
 jz yreof
brnoteof: xor esi,esi
 jz yrnoteof
rnoteof: mov edi,[ebp+916]
 mov [ebp+948],edi
 mov ecx,[ebx+fl06]
 sub ecx,[ebx+fp04]
 mov [ebp+952],ecx
 cmp ecx,[ebx+hiskwid]
 jg bigleftnoteof
 mov edi,[ebp+952]
 mov [ebp+948],edi
bigleftnoteof: mov ecx,[ebx+pose]
 cmp ecx,[ebx+hiskwid]
 js xlowbnc
 mov edi,[ebp+960]
 mov [ebx+pose],edi
 xor esi,esi
 jz noteof2
bbrlnc: xor esi,esi
 jz ylowbrlnc
crnoteof: xor esi,esi
 jz brnoteof
creof: xor esi,esi
 jz breof
xlowbnc: xor esi,esi
 jz xbnc
ylowbrlnc: xor esi,esi
 jz ylastbrlnc
noteof2: mov ecx,[ebp+948]
 mov [ebp+940],ecx
 lea edi,[ebx+hiskrba]
 mov [ebp+924],edi
 mov ecx,[ebx+edhanb]
 mov [ebp+920],ecx
 lea esi,[ebp+904]
 xor eax,eax
 jz prepread149
upcrnoteof: xor esi,esi
 jz crnoteof
upcreof: xor esi,esi
 jz creof
ylastbrlnc: xor edx,edx
 jz ybrlnc
prepread149: mov edx,[ebp+956]
 add edx,edx
 cmp edx,[ebx+nzfileg]
 jnz prepread150
; line 2259
 mov eax,[ebp+1008]
 push eax
 call readsect
 xor edi,edi
 jz xbnc
prepread150: mov edx,[ebp+940]
 xor esi,esi
 add esi,503
 sub esi,500
; 03_read rhandle *rbuff width unused
 push eax
 push edx
 push edi
 push ecx
 push esi
 call twioswitch
;                 0003_read_esi   rhand_ecx   *buff_edi   width_edx
; xor esi,esi
; add esi,520
; rem rem sub esi,500
; sub esi,520
; add esp,esi
xbnc: mov edi,[ebx+fp04]
 add edi,[ebp+956]
 mov [ebx+fp04],edi
ylnc: mov ecx,[ebx+fp04]
 cmp ecx,[ebx+fl06]
 js upcrnoteof
yxrlnc: xor esi,esi
 jz upcreof
ybrlnc: xor edx,edx
 mov eax,[ebp+976]
 mov ecx,[ebp+1004]
 mov [ebp+1008],ecx
 mov [ebp+1004],eax
 add edx,3084
 sub edx,3000
 add esp,edx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 ret
; end of riadone 2607
; void writeonefd(lnes* wwed, int wrfdv,int whan3w)
; 1016 whan3w
; 1000 ebp  1004 oldretad  1008 *wwed  1012 wrfdv
; 984 edx   988 ebx        992 esi     996 edi
; 968 1     972 0          976 eax     980 ecx
; 952 5     956 4          960 3       964 2
; 936 9     940 8          944 7       948 6
; 920 13    924 12         928 11      932 wofdcheck
; 904 17    908 16         912 15      916 wofdbase
; 888 21    892 20         896 19      900 wofdnuy
; 872 25    876 24         880 23      884 wofdsec
; 856 29    860 28         864 27      868 espaddend
; 840 33    844 32         848 31      852
; ----------------------------------------
; 824       828 36         832 35      836 codeaddr
; 808 41    812 40         816 39      820 wrjunk
writeonefd: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1042
 mov edx,edi
 sub edx,1041
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
writeopuefd: push ebx
 add ebx,edx
 sub ecx,edx
 jnz writeopuefd
 mov [ebp+868],eax
; -----------------
 mov ebx,[ebp+1008]
 mov esi,ebx
 sub ebx,8192
 xor eax,eax
 push eax
 call getreala
 mov [ebp+836],eax
 mov ecx,[ebx+wegmode]
 cmp ecx,[ebp+944]
 jz fixhisklid
 jmp realwrone
fixhisklid: mov ecx,[ebx+hiskwid]
 mov edx,[ebx+posw]
 cmp edx,ecx
 jns wopudwd
 jmp wopuewd
wopudwd: mov edx,[ebx+wegcur]
 mov eax,[ebx+weginc]
 add edx,eax
 mov [ebx+wegcur],edx
 mov [ebp+884],edx
 cmp eax,[ebp+972]
 jnz wopuewa
 xor ecx,ecx
 add ecx,4095
 mov [ebp+884],ecx
wopuewa: mov eax,[ebx+wegcur]
 push eax
 push esi
 call threenib
 mov [ebp+932],eax
 mov ecx,[ebp+972]
 cmp ecx,[ebp+932]
 jz wopuewb
 mov edx,[ebp+968]
 mov [ebx+wegerr],edx
wopuewb: mov eax,[ebp+884]
 mov ecx,[ebx+wegcur]
 push eax
 push ecx
 push esi
 call nibwrt3
 mov edx,[ebp+968]
 mov [ebx+weginc],edx
 mov ecx,[ebp+972]
 mov [ebx+posw],ecx
wopuewd: mov edx,[ebx+wegcur]
 cmp edx,[ebp+964]
 js wopuewe
 cmp edx,2849
 jns wopuewe
 add edx,[ebp+844]
 mov [ebp+900],edx
 mov eax,[ebx+hiskwid]
 sub edx,[ebp+968]
 push eax
 push edx
 call nampy
 mov [ebp+916],eax
 xor edx,edx
 mov dl,[ebp+1012]
 mov edi,[ebp+916]
 add edi,[ebx+posw]
 mov [ebx+edi*1+fdimg2880],dl
wopuewe: mov ecx,[ebp+968]
 add [ebx+posw],ecx
 add [ebx+wp04],ecx
 mov ecx,[ebx+wegcur]
 cmp ecx,[ebp+964]
 js wopuewf
 cmp ecx,2849
 js wopuewh
wopuewf: mov edx,[ebp+968]
 mov [ebx+wegerr],edx
; ------------------------
 xor eax,eax
 jz wopuewh
realwrone: mov eax,[ebp+972]
; lea ecx,[ebp+820]
 mov edx,[ebp+968]
 lea esi,[ebp+1012]
 mov edi,[ebp+1016]
 mov ecx,[ebp+956]
 push eax
 push edx
 push esi
 push edi
 push ecx
 call twioswitch
 add esp,[ebp+972]
; push eax
; push ecx
; push edx
; push esi
; push edi
; mov esi,[ebp+836]
; lea eax,[esi+wopuewh]
; mov edi,esi
; add edi,[esi+ramsize18]
; mov ecx,[edi+wiowrt04]
; push eax
; push ecx
; ret
wopuewh: add esp,[ebp+868]
 mov esi,[ebp+976]
 mov edi,[ebp+1004]
 mov [ebp+1012],esi
 mov [ebp+1016],edi
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
; ------
 ret
; bottom of writeonefd
; int nftopperlm(char* whlc, int sublc0)
; 1000 ebp   1004 retad   1008 *whlc   1012 sublc0
;  984 edx    988 ebx      992 esi      996 edi
;  968 1      972 0        976 eax      980 ecx
;  952 5      956 4        960 3        964 2
;  936 9      940 8        944 7        948 6
;  920 13     924 12       928 11       932
;  904 17     908 16       912 15       916
;  888 21     892 20       896 19       900
;  872 25     876 24       880 23       884
;  856 29     860 28       864 27       868
;  840 33     844 32       848 31       852
;  824 37     828 36       832 35       836
;  808 41     812 40       816 39       820 espaddend
;  792 45     796 44       800 43       804
;  776 49 1   780 48 0     784 47       788
;  760 53 5   764 52 4     768 51 3     772 50 2
;  744 57 9   748 56 8     752 55 7     756 54 6
;  728 61     732 60       736 59       740
;  712 65 A   716 64       720 63       724
;  696 69 E   700 68 D     704 67 C     708 66 B
;  680 73 I   684 72 H     688 71 G     692 70 F
;  664 77 M   668 76 L     672 75 K     676 74 J
;  648 81 Q   652 80 P     656 79 O     660 78 N
;  632 85 U   636 84 T     640 83 S     644 82 R
;  616 89 Y   620 88 X     624 87 W     628 86 V
;  600 93     604 92       608 91       612 90 Z
;  584 97 a   588 96       592 95       596
;  568 101 e  572 100 d    576 99 c     580 98 b
;  552 105 i  556 104 h    560 103 g    564 102 f
;  536 109 m  540 108 l    544 107 k    548 106 j
;  520 113 q  524 112 p    528 111 0    532 110 n
;  504 117 u  508 116 t    512 115 s    516 114 r
;  488 121 y  492 120 x    496 119 w    500 118 v
;  472 125    476 124      480 123      484 122 z
;  456 129    460 128      464 127      468
nftopperlm: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 add edi,1130
 mov edx,edi
 sub edx,1129
 xor ebx,ebx
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
nftopperlu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz nftopperlu
 mov [ebp+820],eax
 xor edx,edx
 mov esi,[ebp+1008]
 add esi,[ebp+1012]
 mov ecx,ebp
 add ecx,1004
 sub esi,ecx
 mov dl,[ebp+esi*1+1004]
 mov edi,edx
 cmp edi,[ebp+584]
 js nftopkeepa
 cmp edi,[ebp+480]
 jns nftopkeepa
 sub edx,[ebp+844]
nftopkeepa: mov ebx,[ebp+1004]
 mov [ebp+1008],edx
 mov [ebp+1012],ebx
 add esp,[ebp+820]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of nftopperlm
; int rtoplen(char* rwlfrom, int rwlsub0)
; 1000 ebp  1004 retad  1008 *rwlfrom  1012 rwlsub0
;  984 edx    988 ebx      992 esi      996 edi
;  968 1      972 0        976 eax      980 ecx
;  952 5      956 4        960 3        964 2
;  936 9      940 8        944 7        948 6
;  920 13     924 12       928 11       932
;  904 17     908 16       912 15       916
;  888 21     892 20       896 19       900
;  872 25     876 24       880 23       884
;  856 29     860 28       864 27       868 itlennft
;  840 33     844 32       848 31       852 itlennfa
;  824 37     828 36       832 35       836 itlfnnfctr
;  808 41     812 40       816 39       820 espaddend
;  792 45     796 44       800 43       804
;  776 49 1   780 48 0     784 47       788 46 .
;  760 53 5   764 52 4     768 51 3     772 50 2
;  744 57 9   748 56 8     752 55 7     756 54 6
;  728 61     732 60       736 59       740
;  712 65 A   716 64       720 63       724
;  696 69 E   700 68 D     704 67 C     708 66 B
;  680 73 I   684 72 H     688 71 G     692 70 F
;  664 77 M   668 76 L     672 75 K     676 74 J
;  648 81 Q   652 80 P     656 79 O     660 78 N
;  632 85 U   636 84 T     640 83 S     644 82 R
;  616 89 Y   620 88 X     624 87 W     628 86 V
;  600 93     604 92       608 91       612 90 Z
;  584 97 a   588 96       592 95       596
;  568 101 e  572 100 d    576 99 c     580 98 b
;  552 105 i  556 104 h    560 103 g    564 102 f
;  536 109 m  540 108 l    544 107 k    548 106 j
;  520 113 q  524 112 p    528 111 0    532 110 n
;  504 117 u  508 116 t    512 115 s    516 114 r
;  488 121 y  492 120 x    496 119 w    500 118 v
;  472 125    476 124      480 123      484 122 z
;  456 129    460 128      464 127      468
rtoplen: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 add edi,1130
 mov edx,edi
 sub edx,1129
 xor ebx,ebx
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
rtoplepu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz rtoplepu
 mov [ebp+820],eax
 mov ebx,[ebp+968]
 mov ecx,[ebp+972]
 mov [ebp+836],ecx
 mov [ebp+852],ebx
rtoploop: mov edi,[ebp+852]
 mov ecx,[ebp+968]
 cmp edi,ecx
 jz rtopvoop
 jmp rtopbott
rtopvoop: mov esi,[ebp+1012]
 add esi,[ebp+836]
 mov edx,[ebp+1008]
 push esi
 push edx
 call nftopperlm
 mov [ebp+868],eax
 mov ecx,[ebp+868]
 cmp ecx,[ebp+460]
 jns rtopgt19
 cmp ecx,[ebp+840]
 jns rtopsk20
rtopgt19: mov edx,[ebp+972]
 mov [ebp+852],edx
rtopsk20: mov ecx,[ebp+868]
 cmp ecx,[ebp+788]
 jz rtopgt23
 cmp ecx,[ebp+784]
 jz rtopgt23
 cmp ecx,[ebp+604]
 jnz rtopsk24
rtopgt23: mov edx,[ebp+972]
 mov [ebp+852],edx
rtopsk24: mov ecx,[ebp+852]
 cmp ecx,[ebp+968]
 jnz rtopbott
 mov edx,[ebp+836]
 add edx,[ebp+968]
 mov [ebp+836],edx
 mov ecx,[ebp+460]
 add ecx,[ebp+464]
 cmp edx,ecx
 jns rtopbott
 jmp rtoploop
rtopbott: mov esi,[ebp+1004]
 mov edx,[ebp+836]
 mov [ebp+1008],edx
 mov [ebp+1012],esi
 add esp,[ebp+820]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of rtoplen
; int nzlfncmp(*lfnp,lfns,*brnp,rfns,rz0)
; rz0 is 0 for extension
; 1012 lfns   1016 *brnp   1020 rfns   1024 rz0
;  996 edi    1000 ebp  1004 oldretad  1008 *lfnp
;  980 ecx     984 edx   988 ebx        992 esi
;  964 2       968 1     972 0          976 eax
;  948 6       952 5     956 4          960 3
;  932 10      936 9     940 8          944 7
;  916 14      920 13    924 12         928 espaddend
;  900 18      904 17    908 16         912 cillcl
;  884 22      888 21    892 20         896 cillcr
;  868 26      872 25    876 24         880 rbllen
;  852 30      856 29    860 28         864 iillen
;  836 34      840 33    844 32         848 rlfncm
;  820 38      824 37    828 36         832
;  804 42      808 41    812 40         816
nzlfncmp: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1043
 mov edx,edi
 sub edx,1042
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
nzlpucmp: push ebx
 add ebx,edx
 sub ecx,edx
 jnz nzlpucmp
 mov [ebp+928],eax
 mov ecx,[ebp+968]
 mov [ebp+848],ecx
 mov edx,[ebp+972]
 mov [ebp+896],edx
 mov ecx,[ebp+1012]
 mov edx,[ebp+1008]
 push ecx
 push edx
 call rtoplen
 mov [ebp+864],eax
 mov ecx,[ebp+1020]
 mov edx,[ebp+1016]
 push ecx
 push edx
 call rtoplen
 mov [ebp+880],eax
 mov ecx,[ebp+1024]
 cmp ecx,[ebp+968]
 jns rzlfncmp
 mov edx,[ebp+960]
 cmp edx,[ebp+880]
 jns rzlfncmp
 mov [ebp+880],edx
rzlfncmp: mov esi,[ebp+940]
 cmp esi,[ebp+880]
 jns relfncmp
 mov [ebp+880],esi
relfncmp: mov edx,[ebp+864]
 cmp edx,[ebp+880]
 jz skfancmp
 mov esi,[ebp+972]
 mov [ebp+848],esi
skfancmp: mov edi,[ebp+864]
 mov esi,[ebp+880]
 mov [ebp+912],edi
 cmp esi,edi
 jns notrblmp
 mov [ebp+912],esi
notrblmp: mov edx,[ebp+912]
 cmp edx,[ebp+968]
 jns trufncmp
 mov ecx,[ebp+972]
 cmp ecx,[ebp+1012]
 jns trufncmp
 mov edx,[ebp+972]
 cmp edx,[ebp+1024]
 jns trufncmp
 mov ecx,[ebp+972]
 mov [ebp+848],ecx
trufncmp: mov edx,[ebp+896]
 cmp edx,[ebp+912]
 jns trufnbot
 mov edi,[ebp+896]
 mov ecx,[ebp+1012]
 add ecx,edi
 mov edx,[ebp+1008]
 push ecx
 push edx
 call nftopperlm
 mov esi,eax
 mov ecx,[ebp+1020]
 add ecx,edi
 mov edx,[ebp+1016]
 push ecx
 push edx
 call nftopperlm
 cmp eax,esi
 jz truskcmp
 mov ecx,[ebp+972]
 mov [ebp+848],ecx
truskcmp: mov edx,[ebp+968]
 add [ebp+896],edx
 xor ecx,ecx
 jz trufncmp
trufnbot: mov ecx,[ebp+968]
 mov [ebp+912],ecx
 mov edi,[ebp+972]
 cmp edi,[ebp+1024]
 jnz sklonemp
; jnz cilzurmp
 cmp edi,[ebp+880]
; jnz cilzurmp
 jnz sklonemp
 cmp edi,[ebp+864]
 jz sklzurmp
 cmp edi,[ebp+1012]
 jz sklzurmp
cilzurmp: mov [ebp+912],edi
sklzurmp: cmp edi,[ebp+912]
 jz sklonemp
 mov ecx,[ebp+968]
 mov [ebp+848],ecx
sklonemp: mov esi,[ebp+1004]
 mov edi,[ebp+848]
 mov [ebp+1024],esi
 mov [ebp+1020],edi
 add esp,[ebp+928]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 pop eax
 pop eax
 ret
; bottom of nzlfncmp
; line 2369
; int zetnextsect(lnes* ens, int sectnumsd, int nzwhere)
; 1004 oldretad  1008 *ens    1012 sectnumsd  1016 nzwhere
; 988 ebx        992 esi      996 edi         1000 ebp
; 972 0          976 eax      980 ecx         984 edx
; 956 4          960 3        964 2           968 1
; 940 8          944 7        948 6           952 5
; 924 12         928 11       932 10          936 9
; 908 16         912 15       916 14          920 zgnsrtm
; 892 20         896 19       900 18          904 zgnsbase
; 876 24         880 23       884 22          888 zgns002sd
; 860 28         864 27       868 26          872 zgnsnuys
; 844 32         848 31       852 30          856 zgnsres
; 828 36         832 35       836 34          840 espaddend
zetnextsect: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1037
 mov edx,edi
 sub edx,1036
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
zetnextsepu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz zetnextsepu
 mov [ebp+840],eax
 mov ecx,[ebp+1012]
 mov [ebp+856],ecx
 mov ebx,[ebp+1008]
 sub ebx,8192
 lea esi,[ebx+fdimg2880]
 mov edx,[ebp+1012]
 mov esi,[ebp+1008]
 push edx
 push esi
 call threenib
 mov [ebp+920],eax
 mov ecx,[ebp+920]
 cmp ecx,[ebp+964]
 js zetnexnortm
 cmp ecx,4080
 jns zetnexnortm
 mov edx,[ebp+920]
 mov [ebp+856],edx
zetnexnortm: mov ecx,[ebp+856]
 add ecx,[ebp+968]
 mov [ebp+888],ecx
 mov edx,[ebp+1012]
 add edx,[ebp+844]
 mov [ebp+872],edx
 mov ecx,[ebp+1016]
 cmp ecx,[ebp+964]
 js zetnexnores
 mov edx,[ebp+856]
 add edx,[ebp+844]
 mov [ebp+872],edx
zetnexnores: mov ecx,[ebp+872]
 sub ecx,[ebp+968]
 mov edx,[ebx+hiskwid]
 push edx
 push ecx
 call nampy
 mov [ebp+904],eax
 mov edx,[ebp+1016]
 cmp edx,[ebp+972]
 jnz zetnexnonze
 mov ecx,[ebp+888]
 mov [ebp+856],ecx
zetnexnonze: mov edx,[ebp+972]
 cmp edx,[ebp+1016]
 jns zetnextiny
 mov ecx,[ebp+904]
 mov [ebp+856],ecx
zetnextiny: mov esi,[ebp+1004]
 mov edi,[ebp+856]
 mov [ebp+1012],edi
 mov [ebp+1016],esi
 add esp,[ebp+840]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 ret
; bottom of zetnextsect
; int zmultpos1(lnes* zmu1,int zmpdiv512,int fszmp)
; 1004 oldretad  1008 *zmu1   1012 zmpdiv512   1016 fszmp
; 988 ebx    992 esi    996 edi    1000 ebp
; 972 0      976 eax    980 ecx    984 edx
; 956 4      960 3      964 2      968 1
; 940 8      944 7      948 6      952 vfszmp
; 924 12     928 11     932 10     936 zmpctr
; 908 16     912 15     916 14     920 zmpres
; 892 20     896 19     900 18     904 espaddend
zmultpos1: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1021
 mov edx,edi
 sub edx,1020
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
zmult1puu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz zmult1puu
 mov [ebp+904],eax
 mov edi,[ebp+972]
 mov [ebp+920],edi
 mov [ebp+936],edi
 mov ecx,[ebp+1016]
 mov [ebp+952],ecx
 cmp edi,[ebp+1012]
 jns zmult1mid
 cmp edi,[ebp+1016]
 jns zmult1mid
zmult1lop: mov edx,[ebp+936]
 cmp edx,[ebp+1012]
 jns zmult1mid
 cmp edx,[ebp+972]
 jnz zmult1sec
 mov esi,[ebp+1008]
 mov ecx,[ebp+952]
 add ecx,[ebp+968]
 push ecx
 push esi
 call threenib
 mov [ebp+952],eax
 xor ecx,ecx
 jz zmult1inc
zmult1sec: mov eax,[ebp+972]
 mov ecx,[ebp+952]
 mov edx,[ebp+1008]
 push eax
 push ecx
 push edx
 call zetnextsect
 mov [ebp+952],eax
zmult1inc: mov edx,[ebp+936]
 add edx,[ebp+968]
 mov [ebp+936],edx
 xor ecx,ecx
 jz zmult1lop
zmult1mid: mov esi,[ebp+972]
 cmp esi,[ebp+1016]
 jnz gnexult1b
 mov edx,[ebp+896]
 add edx,[ebp+1012]
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov ecx,[ebx+hiskwid]
 push edx
 push ecx
 call nampy
 mov [ebp+920],eax
 xor ecx,ecx
 jz zmult1bot
gnexult1b: mov eax,[ebp+968]
 add eax,[ebp+1012]
 mov ecx,[ebp+952]
 mov edx,[ebp+1008]
 push eax
 push ecx
 push edx
 call zetnextsect
 mov [ebp+920],eax
zmult1bot: mov esi,[ebp+920]
 mov edi,[ebp+1004]
 mov [ebp+1012],esi
 mov [ebp+1016],edi
 add esp,[ebp+904]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 ret
; bottom of zmultpos1
; int zmultpos2(lnes* zmu2, int nmufp,int zmusect)
; zmusect is 0 for root directory
; 1004 retad  1008 *zmu2   1012 nmufp   1016 zmusect
; 988 ebx     992 esi      996 edi      1000 ebp
; 972 0       976 eax      980 ecx      984 edx
; 956 4       960 3        964 2        968 1
; 940 8       944 7        948 zmu2sr   952 zmu2ba
; 924 12      928 11       932 zmu2re   936 9
; 908 16      912 15       916          920 zmu2rz
; 892 20      896 19       900          904 espaddend
zmultpos2: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1021
 mov edx,edi
 sub edx,1020
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
zmultppu2: push ebx
 add ebx,edx
 sub ecx,edx
 jnz zmultppu2
 mov [ebp+904],eax
 mov ecx,[ebp+936]
 mov edx,[ebp+1012]
 shr edx,cl
 and edx,4095
 mov [ebp+948],edx
 mov esi,[ebp+1012]
 and esi,511
 mov [ebp+932],esi
 mov edi,[ebp+1008]
 mov eax,[ebp+1016]
 mov ecx,[ebp+948]
 push eax
 push ecx
 push edi
 call zmultpos1
 mov [ebp+952],eax
 mov edx,[ebp+952]
 add edx,[ebp+932]
 mov [ebp+920],edx
 mov esi,[ebp+920]
 mov edi,[ebp+1004]
 mov [ebp+1012],esi
 mov [ebp+1016],edi
 add esp,[ebp+904]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 ret
; bottom of zmultpos2
; int nzfnlinecmp(lnes* lfncrz,int lfno,int lfne,int fnlrf)
; 1008 *lfncrz  1012 lfno  1016 lfne  1020 fnlrf
;  992 esi       996 edi   1000 ebp   1004 retad
;  976 eax       980 ecx    984 edx    988 ebx
;  960 3         964 2      968 1      972 0
;  944 loc2880   948 islineeqfnl  952 espaddend  956 4
;  928 11        932 10    936 crzloc  940 8
nzfnlinecmp: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1012
 mov edx,edi
 sub edx,1011
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
nzfnlineppu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz nzfnlineppu
 mov [ebp+952],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 lea esi,[ebx+fdimg2880]
 lea edi,[ebx+crz0160]
 mov [ebp+936],edi
 mov [ebp+944],esi
 mov eax,[ebp+968]
 mov ecx,[ebp+1020]
 mov edx,[ebp+944]
 mov esi,[ebp+1012]
 mov edi,[ebp+936]
 push eax
 push ecx
 push edx
 push esi
 push edi
 call nzlfncmp
 mov [ebp+948],eax
 mov edx,[ebp+948]
 cmp edx,[ebp+972]
 jz skiplinecmp
 mov eax,[ebp+972]
 mov ecx,[ebp+1020]
 add ecx,[ebp+940]
 mov edx,[ebp+944]
 mov esi,[ebp+1016]
 mov edi,[ebp+936]
 push eax
 push ecx
 push edx
 push esi
 push edi
 call nzlfncmp
 mov [ebp+948],eax
skiplinecmp: mov esi,[ebp+948]
 mov edi,[ebp+1004]
 mov [ebp+1016],esi
 mov [ebp+1020],edi
 add esp,[ebp+952]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 pop eax
 ret
; bottom of nzfnlinecmp
; int bigflen512(lnes* bflen5, int sectbfl01)
; 1000 ebp  1004 retad  1008 *bflen5  1012 sectbfl01
; 984 edx   988 ebx     992 esi       996 edi
; 968 1     972 0       976 eax       980 ecx
; 952 5     956 4       960 3         964 2
; 936 9     940 8       944 7         948 rigflne
; 920 13    924 12      928 11        932 rigflhk
; 904 17    908 16      912 15        916 rigfltr
; 888 21    892 20      896 19        900 rigflen
; 872 25    876 24      880 23        884 espaddend
; 856 29    860 28      864 27        868 26
bigflen512: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1030
 mov edx,edi
 sub edx,1029
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
bigflenpu5: push ebx
 add ebx,edx
 sub ecx,edx
 jnz bigflenpu5
 mov [ebp+884],eax
 xor esi,esi
 add esi,7168
 mov [ebp+900],esi
 mov edx,[ebp+1012]
 cmp edx,[ebp+964]
 js canceln512
 cmp edx,4080
 js starten512
canceln512: jmp rigflensav
starten512: mov edx,[ebp+972]
 mov [ebp+916],edx
 mov [ebp+900],edx
 mov ecx,[ebp+1012]
 mov [ebp+932],ecx
loopten512: mov esi,[ebp+916]
 cmp esi,4096
 jns canceln512
 mov ecx,[ebp+932]
 cmp ecx,[ebp+964]
 js canceln512
 mov eax,[ebp+932]
 mov [ebp+948],eax
 mov ecx,[ebp+948]
 mov edx,[ebp+1008]
 push ecx
 push edx
 call threenib
 mov [ebp+932],eax
 mov ecx,[ebp+900]
 cmp ecx,512
 jns bmidten512
 mov eax,[ebp+948]
 mov [ebp+932],eax
bmidten512: mov ecx,[ebp+932]
 cmp ecx,[ebp+964]
 js rigflensav
 cmp ecx,4080
 jns rigflensav
 mov eax,[ebp+932]
 mov [ebp+948],eax
 mov ecx,[ebp+948]
 add ecx,[ebp+968]
 mov [ebp+932],ecx
 mov edx,[ebp+900]
 add edx,512
 mov [ebp+900],edx
 mov ecx,[ebp+916]
 add ecx,[ebp+968]
 mov [ebp+916],ecx
 jmp loopten512
rigflensav: mov esi,[ebp+900]
 mov edi,[ebp+1004]
 mov [ebp+1008],esi
 mov [ebp+1012],edi
 add esp,[ebp+884]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of bigflen512
; int fnwhere(lnes* lfgqs,stfw,wsec,wlen,wout)
; 1016 wsec  1020 wlen   1024 wout
; 1000 ebp   1004 retad  1008 *lfgqs  1012 stfw
; 984 edx    988 ebx     992 esi      996 edi
; 968 1      972 0       976 eax      980 ecx
; 952 5      956 4       960 3        964 2
; 936 9      940 8       944 7        948 6
; 920 13     924 12      928 11       932 10
; 904 17     908 16      912 15       916 m1
; 888 21     892 20      896 19       900 crzwhere
; 872 25     876 24      880 23       884 22
; 856 29     860 28      864 27       868 26
; 840 33     844 32      848 31       852 fnwhalt
; 824 37     828 36      832 35       836 sixtime
; 808 41     812 40      816 39       820 fnwres
; 792 45     796 44      800 43       804 stfe
; 776 49     780 48      784 47       788 46
; 760 53     764 52      768 51       772 50
; 744 57     748 56      752 55       756 fdimgwhere
; 728 61     732 60      736 59       740 fnwisdot
; 712 65     716 64      720 63       724 fnwaddr
; 696 69     700 68      704 67       708 fnwctr
; 680 73     684 72      688 71       692 fnwnext5
; 664 77     668 76      672 75       676 ofattr2
; 648 81     652 80      656 79       660 oflen4
; 632 85     636 84      640 83       644 osect3
; 616 89     620 88      624 87       628 sub28801
; 600 93     604 92      608 91       612 espaddend
fnwhere: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1094
 mov edx,edi
 sub edx,1093
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
fnwhepu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz fnwhepu
 mov [ebp+612],eax
 mov ebx,[ebp+972]
 sub ebx,[ebp+968]
 mov [ebp+916],ebx
 mov [ebp+628],ebx
 mov [ebp+820],ebx
 mov [ebp+676],ebx
 mov [ebp+692],ebx
 mov ecx,[ebp+972]
 mov [ebp+836],ecx
 mov [ebp+644],ebx
 mov [ebp+660],ebx
 mov [ebp+852],ecx
 mov ebx,[ebp+1008]
 sub ebx,8192
 lea esi,[ebx+crz0160]
 lea edi,[ebx+fdimg2880]
 mov [ebp+900],esi
 mov [ebp+756],edi
 mov eax,[ebp+1012]
 push eax
 push esi
 call rtoplen
 mov [ebp+804],eax
 mov ecx,[ebp+804]
 add ecx,[ebp+1012]
 add ecx,[ebp+968]
 mov [ebp+692],ecx
 mov esi,[ebp+900]
 add esi,[ebp+1012]
 add esi,[ebp+804]
 xor edx,edx
 sub esi,1000
 mov dl,[esi+1000]
 mov [ebp+740],edx
 mov eax,[ebp+692]
 mov [ebp+804],eax
 mov ecx,[ebp+788]
 cmp ecx,[ebp+740]
 jz fnwhe03
 mov eax,[ebp+972]
 mov [ebp+804],eax
fnwhe03: mov ecx,[ebp+788]
 cmp ecx,[ebp+740]
 jnz fnwhe04
 mov eax,[ebp+692]
 mov edx,[ebp+900]
; *** ERROR *** fnwhe03 + 5 forgot to push arguments
; for rtoplen 2976
 push eax
 push edx
; second attempt to push 2 arguments for rtoplen
 call rtoplen
 add eax,[ebp+968]
 add [ebp+692],eax
fnwhe04: mov eax,[ebp+692]
 mov edx,[ebp+900]
 push eax
 push edx
 call rtoplen
 cmp eax,[ebp+968]
 jns fnwhe05
 mov ecx,[ebp+916]
 mov [ebp+692],ecx
fnwhe05: mov eax,[ebp+972]
 mov [ebp+708],eax
fnwhi06: mov ecx,[ebp+708]
 cmp ecx,[ebp+1020]
 js fnwwi07
 jmp fnwhb16
fnwwi07: mov eax,[ebp+1016]
 mov ecx,[ebp+708]
 mov edx,[ebp+1008]
 push eax
 push ecx
 push edx
 call zmultpos2
 mov [ebp+724],eax
 mov ecx,[ebp+804]
 mov edx,[ebp+1012]
 mov esi,[ebp+1008]
 push eax
 push ecx
 push edx
 push esi
 call nzfnlinecmp
 mov [ebp+852],eax
 mov esi,[ebp+972]
 cmp esi,[ebp+852]
 jnz fnwhe08
 jmp fnhlt14
fnwhe08: mov eax,[ebp+724]
 mov [ebp+628],eax
 mov ecx,[ebp+968]
 mov edx,[ebp+628]
 add edx,[ebp+928]
 add edx,[ebp+756]
 push ecx
 push edx
 call revicram
 mov [ebp+676],eax
 mov ecx,[ebp+956]
 mov edx,[ebp+628]
 add edx,[ebp+884]
 add edx,[ebp+756]
 push ecx
 push edx
 call revicram
 mov [ebp+836],eax
 mov ecx,[ebp+964]
 mov edx,[ebp+628]
 add edx,[ebp+868]
 add edx,[ebp+756]
 push ecx
 push edx
 call revicram
 mov [ebp+644],eax
 mov ecx,[ebp+956]
 mov edx,[ebp+628]
 add edx,[ebp+860]
 add edx,[ebp+756]
 push ecx
 push edx
 call revicram
 mov [ebp+660],eax
 mov ecx,[ebp+1024]
 cmp ecx,[ebp+956]
 jnz fnhlt14
 mov eax,[ebp+660]
 mov [ebp+836],eax
 mov edx,[ebp+836]
 cmp edx,[ebp+972]
 jnz fnhlt14
 mov ecx,[ebp+676]
 and ecx,[ebp+908]
 jz fnhlt14
 mov eax,[ebp+644]
 mov ecx,[ebp+1008]
 push eax
 push ecx
 call bigflen512
 mov [ebp+660],eax
fnhlt14: mov edx,[ebp+844]
 add [ebp+708],edx
 jmp fnwhi06
fnwhb16: mov esi,[ebp+1024]
 mov edx,[ebp+916]
 cmp esi,[ebp+968]
 jnz fnwhe17
 mov edx,[ebp+628]
fnwhe17: cmp esi,[ebp+964]
 jnz fnwhe18
 mov edx,[ebp+676]
fnwhe18: cmp esi,[ebp+960]
 jnz fnwhe19
 mov edx,[ebp+644]
fnwhe19: cmp esi,[ebp+956]
 jnz fnwhe20
 mov edx,[ebp+660]
fnwhe20: cmp esi,[ebp+952]
 jnz fnwhe21
 mov edx,[ebp+692]
fnwhe21: cmp esi,[ebp+948]
 jnz fnwhe22
 mov edx,[ebp+836]
fnwhe22: mov [ebp+820],edx
 mov esi,[ebp+820]
 mov edi,[ebp+1004]
 mov [ebp+1020],esi
 mov [ebp+1024],edi
 add esp,[ebp+612]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 pop eax
 pop eax
 ret
; bottom of fnwhere
; void lengetsect(lnes* lgsrs,int lgs4)
; 1004 retad  1008 *lgsrs  1012 lgs4
; 988 ebx     992 esi      996 edi     1000 ebp
; 972 0       976 eax      980 ecx     984 edx
; 956 4       960 3        964 2       968 1
; 940 8       944 7        948 6       952 5
; 924 12      928          932 10      936 9
; 908 16      912          916 14      920 lggwhr
; 892 20   896 lgwtime87   900 18      904 lgswlim
; 876 24   880 lgwtime7    884 22      888 lgwlen4
; 860 28   864 lggwhs      868 26      872 lgsect3
; 844 32   848 lgwlen54    852 30      856 lgsw5
; 828 36   832 lgsect43    836 34      840 m1
; 812 40   816 lgsw65      820 38      824 espaddend
lengetsect: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1041
 mov edx,edi
 sub edx,1040
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
lengetsspu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz lengetsspu
 mov [ebp+824],eax
 mov edx,[ebp+1012]
 mov [ebp+856],edx
 mov ecx,[ebp+972]
 sub ecx,[ebp+968]
 mov [ebp+840],ecx
 mov [ebp+920],ecx
 mov [ebp+864],ecx
 mov esi,[ebp+972]
 mov [ebp+872],esi
 mov [ebp+880],esi
 xor edx,edx
 add edx,7168
 mov [ebp+888],edx
 mov [ebp+904],esi
lengewhi23: mov esi,[ebp+856]
 cmp esi,[ebp+972]
 js lengewhb24
 mov ecx,[ebp+904]
 cmp ecx,8192
 js lengetse25
lengewhb24: jmp lengewhb34
lengetse25: mov eax,[ebp+968]
 mov ecx,[ebp+888]
 mov edx,[ebp+872]
 mov esi,[ebp+856]
 mov edi,[ebp+1008]
 push eax
 push ecx
 push edx
 push esi
 push edi
 call fnwhere
 mov [ebp+864],eax
 mov eax,[ebp+960]
 push eax
 push ecx
 push edx
 push esi
 push edi
 call fnwhere
 mov [ebp+832],eax
 mov eax,[ebp+956]
 push eax
 push ecx
 push edx
 push esi
 push edi
 call fnwhere
 mov [ebp+848],eax
 mov eax,[ebp+952]
 push eax
 push ecx
 push edx
 push esi
 push edi
 call fnwhere
 mov [ebp+816],eax
 mov eax,[ebp+948]
 push eax
 push ecx
 push edx
 push esi
 push edi
 call fnwhere
 mov [ebp+896],eax
 mov ecx,[ebp+832]
 mov [ebp+872],ecx
 mov edx,[ebp+848]
 mov [ebp+888],edx
 mov ecx,[ebp+816]
 mov [ebp+856],ecx
 mov edx,[ebp+896]
 mov [ebp+880],edx
 mov edx,[ebp+864]
 mov [ebp+920],edx
 mov esi,[ebp+968]
 add [ebp+904],esi
 jmp lengewhi23
lengewhb34: mov ebx,[ebp+1008]
 sub ebx,8192
 mov eax,[ebp+888]
 mov [ebx+fl06],eax
 mov ecx,[ebp+872]
 mov [ebx+sfgcur],ecx
 mov [ebx+sfgprv],ecx
 mov edx,[ebp+880]
 mov [ebx+sftime],edx
 mov esi,[ebp+972]
 mov [ebx+fp05],esi
 mov [ebx+fp04],esi
 mov edi,[ebp+920]
 mov [ebx+sfnbase],edi
 mov esi,[ebp+976]
 mov edi,[ebp+1004]
 mov [ebp+1008],esi
 mov [ebp+1012],edi
 add esp,[ebp+824]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of lengetsect
; void aread2880(lnes* ar288, char* lpFlopString)
; 7000 ebp    7004 retad    7008 *ar288    7012 *lpFlopString
; 6984 edx    6988 ebx      6992 esi       6996 edi
; 6968 1      6972 0        6976 eax       6980 ecx
; 6952 5      6956 4        6960 3         6964 2
; 6936 9      6940 8        6944 7         6948 rhandle
; 6920 13     6924 12       6928 memshift  6932 destsub
; 6904 destctr  6908 16     6912 codeaddr  6916 wrjunk
; 6888 21     6892 20       6896 espadd    6900 cst512
; 6376 512 byte read buffer 6376 to 6887
aread2880: push ebp
 mov ebp,esp
 sub ebp,7000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1150
 mov edx,edi
 sub edx,1149
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
aread28pu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz aread28pu
 mov [ebp+6896],eax
 mov eax,[ebp+6972]
 mov [ebp+6932],eax
 xor edx,edx
 add edx,512
 mov [ebp+6900],edx
 mov [ebp+6904],eax
 push eax
 call getreala
 mov [ebp+6912],eax
 mov esi,[ebp+6912]
; mov ecx,[esi+ramsize18_misspelled]
; mov [ebp+6928],ecx
; mov eax,[ebp+6972]
; mov ecx,[ebp+6960]
; mov edx,[ebp+6968]
 xor esi,esi
 add esi,0c0000000h
 add esi,0c0000000h
; mov edi,[ebp+7012]
 mov eax,[ebp+6952]
 mov ecx,[ebp+7012]
 mov edx,[ebp+6972]
 xor edi,edi
 add edi,493
 mov esi,[ebp+6972]
 push esi
 push edi
 push edx
 push ecx
 push eax
 call twioswitch
; line 0054
; push eax
; push eax
; push ecx
; push eax
; push edx
; push esi
; push edi
; mov esi,[ebp+6912]
; lea eax,[esi+aread28op]
; add esi,[ebp+6928]
; mov ecx,[esi+wiocrn85]
; push eax
; push ecx
; rem ret
aread28op: mov ebp,esp
 sub ebp,6376
 mov [ebp+6948],eax
 cmp eax,[ebp+6972]
 jg areadolop
 mov ecx,[ebp+6972]
 mov [ebp+6948],ecx
 jmp areadclos
areadolop: mov eax,[ebp+6972]
; lea ecx,[ebp+6916]
 mov edx,[ebp+6900]
 lea esi,[ebp+6376]
 mov edi,[ebp+6948]
 mov ecx,[ebp+6960]
 push eax
 push edx
 push esi
 push edi
 push ecx
 call twioswitch
 add esp,[ebp+6972]
; line 093
; push eax
; push ecx
; push edx
; push esi
; push edi
; mov esi,[ebp+6912]
; lea eax,[esi+aread28re]
; add esi,[ebp+6928]
; mov ecx,[esi+wiored03]
; push eax
; push ecx
; rem ret
aread28re: mov ebp,esp
 sub ebp,6376
 mov ebx,[ebp+7008]
 sub ebx,8192
 xor esi,esi
 mov edi,[ebp+6932]
 mov ecx,[ebp+6968]
 xor edx,edx
areadilop: mov dl,[ebp+esi*1+6376]
 mov [ebx+edi*1+fdimg2880],dl
 add edi,ecx
 add esi,ecx
 cmp esi,[ebp+6900]
 js areadilop
 mov edx,[ebp+6900]
 add [ebp+6932],edx
 mov ecx,[ebp+6904]
 add ecx,[ebp+6968]
 mov [ebp+6904],ecx
 cmp ecx,2880
 jns areadclob
 jmp areadolop
areadclob: mov eax,[ebp+6948]
; mov esi,[ebp+6912]
; lea ecx,[esi+areadclos]
; add esi,[ebp+6928]
; mov edx,[esi+wiocls06]
 mov ecx,[ebp+6972]
 mov edx,[ebp+6960]
 add edx,edx
 push ecx
 push ecx
 push ecx
 push eax
 push edx
 call twioswitch
 add esp,[ebp+6972]
; push eax
; push ecx
; push edx
; rem ret
areadclos: mov ebp,esp
 sub ebp,6376
 mov esi,[ebp+6948]
 mov edi,[ebp+7004]
 mov [ebp+7008],esi
 mov [ebp+7012],edi
 add esp,[ebp+6896]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of aread2880
; int isredonetwo(lnes* crz125,int reol78)
; 1000 ebp    1004 retad  1008 *crz125  1012 reol78
; 984 edx     988 ebx     992 esi       996 edi
; 968 1       972 0       976 eax       980 ecx
; 952 5       956 4       960 3         964 2
; 936 9       940 8       944 7         948 6
; 920 13      924 12      928 11        932 10
; 904 17      908 16      912 15        916
; 888 21      892 20      896 19        900 codeaddr
; 872 25      876 24      880 23        884
; 856 29      860 28      864 27        868 ial15
; 840 33      844 32      848 31        852 ial12
; 824 37      828 36      832 35        836 isr12rz
; 808 41      812 40      816 39        820 espaddend
; 792 45      796 44      800 43        804
; 776 49 1    780 48 0    784 47 /      788 46 .
; 760 53 5    764 52 4    768 51 3      772 50 2
; 744 57 9    748 56 8    752 55 7      756 54 6
; 728 61      732 60      736 59 ;      740 58 :
; 712 65 A    716 64      720 63        724 62
; 696 69 E    700 68 D    704 67 C      708 66 B
; 680 73 I    684 72 H    688 71 G      692 70 F
; 664 77 M    668 76 L    672 75 K      676 74 J
; 648 81 Q    652 80 P    656 79 O      660 78 N
; 632 85 U    636 84 T    640 83 S      644 82 R
; 616 89 Y    620 88 X    624 87 W      628 86 V
; 600 93      604 92      608 91        612 90 Z
; 584 97 a    588 96      592 95        596 94
; 568 101 e   572 100 d   576 99 c      580 98 b
isredonetwo: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1102
 mov edx,edi
 sub edx,1101
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
isredonetpu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz isredonetpu
 mov [ebp+820],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov ecx,[ebx+a80w]
 mov edx,[ebp+1012]
 sub edx,[ebp+968]
 push edx
 push ecx
 call nampy
 mov [ebp+852],eax
 add eax,[ebp+960]
 mov [ebp+868],eax
 xor ecx,ecx
 push ecx
 call getreala
 mov edi,[ebx+nzfileg]
 mov [ebp+836],edi
 mov [ebp+900],eax
 cmp edi,[ebp+968]
 jg isredbott03
 cmp edi,[ebp+968]
 jns isredonet04
isredbott03: jmp isredbott13
isredonet04: mov esi,[ebp+852]
 xor edx,edx
 mov dl,[ebx+esi*1+crz0160]
 cmp edx,[ebp+708]
 jz isredonet05
 cmp edx,[ebp+580]
 jnz isredbott03
isredonet05: add esi,[ebp+968]
 mov dl,[ebx+esi*1+crz0160]
 cmp edx,[ebp+740]
 jz isredonet06
 cmp edx,[ebp+736]
 jnz isredbott03
isredonet06: add esi,[ebp+968]
 mov dl,[ebx+esi*1+crz0160]
 cmp edx,[ebp+784]
 jz isredonet07
 cmp edx,[ebp+604]
 jnz isredbott03
isredonet07: mov ecx,[ebp+964]
 mov [ebp+836],ecx
 mov eax,[ebp+972]
 mov [ebx+fl06],eax
 mov [ebx+fp04],eax
 mov [ebx+fp05],eax
 mov edi,[ebp+900]
 lea eax,[edi+flopstring]
 mov ecx,[ebp+1008]
 push eax
 push ecx
 call aread2880
 cmp eax,[ebp+972]
 jz isredbott13
 mov eax,[ebp+868]
 mov ecx,[ebp+1008]
 push eax
 push ecx
 call lengetsect
 mov edx,[ebx+hiskwid]
 add edx,[ebp+968]
 mov [ebx+pose],edx
; mov ecx,[ebp+972]
; cmp [ebx+needclose],ecx
; jnz isredbott13
; mov [ebx+needclose],ecx
isredbott13: mov edx,[ebp+972]
; cmp [ebx+needclose],edx
 mov esi,[ebp+836]
 mov [ebp+1008],esi
 mov edi,[ebp+1004]
 mov [ebp+1012],edi
 add esp,[ebp+820]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of isredonetwo
; call delsects with lnes* , sfgcur , fl06
; int delsects(lnes* desec ,int dsec01,int dseflen)
; 1004 retad  1008 *desec  1012 dsec01  1016 dseflen
; 988 ebx     992 esi      996 edi      1000 ebp
; 972 0       976 eax      980 ecx      984 edx
; 956 4       960 3        964 2        968 1
; 940 8       944 7        948 6        952 5
; 924 12      928 11       932 10       936 9
; 908 16      912 15       916 14       920
; 892 20      896 19       900 18       904 dsecrz
; 876 24      880 23       884 22       888 dsecpo
; 860 28      864 27       868 26       872 dsecne
; 844 32      848 31       852 30       856 dsfctr
; 828 36      832 35       836 34       840 espaddend
delsects: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1037
 mov edx,edi
 sub edx,1036
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
delsecpu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz delsecpu
 mov [ebp+840],eax
 mov ecx,[ebp+972]
 mov edx,ecx
 sub ecx,[ebp+968]
 mov [ebp+904],ecx
 mov [ebp+856],edx
 mov eax,[ebp+1012]
 mov [ebp+872],eax
 mov ecx,[ebp+1012]
 cmp ecx,[ebp+964]
 js delser03
 cmp ecx,2849
 js welsec04
delser03: jmp delser23
welsec04: mov edx,[ebp+856]
 cmp edx,[ebp+1016]
 js delsec05
 jmp xwelbot16
delsec05: cmp edx,[ebp+972]
 jnz delsec06
 mov eax,[ebp+972]
 mov ecx,[ebp+1012]
 mov esi,[ebp+1008]
 push eax
 push ecx
 push esi
 call nibwrt3
delsec06: cmp edx,[ebp+972]
 jz delsec09
 mov eax,[ebp+872]
 mov ecx,[ebp+1008]
 push eax
 push ecx
 call threenib
 mov [ebp+888],eax
 mov ecx,[ebp+888]
 cmp ecx,[ebp+964]
 js delsec07
 cmp ecx,2849
 jns delsec07
 mov [ebp+872],ecx
delsec07: mov eax,[ebp+972]
 mov ecx,[ebp+872]
 mov esi,[ebp+1008]
 push eax
 push ecx
 push esi
 call nibwrt3
delsec09: xor esi,esi
 add esi,512
 mov ecx,[ebp+968]
 add [ebp+872],ecx
 add [ebp+856],esi
 jmp welsec04
xwelbot16: mov esi,[ebp+968]
 mov ebx,[ebp+1008]
 mov edx,[ebp+872]
 cmp edx,[ebp+960]
 js owelbot16
 cmp edx,2845
 jns owelbot16
 push edx
 push ebx
 call threenib
 mov edi,eax
 cmp edi,[ebp+960]
 js owelbot16
 cmp edi,2845
 jns owelbot16
 add edx,esi
 push edx
 push ebx
 call threenib
 cmp eax,[ebp+972]
 jnz owelbot16
 mov eax,[ebp+972]
 mov ecx,[ebp+872]
 push eax
 push ecx
 push ebx
 call nibwrt3
 add esi,511
 add [ebp+856],esi
owelbot16: mov eax,[ebp+856]
 mov [ebp+904],eax
 mov ecx,[ebp+972]
 mov [ebp+872],ecx
 mov eax,[ebp+928]
 mov [ebp+888],eax
 mov ecx,[ebp+968]
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov edi,[ebx+sfnbase]
 add edi,[ebp+888]
 mov esi,[ebp+888]
 xor edx,edx
weltop17: cmp esi,[ebp+844]
 jns delser23
 mov [ebx+edi*1+fdimg2880],dl
 add edi,ecx
 add esi,ecx
 xor eax,eax
 jz weltop17
delser23: mov esi,[ebp+904]
 mov edi,[ebp+1004]
 mov [ebp+1012],esi
 mov [ebp+1016],edi
 add esp,[ebp+840]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 ret
; bottom of delsects
; int sechainlen(lnes* scl2,int sech01)
; 1000 ebp  1004 retad  1008 *scl2  1012 sech01
; 984 edx   988 ebx     992 esi     996 edi
; 968 1     972 0       976 eax     980 ecx
; 952 5     956 4       960 3       964 2
; 936       940 8       944 7       948
; 920 sechtry  924 12   928 sfchallow  932 sechainrz
; 904 17    908 16   912 sechainctr  916 espaddend
sechainlen: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1018
 mov edx,edi
 sub edx,1017
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
sechainppu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz sechainppu
 mov [ebp+916],eax
 mov ecx,[ebp+972]
 mov edx,[ebp+968]
 mov [ebp+928],edx
 mov [ebp+932],ecx
 mov eax,[ebp+1012]
 mov [ebp+912],eax
sechwhitop: mov esi,[ebp+928]
 cmp esi,[ebp+972]
 jnz sechainl04
 clc
 xor ecx,ecx
 jz sechainret
sechainl04: mov eax,[ebp+912]
 mov ecx,[ebp+1008]
 push eax
 push ecx
 call threenib
 mov [ebp+920],eax
 mov edx,[ebp+920]
 cmp edx,[ebp+972]
 jz sechainl06
 mov eax,[ebp+972]
 mov [ebp+928],eax
sechainl06: mov ecx,[ebp+928]
 cmp ecx,[ebp+972]
 jz sechwhitop
 mov edx,[ebp+968]
 add [ebp+912],edx
 add [ebp+932],edx
 mov ecx,[ebp+912]
 cmp ecx,2849
 js sechainl08
 mov eax,[ebp+972]
 mov [ebp+928],eax
sechainl08: jmp sechwhitop
sechainret: mov esi,[ebp+932]
 mov edi,[ebp+1004]
 mov [ebp+1008],esi
 mov [ebp+1012],edi
 add esp,[ebp+916]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of sechainlen
; int maxchainsrt(lnes* srt03)
; 996 edi   1000 ebp  1004 retad  1008 *srt03
; 980 ecx   984 edx   988 eax     992 esi
; 964 2     968 1     972 0       976 eax
; 948       952 maxcsoo  956 4    960 3
; 932       936 maxcsctr  940 8   944 curcslen
; 916 14    920 espadd  924 12    928 maxcsrz
maxchainsrt: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1015
 mov edx,edi
 sub edx,1014
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
maxchainppu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz maxchainppu
 mov [ebp+920],eax
 mov esi,[ebp+972]
 mov [ebp+928],esi
 mov [ebp+952],esi
 mov eax,[ebp+964]
 mov [ebp+936],eax
maxchaintop: mov eax,[ebp+936]
 mov ecx,[ebp+1008]
 push eax
 push ecx
 call sechainlen
 mov [ebp+944],eax
 mov ecx,[ebp+952]
 cmp ecx,[ebp+944]
 jns maxchains04
 mov eax,[ebp+944]
 mov [ebp+952],eax
 mov edx,[ebp+936]
 mov [ebp+928],edx
maxchains04: mov edx,[ebp+936]
 add edx,[ebp+968]
 mov [ebp+936],edx
 cmp edx,2847
 js maxchaintop
 mov esi,[ebp+928]
 mov edi,[ebp+1004]
 mov [ebp+1004],esi
 mov [ebp+1008],edi
 add esp,[ebp+920]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 ret
; bottom of maxchainsrt
; boolean rptcmp(int tcv,int tcr,int rtcsu,byte* rtcb)
; 1008 tcu   1012 tcr   1016 rtcsu   1020 *rtcb
; 992 edx    996 ebx    1000 ebp     1004 retad
; 976 eax    980 ecx    984 edx      988 ebx
; 960 3      964 2      968 1        972 0
; 944 7      948 rtcz   952 rtmctr   956 4
; 928 11     932 espadd  936         940 8
rptcmp: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1012
 mov edx,edi
 sub edx,1011
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
rptcmu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz rptcmu
 mov [ebp+932],eax
 mov ecx,[ebp+968]
 mov [ebp+948],ecx
 mov edx,[ebp+972]
 mov [ebp+952],edx
rptcwh: mov ecx,[ebp+952]
 cmp ecx,[ebp+1012]
 jns rptcwb
 mov esi,[ebp+1020]
 add esi,[ebp+1016]
 add esi,[ebp+952]
 sub esi,1000
 sub esi,ebp
 xor edx,edx
 mov dl,[ebp+esi*1+1000]
 cmp dl,[ebp+1008]
 jz rptc04
 mov eax,[ebp+972]
 mov [ebp+948],eax
rptc04: mov ecx,[ebp+968]
 add [ebp+952],ecx
 clc
 xor edx,edx
 jz rptcwh
rptcwb: mov esi,[ebp+948]
 mov edi,[ebp+1004]
 mov [ebp+1016],esi
 mov [ebp+1020],edi
 add esp,[ebp+932]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 pop eax
 ret
; bottom of rptcmp
; int getfnwsub(lnes* gfnw4)
; 996 edi    1000 ebp   1004 retad   1008 *gfnw4
; 980 ecx    984 edx    988 ebx      992 esi
; 964 2      968 1      972 0        976 eax
; 948 6      952 5      956 4        960 3
; 932 10     936 9      940 8        944 7
; 916 14     920 13     924 12       928 cst224
; 900 18     904 17     908 16       912 gfsub
; 884 22     888 cst19x512  892 20   896 19
; 868 26     872 25     876 24       880 gfra
; 852 30     856        860 28       864 gfrzz
; 836 34     840 cst229  844 32      848 gfctr
; 820 38     824        828 36       832 espaddend
getfnwsub: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1039
 mov edx,edi
 sub edx,1038
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
getfnwppu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz getfnwppu
 mov [ebp+832],eax
 xor esi,esi
 add esi,9728
 mov [ebp+888],esi
 mov ecx,[ebp+860]
 add ecx,ecx
 add ecx,ecx
 add ecx,ecx
 mov [ebp+928],ecx
 add ecx,[ebp+952]
 mov [ebp+840],ecx
 mov ecx,[ebp+972]
 mov edx,[ebp+968]
 mov [ebp+848],ecx
 mov [ebp+880],edx
 sub ecx,edx
 mov [ebp+864],ecx
 mov ebx,[ebp+1008]
 sub ebx,8192
getfnwl03: mov esi,[ebp+972]
 cmp esi,[ebp+880]
 jns getfnwb06
 mov eax,[ebp+848]
 mov ecx,[ebp+844]
 push ecx
 push eax
 call nampy
 add eax,[ebp+888]
 mov [ebp+912],eax
 lea eax,[ebx+fdimg2880]
 mov ecx,[ebp+912]
 mov edx,[ebp+844]
 push eax
 push ecx
 push edx
 push esi
 call rptcmp
 cmp eax,esi
 jz getfnwb04
 mov [ebp+864],ecx
 mov [ebp+880],esi
getfnwb04: mov edx,[ebp+848]
 add edx,[ebp+968]
 mov [ebp+848],edx
 cmp edx,[ebp+928]
 js getfnwl03
getfnwb06: mov edx,[ebp+972]
 mov [ebp+848],edx
 mov ecx,[ebp+864]
 cmp ecx,edx
 jns getfnwb20
getfnwl07: mov ecx,[ebp+848]
 cmp ecx,[ebp+928]
 jns getfnwb20
 mov edx,[ebp+844]
 push ecx
 push edx
 call nampy
 add eax,[ebp+888]
 mov [ebp+912],eax
 mov ecx,eax
 lea esi,[ebx+fdimg2880]
 mov edx,[ebp+968]
 mov eax,[ebp+840]
 push esi
 push ecx
 push edx
 push eax
 call rptcmp
 cmp eax,[ebp+972]
 jz getfnws08
 mov [ebp+864],ecx
getfnws08: add [ebp+848],edx
 clc
 xor ecx,ecx
 jz getfnwl07
getfnwb20: mov esi,[ebp+864]
 mov edi,[ebp+1004]
 mov [ebp+1008],edi
 mov [ebp+1004],esi
 add esp,[ebp+832]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 ret
; bottom of getfnwsub
; void wrtnewfn(lnes* crzwl,int cszw,int wesbas)
; 1004 retad   1008 * crzwl  1012 cszw   1016 wesbas
; 988 ebx      992 esi       996 edi     1000 ebp
; 972 0        976 eax       980 ecx     984 edx
; 956 4        960 3         964 2       968 1
; 940 8        944 7         948 6       952 5
; 924 12       928 11        932 10      936 9
; 908 16       912 15        916 14      920 13
; 892 20       896 19        900 18      904
; 876 24       880 23        884 22      888
; 860 28       864 27        868 26      872
; 844 32       848 31        852 30      856
; 828 36       832 35        836 34      840 33
; 812 40       816 39        820 38      824
; 796 44       800 43        804 42      808
; 780 48       784 47        788 46      792 _tempboke
; 764 52       768 51        772 50      776
; 748 56       752 55        756 54      760 wfnlen
; 732 60       736 59        740 58      744 wfnpos
; 716 64       720 63        724 62      728 backwctr
; 700 68       704 67        708 66      712 wnchr
; 684 72       688 71        692 70      696 wcallow
; 668 76       672 75        676 74      680 wctr80
; 652 80       656 79        660 78      664 wextlen
; 636 84       640 83        644 82      648 wextpos
; 620 88       624 87        628 86      632 wbwctr
; 604 92       608 91        612 92      616 thirdend
; 588 96       592 95        596 94      600 espaddend
; 572 100      576 99        580 98      584
; 556 104      560 103       564 102     568
; 540 108      544 107       548 106     552
wrtnewfn: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1109
 mov edx,edi
 sub edx,1108
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
wrtnewpu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz wrtnewpu
 mov [ebp+600],eax
 mov esi,[ebp+972]
 mov [ebp+664],esi
 mov [ebp+648],esi
 mov [ebp+760],esi
 mov [ebp+744],esi
 mov [ebp+680],esi
 mov [ebp+792],esi
 mov eax,[ebp+968]
 mov [ebp+696],eax
 mov edx,[ebp+1012]
 mov [ebp+616],edx
 mov ebx,[ebp+1008]
 sub ebx,8192
wrtwhi03: mov edx,[ebp+972]
 cmp edx,[ebp+696]
 jns wrtwhb06
 xor edx,edx
 mov esi,[ebp+616]
 mov dl,[ebx+esi*1+crz0160]
 mov [ebp+712],edx
 cmp edx,[ebp+840]
 js wrtwhb06
 mov ecx,[ebp+968]
 add [ebp+616],ecx
 mov edx,[ebp+680]
 add edx,ecx
 mov [ebp+680],edx
 mov eax,[ebp+588]
 add eax,[ebp+716]
 cmp edx,eax
 js wrtwhi03
wrtwhb06: mov edx,[ebp+972]
 mov [ebp+696],edx
 mov [ebp+632],edx
 mov ecx,[ebp+616]
 sub ecx,[ebp+968]
 mov [ebp+728],ecx
 mov edx,[ebp+1012]
 cmp edx,[ebp+728]
 jns wrtwhi07
 mov eax,[ebp+968]
 mov [ebp+696],eax
wrtwhi07: mov edx,[ebp+972]
 cmp edx,[ebp+696]
 js wrtnew08
 jmp wrtwhb18
wrtnew08: xor edx,edx
 mov esi,[ebp+728]
 mov dl,[ebx+esi*1+crz0160]
 mov [ebp+712],edx
 mov ecx,[ebp+728]
 sub ecx,[ebp+968]
 mov [ebp+728],ecx
 cmp edx,[ebp+788]
 jnz wrtnew09
 mov ecx,[ebp+632]
 mov [ebp+664],ecx
 mov eax,[ebp+728]
 add eax,[ebp+964]
 mov [ebp+648],eax
 mov ecx,[ebp+972]
 mov [ebp+632],ecx
wrtnew09: cmp edx,[ebp+784]
 jz wrtnew10
 cmp edx,[ebp+604]
 jnz wrtnew11
wrtnew10: mov ecx,[ebp+728]
 add ecx,[ebp+964]
 mov [ebp+744],ecx
 mov eax,[ebp+632]
 mov [ebp+760],eax
 mov ecx,[ebp+972]
 mov [ebp+696],ecx
wrtnew11: mov ecx,[ebp+728]
 cmp ecx,[ebp+1012]
 jns wrtnew12
 mov eax,[ebp+972]
 cmp eax,[ebp+696]
 jns wrtnew12
 mov ecx,[ebp+728]
 add ecx,[ebp+968]
 mov [ebp+744],ecx
 mov eax,[ebp+632]
 add eax,[ebp+968]
 mov [ebp+760],eax
 mov ecx,[ebp+972]
 mov [ebp+696],ecx
wrtnew12: mov ecx,[ebp+972]
 cmp ecx,[ebp+696]
 jns wrtwhb18
 mov eax,[ebp+968]
 add [ebp+632],eax
 jmp wrtwhi07
wrtwhb18: mov edx,[ebp+972]
 mov [ebp+680],edx
 mov ecx,[ebp+680]
wrtwhi19: mov edi,[ebp+1016]
 add edi,ecx
 mov [ebx+edi*1+fdimg2880],dl
 add ecx,[ebp+968]
 cmp ecx,[ebp+844]
 js wrtwhi19
 mov ecx,[ebp+680]
 mov edx,[ebp+844]
wrtwhi20: mov edi,[ebp+1016]
 add edi,ecx
 mov [ebx+edi*1+fdimg2880],dl
 add ecx,[ebp+968]
 cmp ecx,[ebp+928]
 js wrtwhi20
 mov edx,[ebp+972]
 mov [ebp+712],edx
wrtwhi21: mov edx,[ebp+680]
 cmp edx,[ebp+760]
 js wrtnew22
 clc
 xor ecx,ecx
 jz wrtwhb25
wrtnew22: mov esi,edx
 add esi,[ebp+744]
 lea eax,[ebx+crz0160]
 push esi
 push eax
 call nftopperlm
 mov [ebp+712],eax
 mov edx,[ebp+712]
 cmp edx,[ebp+788]
 jz wrtwhb25
 mov edi,[ebp+680]
 add edi,[ebp+1016]
 mov [ebx+edi*1+fdimg2880],dl
 mov ecx,[ebp+968]
 add [ebp+680],ecx
 clc
 xor edx,edx
 jz wrtwhi21
wrtwhb25: mov ecx,[ebp+972]
 mov [ebp+680],ecx
wrtwhi26: mov edx,[ebp+680]
 cmp edx,[ebp+664]
 jns wrtwhb28
 mov esi,[ebp+648]
 add esi,edx
 lea ecx,[ebx+crz0160]
 push esi
 push ecx
 call nftopperlm
 mov edi,[ebp+1016]
 add edi,[ebp+940]
 add edi,edx
 mov [ebx+edi*1+fdimg2880],al
 mov edx,[ebp+968]
 add [ebp+680],edx
 clc
 xor ecx,ecx
 jz wrtwhi26
wrtwhb28: mov eax,[ebp+976]
 mov edi,[ebp+1004]
 mov [ebp+1012],eax
 mov [ebp+1016],edi
 add esp,[ebp+600]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 ret
; bottom of wrtnewfn
; void writeback28(lnes* lwb28,char* wfn28)
; 2000 ebp   2004 retad  2008 *lwb28  2012 *wfn28
; 1984 edx   1988 ebx    1992 esi     1996 edi
; 1968 1     1972 0      1976 eax     1980 ecx
; 1952 5     1956 4      1960 3       1964 2
; 1936 9     1940 8      1944 7       1948 6
; 1920 13    1924 12     1928 11      1932 10
; 1904 17    1908 16     1912 15      1916
; 1888 21    1892 20     1896 19      1900
; 1872 25    1876 24     1880 23      1884
; 1856 29    1860 28     1864 27      1868
; 1840 33    1844 32     1848 36      1852
; 1824 37    1828 36     1832 35      1836 dispval
; 1808 41    1812 40     1816 39      1820 ctr28
; 1792 45    1796 44     1800 43      1804 wrhand28
; 1776 49    1780 48     1784 47      1788 memshift
; 1760 53    1764 52     1768 51      1772 wrjunk
; 1744 57    1748 56     1752 55      1756 cst512
; 1728 61    1732 60     1736 59      1740 codeaddr
; 1712 65    1716 64     1720 63      1724 espaddend
; 1200 r193
writeback28: push ebp
 mov ebp,esp
 sub ebp,2000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,2194
 mov edx,edi
 sub edx,2193
 mov ecx,edi
 sub ecx,2000
 mov eax,ecx
 add eax,eax
 add eax,eax
writebapu28: push ebx
 add ebx,edx
 sub ecx,edx
 jnz writebapu28
 mov [ebp+1724],eax
 xor ecx,ecx
 push ecx
 call getreala
 mov [ebp+1740],eax
 mov ecx,[ebp+1716]
 add ecx,ecx
 add ecx,ecx
 add ecx,ecx
 mov [ebp+1756],ecx
 mov esi,[ebp+1740]
; mov edx,[esi+ramsize18_misspelled]
; mov [ebp+1788],edx
 mov eax,[ebp+1972]
 mov ecx,[ebp+1716]
 add ecx,ecx
 mov edx,[ebp+1964]
 xor esi,esi
 add esi,040000000h
 mov edi,[ebp+2012]
 mov eax,[ebp+1972]
 mov ecx,[ebp+1940]
 xor edx,edx
 add edx,0493
 push eax
 push eax
 push edx
 push edi
 push ecx
 call twioswitch
; line  01121
; push eax
; push ecx
; push edx
; push eax
; push eax
; push esi
; push edi
; mov esi,[ebp+1740]
; lea eax,[esi+writebaop28]
; add esi,[ebp+1788]
; mov ecx,[esi+wiocrn85]
; push eax
; push ecx
; rem ret
writebaop28: mov ebp,esp
 sub ebp,1200
 mov [ebp+1804],eax
 mov ecx,[ebp+1972]
 mov [ebp+1820],ecx
 mov [ebp+1836],ecx
writebaol28: mov ecx,[ebp+1972]
 mov eax,[ebp+1968]
 mov edi,ecx
 mov esi,ecx
 xor edx,edx
 add esi,[ebp+1836]
 mov ebx,[ebp+2008]
 sub ebx,8192
writebail28: mov dl,[ebx+esi*1+fdimg2880]
 mov [ebp+edi*1+1200],dl
 add esi,eax
 add edi,eax
 add ecx,eax
 cmp ecx,[ebp+1756]
 js writebail28
 mov eax,[ebp+1972]
 lea ecx,[ebp+1772]
 mov edx,[ebp+1756]
 lea esi,[ebp+1200]
 mov edi,[ebp+1804]
; line 01162
 mov eax,[ebp+1956]
 mov ecx,[ebp+1972]
 push ecx
 push edx
 push esi
 push edi
 push eax
 call twioswitch
; push eax
; push ecx
; push edx
; push esi
; push edi
; mov esi,[ebp+1740]
; lea eax,[esi+writebare28]
; add esi,[ebp+1788]
; mov ecx,[esi+wiowrt04]
; push eax
; push ecx
; rem ret
writebare28: mov ebp,esp
 sub ebp,1200
 mov edx,[ebp+1756]
 add [ebp+1836],edx
 mov ecx,[ebp+1820]
 add ecx,[ebp+1968]
 mov [ebp+1820],ecx
 cmp ecx,2880
 jns writebach28
 jmp writebaol28
writebach28: mov eax,[ebp+1804]
; mov esi,[ebp+1740]
; lea ecx,[esi+writebacl28]
; add esi,[ebp+1788]
; mov edx,[esi+wiocls06]
 mov ecx,[ebp+1948]
 mov edx,[ebp+1972]
 push edx
 push edx
 push edx
 push eax
 push ecx
 call twioswitch
; push eax
; push ecx
; push edx
; ret
writebacl28: mov ebp,esp
 sub ebp,1200
 mov esi,[ebp+1976]
 mov edi,[ebp+2004]
 mov [ebp+2008],esi
 mov [ebp+2012],edi
 add esp,[ebp+1724]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of writeback28
; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 5445
; int getbase4(char* gb4base,int gb4sub0);
; 1004 retad    1008 *gb4base    1012 gb4sub0
; 988 ebx    992 esi    996 edi    1000 ebp
; 972 0      976 eax    980 ecx     984 edx
; 956 4      960 3      964 2       968 1
; 940 8      944 7      948 6       952 5
; 924 12     928 11     932 10      936
; 908 16     912 15     916 14      920 espaddend
getbase4: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 clc
 xor edi,edi
 xor edi,edi
 add edi,1017
 mov edx,edi
 sub edx,1016
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
getbapu4: push ebx
 add ebx,edx
 sub ecx,edx
 jnz getbapu4
 mov [ebp+920],eax
 mov ebx,[ebp+1008]
 mov ecx,[ebp+964]
 mov esi,[ebp+1012]
 mov edi,esi
 shr esi,cl
 and edi,[ebp+960]
 add edi,edi
 mov ecx,[ebp+948]
 sub ebx,4800
 xor edx,edx
 mov dl,[ebx+esi*1+4800]
 sub ecx,edi
 jz getande4
 shr edx,cl
getande4: and edx,[ebp+960]
 mov [ebp+1008],edx
 mov ecx,[ebp+1004]
 mov [ebp+1012],ecx
 add esp,[ebp+920]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of getbase4
; int monochdex(lnes *cmchd, int x20, int y30)
; 1004 retad   1008 *cmchd  1012 x20    1016 y30
;  988 ebx      992 esi      996 edi    1000 ebp
;  972 0        976 eax      980 ecx     984 edx
;  956 4        960 3        964 2       968 1
;  940 8        944 7        948 6       952 5
;  924 12       928 11       932 10      936 9
;  908 16       912 15       916 14      920 13
;  892 20       896 19       900 18      904 17
;  876 24       880 23       884 22      888 wherevardib
;  860 28       864 27       868 26      872 25
;  844 32       848 31       852 30      856
;  828 36       832 35       836 34      840 33
;  812 40       816 39       820 38      824 baseofline
;  796 44       800 43       804 42      808 41
;  780 48       784 47       788 46      792 bytewid
;  764 52       768 51       772 50      776 49
;  748 56       752 55       756 54      760 (biheight-2)-(2*y30)
;  732 60       736 59       740 58      744 57
;  716 64       720 63       724 62      728 espaddend
monochdex: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 clc
 xor edi,edi
 add edi,1065
 mov edx,edi
 sub edx,1064
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
monochdpu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz monochdpu
 mov [ebp+728],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 lea edi,[ebx+vardib]
 mov [ebp+888],edi
 mov esi,[ebp+884]
 xor edx,edx
 mov dl,[ebx+esi*1+vardib]
 mov edi,[ebp+1016]
 add edi,edi
 sub edx,[ebp+964]
 sub edx,edi
; edx = (biheight - 2) - (2 * y30)
 mov [ebp+760],edx
 xor edx,edx
 mov esi,[ebp+896]
 mov dl,[ebx+esi*1+vardib]
 sub esi,[ebp+968]
 mov ecx,[ebp+940]
 shl edx,cl
 mov dl,[ebx+esi*1+vardib]
 add edx,[ebp+848]
 mov ecx,[ebp+952]
 shr edx,cl
 add edx,edx
 add edx,edx
 mov [ebp+792],edx
 mov eax,[ebp+760]
 push edx
 push eax
 call nampy
 add eax,[ebp+724]
 mov [ebp+824],eax
 mov esi,[ebp+824]
 add esi,[ebp+888]
 mov edi,esi
 add edi,[ebp+792]
 mov ecx,[ebp+1012]
 or ecx,ecx
 push ecx
 push esi
 call getbase4
 mov edx,eax
 add edx,edx
 add edx,edx
 push ecx
 push edi
 call getbase4
 add edx,eax
 mov [ebp+1012],edx
 mov edi,[ebp+1004]
 mov [ebp+1016],edi
 add esp,[ebp+728]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 ret
; bottom of monochdex
; int thirdofline(lnes* thirdl,y0of3,*optrt)
; 1004 retad   1008 *thirdl  1012 y0of3    1016 *optrt
;  988 ebx      992 esi      996 edi    1000 ebp
;  972 0        976 eax      980 ecx     984 edx
;  956 4        960 3        964 2       968 1
;  940 8        944 7        948 6       952 5
;  924 12       928 11       932 10      936 9
;  908 16       912 15       916 14      920 13
;  892 20       896 19       900 18      904 17
;  876 24       880 23       884 22      888
;  860 28       864 27       868 26      872 25
;  844 32       848 31       852 30      856 nibwid
;  828 36       832 35       836 34      840 33
;  812 40       816 39       820 38      824 codeaddr
;  796 44       800 43       804 42      808 41
;  780 48       784 47       788 46      792
;  764 52       768 51       772 50      776 49
;  748 56       752 55       756 54      760
;  732 60       736 59       740 58      744 57
;  716 64       720 63       724 62      728 espaddend
thirdofline: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 xor edi,edi
 add edi,1065
 mov edx,edi
 sub edx,1064
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
thirdoflipu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz thirdoflipu
 mov [ebp+728],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 xor edi,edi
 push edi
 call getreala
 mov [ebp+824],eax
 xor edx,edx
 mov esi,[ebp+896]
 mov dl,[ebx+esi*1+vardib]
 mov ecx,[ebp+940]
 shl edx,cl
 sub esi,[ebp+968]
 mov dl,[ebx+esi*1+vardib]
 add edx,[ebp+968]
 shr edx,1
 mov [ebp+856],edx
 mov ecx,[ebp+972]
 mov edi,[ebp+1016]
 sub edi,1024
 mov ebx,[ebp+824]
thirdofloop: mov eax,[ebp+1012]
 mov edx,[ebp+1008]
 push eax
 push ecx
 push edx
 call monochdex
 mov esi,[ebp+912]
 sub esi,eax
 mov edx,[ebx+esi*4+outpixtable]
 mov [edi+1024],edx
 add ecx,[ebp+968]
 add edi,[ebp+956]
 cmp ecx,[ebp+856]
 js thirdofloop
 sub edi,[ebp+956]
 mov ecx,[ebp+856]
thirdlenloop: mov edx,[edi+1024]
 cmp edx,[ebp+844]
 jnz thirdlenbot
 sub edi,[ebp+956]
 sub ecx,[ebp+968]
 cmp ecx,[ebp+904]
 jns thirdlenloop
thirdlenbot: mov esi,[ebp+1004]
 mov [ebp+1016],esi
 mov [ebp+1012],ecx
 add esp,[ebp+728]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 ret
; bottom of thirdofline
; void wvirtline(lnes*wvli,int yl0,int linehandle_
; 1004 retad   1008 *wvli  1012 yl0    1016 linehandle
;  988 ebx      992 esi      996 edi    1000 ebp
;  972 0        976 eax      980 ecx     984 edx
;  956 4        960 3        964 2       968 1
;  940 8        944 7        948 6       952 5
;  924 12       928 11       932 10      936 9
;  908 16       912 15       916 14      920 13
;  892 20       896 19       900 18      904 17
;  876 24       880 23       884 22      888 linectr
;  860 28       864 27       868 26      872 25
;  844 32       848 31       852 30      856 actlen856
;  828 36       832 35       836 34      840 33
;  812 40       816 39       820 38      824 virtlen824
;  796 44       800 43       804 42      808 41
;  780 48       784 47       788 46      792 linelocptr
;  764 52       768 51       772 50      776 49
;  748 56       752 linelen1     756 linelen2    760 linelen3
;  732 60       736 59       740 58      744 57
;  716 64       720 63       724 62      728 espaddend
wvirtline: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1065
 mov edx,edi
 sub edx,1064
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
wvirtlipu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz wvirtlipu
 mov [ebp+728],eax
 mov ebx,[ebp+1008]
 xor ecx,ecx
 sub ebx,8192
 lea edi,[ebx+threelines]
wvirtloopa: mov eax,[ebp+1012]
 mov edx,[ebp+960]
 mov esi,[ebp+1008]
 push edx
 push eax
 call nampy
 add eax,ecx
 push edi
 push eax
 push esi
 call thirdofline
 add ecx,[ebp+968]
 mov esi,ecx
 mov [ebp+esi*4+748],eax
 add edi,2056
 cmp ecx,[ebp+960]
 js wvirtloopa
 xor ecx,ecx
 xor edx,edx
wvirtloopb: mov esi,ecx
 mov eax,[ebp+esi*4+752]
 cmp edx,eax
 jns wvirtloopc
 mov edx,eax
wvirtloopc: add ecx,[ebp+968]
 cmp ecx,[ebp+960]
 js wvirtloopb
 mov [ebp+824],edx
 xor edx,edx
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov esi,[ebp+896]
 mov dl,[ebx+esi*1+vardib]
 mov ecx,[ebp+940]
 shl edx,cl
 sub esi,[ebp+968]
 mov dl,[ebx+esi*1+vardib]
 add edx,[ebp+968]
 shr edx,1
 mov [ebp+856],edx
 mov ecx,[ebp+856]
 mov edx,[ebp+824]
 add edx,[ebp+964]
 xor eax,eax
 cmp eax,[ebx+nzalways0d0a]
 jnz mandwvl0d0a
 cmp ecx,edx
 js wvirtviod
mandwvl0d0a: mov [ebp+856],edx
 mov edx,[ebp+824]
 add edx,edx
 add edx,edx
 mov edi,edx
 mov ecx,[ebp+972]
 mov eax,[ebp+920]
 mov edx,[ebp+932]
virtloope: mov [ebx+edi*1+threelines],eax
 add edi,[ebp+956]
 mov [ebx+edi*1+threelines],edx
 add edi,2052
 add ecx,[ebp+968]
 cmp ecx,[ebp+960]
 js virtloope
wvirtviod: lea edi,[ebx+threelines]
 mov [ebp+792],edi
 xor ecx,ecx
 mov [ebp+888],ecx
 xor ecx,ecx
 jnz virtboth
virtloph: mov ecx,[ebp+792]
 mov edx,[ebp+856]
 add edx,edx
 add edx,edx
 mov eax,[ebp+956]
 mov ebx,[ebp+1016]
 xor esi,esi
 push esi
 push edx
 push ecx
 push ebx
 push eax
 call twioswitch
 add dword [ebp+792],2056
 mov ecx,[ebp+888]
 add ecx,[ebp+968]
 mov [ebp+888],ecx
 cmp ecx,[ebp+960]
 js virtloph
virtboth: mov esi,[ebp+1004]
 mov ecx,[ebp+976]
 mov [ebp+1012],ecx
 mov [ebp+1016],esi
 add esp,[ebp+728]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 ret
; bottom of wvirtline
; -------------------
; void wvirtpage(lnes*wpgey)
; 1004 retad    1008 *wpgey
;  988 ebx      992 esi      996 edi    1000 ebp
;  972 0        976 eax      980 ecx     984 edx
;  956 4        960 3        964 2       968 1
;  940 8        944 7        948 6       952 5
;  924 12       928 11       932 10      936 9
;  908 16       912 15       916 14      920 13
;  892 20       896 19       900 18      904 17
;  876 24       880 23       884 22      888 pgheight
;  860 28       864 27       868 26      872 25
;  844 32       848 31       852 30      856
;  828 36       832 35       836 34      840 33
;  812 40       816 39       820 38      824
;  796 44       800 43       804 42      808 41
;  780 48       784 47       788 46      792
;  764 52       768 51       772 50      776 49
;  748 56       752          756         760
;  732 60       736 59       740 58      744 57
;  716 64       720 63       724 62      728 espaddend
wvirtpage: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 clc
 xor edi,edi
 add edi,1065
 mov edx,edi
 sub edx,1064
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
wvirtpapu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz wvirtpapu
 mov [ebp+728],eax
 mov ebx,[ebp+1008]
 mov edi,ebx
 sub ebx,8192
 xor edx,edx
 mov esi,[ebp+884]
 mov dl,[ebx+esi*1+vardib]
 mov ecx,[ebp+948]
 push ecx
 push edx
 call smposdiv
 mov [ebp+888],eax
 mov ecx,[ebp+972]
 mov esi,[ebp+968]
wvpagelopa: xor edx,edx
 push esi
 push ecx
 push edi
 call wvirtline
 add ecx,[ebp+968]
 cmp ecx,[ebp+888]
 js wvpagelopa
 mov esi,[ebp+976]
 mov edi,[ebp+1004]
 mov [ebp+1004],esi
 mov [ebp+1008],edi
 add esp,[ebp+728]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 ret
; bottom of wvirtpage
; xxxxxxxxxxxxxxxxxxxx
; int getakey()
; 992 esi    996 edi   1000 ebp   1004 retad
; 976 eax    980 ecx    984 edx    988 ebx
; 960 3      964 2      968 1      972 0
; 944        948        952 5      956 4
; 928        932        936        940 8
; 912    916 codeaddr   920 cst54   924 12
; 896 19   900 espadd   904 lookey   908 16
; 880 23    884 22    888 21      892 20
; 680 buff_200
getakey: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 xor eax,eax
 push eax
 xor ebx,ebx
 clc
 xor edi,edi
 xor edi,edi
 add edi,1074
 mov edx,edi
 sub edx,1073
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
getakpu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz getakpu
 mov [ebp+900],eax
 mov ecx,edi
 sub ecx,1020
 mov [ebp+920],ecx
 xor eax,eax
 push eax
 call getreala
; rem add esp,[ebp+956]
 mov [ebp+916],eax
 mov edi,[ebp+916]
 xor ecx,ecx
 mov [ebp+904],ecx
; ----------------
 xor esi,esi
 lea edx,[ebp+680]
 mov ecx,[edi+tcgets]
 mov ebx,[ebp+972]
 mov eax,[ebp+920]
 push esi
 push edx
 push ecx
 push ebx
 push eax
 call twioswitch
; rem add esp,[ebp+892]
; rem call uekioctl
; rem add esp,[ebp+892]
; add esp,[ebp+956]
 add esp,[ebp+972]
; rem add esp,[ebp+908]
 mov esi,[ebp+924]
 mov ecx,[ebp+esi*1+680]
; --------------------------  and
 and ecx,[edi+icannonand]
 and ecx,[edi+echoand]
; --
 mov [ebp+esi*1+680],ecx
 mov eax,[ebp+920]
 mov ebx,[ebp+972]
 mov ecx,[edi+tcsets]
 lea edx,[ebp+680]
 xor esi,esi
 push esi
 push edx
 push ecx
 push ebx
 push eax
 call twioswitch
; call uekioctl
; rem add esp,[ebp+892]
; add esp,[ebp+956]
; add esp,[ebp+972]
; add esp,[ebp+908]
; -----------------                             -- LR
 xor esi,esi
 mov edx,[ebp+968]
 lea ecx,[ebp+904]
 mov ebx,[ebp+972]
 mov eax,[ebp+960]
 push esi
 push edx
 push ecx
 push ebx
 push eax
 call twioswitch
; call uekread
; rem add esp,[ebp+892]
; add esp,[ebp+956]
; add esp,[ebp+972]
; add esp,[ebp+908]
; ----------------
 xor esi,esi
 lea edx,[ebp+680]
 mov ecx,[edi+tcgets]
 mov ebx,[ebp+972]
 mov eax,[ebp+920]
 push esi
 push edx
 push ecx
 push ebx
 push eax
 call twioswitch
; call uekioctl
; rem add esp,[ebp+892]
; add esp,[ebp+956]
; add esp,[ebp+972]
; add esp,[ebp+908]
 mov esi,[ebp+924]
 mov ecx,[ebp+esi*1+680]
; --------------------------  or
 or ecx,[edi+icannonor]
 or ecx,[edi+echoor]
; --
 mov [ebp+esi*1+680],ecx
 mov eax,[ebp+920]
 mov ebx,[ebp+972]
 mov ecx,[edi+tcsets]
 lea edx,[ebp+680]
 xor esi,esi
 push esi
 push edx
 push ecx
 push ebx
 push eax
 call twioswitch
; call uekioctl
; rem add esp,[ebp+892]
; add esp,[ebp+956]
; add esp,[ebp+972]
; add esp,[ebp+908]
; -----------------                             -- LR
 mov ecx,[ebp+904]
 mov [ebp+976],ecx
 add esp,[ebp+900]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of getakey
; int  getbkey()
; 992 esi        996 edi     1000 ebp    1004 retad
; 976 eax        980 ecx      984 edx     988 ebx
; 960 3          964 2        968 1       972 0
; 944 7          948 6        952 5       956 4
; 928 11         932 10       936 9       940 8
; 912 15         916 14       920 13      924 12
; 896 loolimit   900 18       904 17      908 16
; 880 espadd     884 22       888 21      892 20
; 864 27         868 cst256   872 25      876 24
; 848 31       852 loopkey    856 29      860 28
; 832 35         836 34       840 33      844 32
; 816 39         820 38       824 37      828 36
; 800 43         804 42       808 41      812 40
; 784 47         788 46       792 45      796 44
; 768 51         772 50       776 49      780 48
; 752 55         756 54       760 53      764 52
; 736 59         740 58       744 57      748 56
getbkey: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 xor eax,eax
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1060
 mov ecx,edi
 sub ecx,1000
 mov edx,edi
 sub edx,1059
 mov eax,ecx
 add eax,eax
 add eax,eax
getbkpu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz getbkpu
 mov [ebp+880],eax
 xor ebx,ebx
 mov [ebp+852],ebx
 mov ecx,edi
 sub ecx,804
 mov [ebp+868],ecx
 mov esi,[ebp+968]
 mov [ebp+896],esi
getbkoop: mov eax,[ebp+868]
 mov esi,[ebp+852]
 push eax
 push esi
 call nampy
; rem add esp,[ebp+940]
 mov [ebp+852],eax
 call getakey
 mov esi,[ebp+868]
 sub esi,[ebp+968]
 and esi,eax
 add [ebp+852],esi
 add ebx,[ebp+968]
 cmp ebx,[ebp+968]
 jne getbk02
 cmp esi,[ebp+864]
 jne getbk02
 mov eax,[ebp+960]
 mov [ebp+896],eax
getbk02: cmp ebx,[ebp+964]
 jne getbk03
 cmp esi,[ebp+864]
 jne getbk03
 mov eax,[ebp+964]
 mov [ebp+896],eax
getbk03: cmp ebx,[ebp+960]
 jne getbk04
 cmp esi,[ebp+780]
 js getbk04
 cmp esi,[ebp+736]
 jns getbk04
 mov eax,[ebp+956]
 mov [ebp+896],eax
getbk04: cmp ebx,[ebp+896]
 jns skip1544
 jmp getbkoop
skip1544: mov esi,[ebp+852]
 mov edx,esi
 xor ecx,ecx
 add ecx,1127
 sub ecx,1000
 cmp esi,ecx
 jnz skip1552
 mov edx,[ebp+940]
skip1552: cmp esi,001B1Bh
 jnz skip1555
 mov edx,[ebp+864]
skip1555: cmp esi,001B5B44h
 jnz skip1559
 xor edx,edx
 add edx,044bh
skip1559: cmp esi,001B5B41h
 jnz skip1563
 xor edx,edx
 add edx,0448h
skip1563: cmp esi,001B5B42h
 jnz skip1567
 xor edx,edx
 add edx,0450h
skip1567: cmp esi,001B5B43h
 jnz skip1571
 xor edx,edx
 add edx,044Dh
skip1571: cmp esi,01B5B337Eh
 jnz skip1575
 xor edx,edx
 add edx,0453h
skip1575: cmp esi,01B5B327Eh
 jnz skip1579
 xor edx,edx
 add edx,0452h
skip1579: cmp esi,001B5B48h
 jnz skip1583
 xor edx,edx
 add edx,0447h
skip1583: cmp esi,001B5B46h
 jnz skip1587
 xor edx,edx
 add edx,044Fh
skip1587: cmp esi,01B5B357Eh
 jnz skip1591
 xor edx,edx
 add edx,0449h
skip1591: cmp esi,01B5B367Eh
 jnz skip1595
 xor edx,edx
 add edx,0451h
skip1595: cmp esi,01B5B317Eh
 jnz skip1599
 xor edx,edx
 add edx,0447h
skip1599: cmp esi,01B5B347Eh
 jnz skip1603
 xor edx,edx
 add edx,044Fh
skip1603: cmp esi,001B4F48h
 jnz skip1607
 xor edx,edx
 add edx,0447h
skip1607: cmp esi,001B4F46h
 jnz skip1611
 xor edx,edx
 add edx,044Fh
skip1611: xor ecx,ecx
 mov [ebp+976],edx
; -------
; -------
 add esp,[ebp+880]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of getbkey
; int getckey()
; 1004 retad
; 988 ebx     992 esi    996 edi     1000 ebp
; 972 0       976 eax    980 ecx     984 edx
; 956 4       960 3      964 2       968 1
; 940 8       944 7      948 6       952 espaddend
; 924 12      928 11     932 10      936 asciikey
; 908 16      912 15     916 14      920 13
getckey: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1511
 mov ecx,edi
 sub ecx,1494
 mov eax,ecx
 add eax,eax
 add eax,eax
 mov edx,edi
 sub edx,1510
getckpu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz getckpu
 mov [ebp+952],eax
 xor eax,eax
 push eax
 call getreala
 mov ebx,eax
 call getbkey
 mov [ebp+936],eax
;  xor esi,esi
; jz getckne
; cmp eax,[ebp+932]
; jnz getckne
; mov eax,[ebp+920]
; getckne: mov [ebp+936],eax
 mov esi,eax
 mov ecx,edi
 sub ecx,1384
 and esi,ecx
 xor edx,edx
 mov dl,[ebx+esi*1+revtab12]
 mov [ebp+976],edx
 mov ecx,edi
 sub ecx,1000
 mov edx,[ebp+936]
 cmp edx,ecx
 js getckot
 and edx,ecx
 mov [ebp+976],edx
getckot: add esp,[ebp+952]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of getckey
; int getdkey()
; 1004 retad
; 988 ebx     992 esi    996 edi     1000 ebp
; 972 0       976 eax    980 ecx     984 edx
; 956 4       960 3      964 2       968 1
; 940 8       944 7      948 6       952 espaddend
; 924 12      928 11     932 10      936 bioskey
; 908 16      912 15     916 localshif      920 13
getdkey: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1511
 mov ecx,edi
 sub ecx,1494
 mov eax,ecx
 add eax,eax
 add eax,eax
 mov edx,edi
 sub edx,1510
getdkpu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz getdkpu
 mov [ebp+952],eax
 xor eax,eax
 push eax
 call getreala
 mov ebx,eax
 call getckey
 mov esi,[ebp+968]
 mov edx,esi
 mov [ebp+916],edx
 mov esi,eax
 mov ecx,edi
 sub ecx,1384
 and esi,ecx
 mov [ebp+936],esi
 add ecx,edx
 and ecx,eax
 jnz getdkns
 xor edx,edx
 mov [ebp+916],edx
getdkns: xor edx,edx
 mov esi,[ebp+936]
 mov dl,[ebx+esi*1+biostolnx]
 mov esi,edx
 xor edx,edx
 mov dl,[ebx+esi*1+bamkeylnxtow]
 mov esi,edx
 xor edx,edx
 cmp edx,[ebp+916]
 jz getdklc
 mov ecx,edi
 sub ecx,1255
; sub ecx,1385
 add esi,ecx
getdklc: mov dl,[ebx+esi*1+wdkey000]
 mov ecx,edi
 sub ecx,1383
 and ecx,edx
 jz getdkna
 xor ecx,ecx
 add edx,896
getdkna: mov [ebp+976],edx
 add esp,[ebp+952]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of getdkey
; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
; void bgcolorset(int handle3,int bgcolor)
; 1004 retad      1008 handle3        1012 bgcolor
; 988 ebx      992 esi      996 edi      1000 ebp
; 972 0        976 eax      980 ecx       984 edx
; 956 4        960 3        964 2         968 1
; 940 8        944 7        948 6         952 5
; 924 12       928 11       932 10        936 9
; 908 16       912 15       916 14        920 13
; 892 20       896 19       900 18        904
; 876 24       880 23       884 22        888
; 860 28       864 27       868 26        872 bwv
; 844 32       848 31       852 30        856 espaddend
; 828 36       832 35 #     836 34 quoteuc    840 33
; 812 40 (     816 39 quotelc   820 38 &      824 37 %
; 796 44 ,     800 43 +     804 42 *      808 41 )
; 780 48 0     784 47 /     788 46 .      792 45 -
; 764 52 4     768 51 3     772 50 2      776 49 1
; 748 56 8     752 55 7     756 54 6      760 53 5
; 732 60       736 59 ;     740 58 :      744 57 9
; 716 64 @     720 63 ?     724 62        728 61 =
; 700 68 D     704 67 C     708 66 B      712 65 A
; 684 72 H     688 71 G     692 70 F      696 69 E
; 668 76 L     672 75 K     676 74 J      680 73 I
; 652 80 P     656 79 O     660 78 N      664 77 M
; 636 84 T     640 83 S     644 82 R      648 81 Q
; 620 88 X     624 87 W     628 86 V      632 85 U
; 604 92       608 91 [     612 90 Z      616 89 Y
; 588 96 quotere  592 95 _    596 94 ^    600 93 ]
; 572 100 d    576 99 c     580 98 b      584 97 a
; 556 104 h    560 103 g    564 102 f     568 101 e
; 540 108 l    544 107 k    548 106 j     552 105 i
; 524 112 p    528 111 o    532 110 n     536 109 m
; 508 116 t    512 115 s    516 114 r     520 113 q
; 492 120 x    496 119 w    500 118 v     504 117 u
; 476 124 |    480 123 {    484 122 z     488 121 y
; 460 128      464 127      468 126 ~     472 125 }
; 360 153_line_25
bgcolorset: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1154
 mov edx,edi
 sub edx,1153
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
bgcolorspu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz bgcolorspu
 mov [ebp+856],eax
; esc [ ps ; ps m
; xor eax,eax
; push eax
; call getreala
; mov ebx,eax
; e[37;41m
; 12345678
 xor eax,eax
 xor edx,edx
 mov al,[ebp+744]
 mov dl,[ebp+772]
 mov [ebp+872],al
 mov [ebp+873],dl
 mov al,[ebp+864]
 mov dl,[ebp+608]
 mov [ebp+360],al
 mov [ebp+361],dl
 lea eax,[ebp+872]
 mov ecx,[ebp+824]
 mov edx,[ebp+960]
 lea edi,[ebp+360]
 push eax
 push ecx
 push edx
 push edi
 call chnvalue
 xor edx,edx
 mov dl,[ebp+736]
 mov [ebp+364],dl
 mov ecx,[ebp+1012]
 add ecx,[ebp+812]
 lea eax,[ebp+872]
 mov edx,[ebp+948]
 lea edi,[ebp+360]
 push eax
 push ecx
 push edx
 push edi
 call chnvalue
 xor edx,edx
 mov dl,[ebp+536]
 mov [ebp+367],dl
 xor esi,esi
 mov edx,[ebp+940]
 lea ecx,[ebp+360]
 mov edi,[ebp+1008]
 mov eax,[ebp+956]
 push esi
 push edx
 push ecx
 push edi
 push eax
 call twioswitch
 mov edi,[ebp+1004]
 mov esi,[ebp+976]
 mov [ebp+1012],edi
 mov [ebp+1008],esi
 add esp,[ebp+856]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of bgcolorset
; void dwroneline(*array_1008,lbase0,curse1,b80w,han_1024,curcolor1028)
; 1020 b80w     1024 han1024      1028 curcolor    1032 isnz0d0a
; 1004 retad    1008 *array_1008    1012 lbase0    1016 curse1
; 988 ebx       992 esi        996 edi       1000 ebp
; 972 0         976 eax        980 ecx       984 edx
; 956 4         960 3          964 2         968 1
; 940 8         944 7          948 6         952 5
; 924 12        928 11         932 10        936 9
; 908 16        912 15         916 14        920 13
; 892 20        896 19         900 18        904 17
; 876 24        880 23         884 22        888 *endofline
; 860 28        864 27         868           872 lenleft
; 844 32        848 31         852           856 lenline
; 828 36        832 35         836           840 lenright
; 812 40        816 39         820           824 espaddend
; 796 44        800 43         804 42        808 cursdisp
; 780 48        784 47         788 46        792
dwroneline: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1049
 mov edx,edi
 sub edx,1048
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
dwronelipu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz dwronelipu
 mov [ebp+824],eax
 mov ebx,[ebp+1008]
 add ebx,[ebp+1012]
 sub ebx,1400
 mov esi,[ebp+1020]
 mov ecx,esi
 xor edx,edx
dwronelen: sub esi,[ebp+968]
 mov dl,[ebx+esi*1+1400]
 cmp edx,[ebp+844]
 jnz drwoneleb
 mov ecx,esi
 cmp ecx,[ebp+964]
 js drwoneleb
 xor edx,edx
 jz dwronelen
drwoneleb: mov [ebp+856],ecx
 xor edx,edx
 mov [ebp+872],edx
 mov [ebp+840],edx
 mov edi,[ebp+1016]
 sub edi,[ebp+968]
 mov [ebp+808],edi
 xor edx,edx
 xor eax,eax
 mov eax,[ebp+920]
 mov edx,[ebp+932]
 mov [ebp+889],al
 mov [ebp+890],dl
 mov eax,[ebp+844]
 mov [ebp+888],al
 mov ecx,[ebp+808]
 mov edi,[ebp+1020]
 sub edi,[ebp+952]
 cmp edi,ecx
 js nocursedwr
 cmp ecx,[ebp+972]
 js nocursedwr
 mov [ebp+872],ecx
 mov edx,ecx
 add edx,[ebp+964]
 cmp edx,[ebp+856]
 js dwrkeelen
 mov [ebp+856],edx
dwrkeelen: mov edi,[ebp+856]
 sub edi,[ebp+872]
 sub edi,[ebp+968]
 mov [ebp+840],edi
 xor ecx,ecx
 jz dwrdonele
nocursedwr: mov edi,[ebp+856]
 mov [ebp+872],edi
dwrdonele: mov edi,[ebp+872]
 cmp edi,[ebp+968]
 js nolecolor
 mov eax,[ebp+972]
 mov ecx,[ebp+1024]
 push eax
 push ecx
 call bgcolorset
; xxxxxxxxxxxxxxxxxxxxx
 xor esi,esi
 mov edx,[ebp+872]
 lea ecx,[ebx+1400]
 mov edi,[ebp+1024]
 mov eax,[ebp+956]
 push esi
 push edx
 push ecx
 push edi
 push eax
 call twioswitch
nolecolor: mov edi,[ebp+840]
 cmp edi,[ebp+968]
 jns iscursedw
 jmp nocursedw
iscursedw: mov eax,[ebp+1028]
 mov ecx,[ebp+1024]
 push eax
 push ecx
 call bgcolorset
 xor esi,esi
 mov edx,[ebp+968]
 lea ecx,[ebx+1400]
 add ecx,[ebp+872]
 mov edi,[ebp+1024]
 mov eax,[ebp+956]
 push esi
 push edx
 push ecx
 push edi
 push eax
 call twioswitch
 mov eax,[ebp+972]
 mov ecx,[ebp+1024]
 push eax
 push ecx
 call bgcolorset
 xor esi,esi
 mov edx,[ebp+840]
 lea ecx,[ebx+1400]
 add ecx,[ebp+872]
 add ecx,[ebp+968]
 mov edi,[ebp+1024]
 mov eax,[ebp+956]
 push esi
 push edx
 push ecx
 push edi
 push eax
 call twioswitch
nocursedw: xor edi,edi
 lea ecx,[ebp+889]
 mov edx,[ebp+964]
 cmp edi,[ebp+1032]
 jnz mandtex0d0a
; --------------
bnocursedw: mov edi,[ebp+1020]
 sub edi,[ebp+968]
 mov edx,[ebp+968]
 lea ecx,[ebp+888]
 mov esi,[ebp+856]
 cmp esi,edi
 jns dwrtoob1
 mov edx,[ebp+964]
 lea ecx,[ebp+889]
dwrtoob1: cmp esi,[ebp+1020]
 jns dwrtoob2
; ----------------------
mandtex0d0a: xor esi,esi
 mov edi,[ebp+1024]
 mov eax,[ebp+956]
 push esi
 push edx
 push ecx
 push edi
 push eax
 call twioswitch
dwrtoob2: mov esi,[ebp+976]
 mov edi,[ebp+1004]
 mov [ebp+1028],esi
 mov [ebp+1032],edi
 add esp,[ebp+824]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 pop eax
 pop eax
 pop eax
 pop eax
 ret
; bottom of dwroneline
; drawtexapage(lnes* pgptr)
; 1004 retad    1008 *pgptr
; 988 ebx       992 esi        996 edi       1000 ebp
; 972 0         976 eax        980 ecx       984 edx
; 956 4         960 3          964 2         968 1
; 940 8         944 7          948 6         952 5
; 924 12        928 11         932 10        936 9
; 908 16        912 15         916 14        920 13
; 892 20        896 19         900 18        904 17
; 876 24        880 23         884 22        888 lineloc
; 860 28        864 27         868           872
; 844 32        848 31         852           856
; 828 36        832 35         836           840 linectr
; 812 40        816 39         820           824 espaddend
; 796 44        800 43         804 42        808 cursor
; 780 48        784 47         788 46        792
drawtexapage: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1049
 mov edx,edi
 sub edx,1048
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
drawtexapapu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz drawtexapapu
 mov [ebp+824],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 lea esi,[ebx+evwr]
 mov edx,[ebp+968]
 mov [ebp+840],edx
drawtexatop: mov ecx,[ebx+ypheight]
 add ecx,[ebp+968]
 cmp ecx,[ebp+840]
 jns drawtexamid
 jmp drawtexabot
drawtexamid: mov eax,[ebx+a80w]
 mov edx,[ebp+840]
 sub edx,[ebp+968]
 push eax
 push edx
 call nampy
 mov [ebp+888],eax
 mov ecx,[ebp+972]
 mov [ebp+808],ecx
 mov edx,[ebx+onecurwozy]
 cmp edx,[ebp+840]
 jnz drawtexacurs
 mov eax,[ebx+onecurwozx]
 mov [ebp+808],eax
 mov eax,[ebp+960]
 mov ecx,[ebp+972]
 cmp ecx,[ebx+insertype]
 jz drawtexanorm
drawtexacurs: mov eax,[ebp+968]
drawtexanorm: mov ecx,[ebx+a80w]
 mov edx,[ebx+nzalways0d0a]
 push edx
 mov edx,[ebp+808]
 mov edi,[ebp+888]
 push eax
 mov eax,[ebp+968]
 push eax
 push ecx
 push edx
 push edi
 push esi
 call dwroneline
 mov edx,[ebp+968]
 add [ebp+840],edx
 xor ecx,ecx
 jmp drawtexatop
drawtexabot: mov esi,[ebp+976]
 mov edi,[ebp+1004]
 mov [ebp+1004],esi
 mov [ebp+1008],edi
 add esp,[ebp+824]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 ret
; bottom of drawtexapage
; -------------------------------------------------------
; int wdoskey(int rawkey,int nzzshift)
; 1004 retad    1008 rawkey    1012 nzzshift
; 992 esi        996 edi       1000 ebpsave
; 980 ecx        984 edx        988 ebx
; 968 1        972 0        976 result
; 956 4        960 3        964 2
; 944 7        948 cst255    952 cst127
; 932 10        936 tableloc    940 8
wdoskey: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 xor eax,eax
 push eax
 xor edx,edx
 add edx,1001
 mov ecx,edx
 sub edx,1000
 sub ecx,990
wdoskepu: push eax
 add eax,edx
 sub ecx,edx
 jnz wdoskepu
 xor edi,edi
 add edi,1255
 mov ecx,edi
 sub ecx,1000
 mov [ebp+948],ecx
 mov ecx,edi
 sub ecx,1128
 mov [ebp+952],ecx
 xor edx,edx
 push edx
 call getreala
; rem add esp,[ebp+956]
 mov esi,eax
 lea edx,[esi+wdkey000]
 mov [ebp+936],edx
 xor ebx,ebx
 mov ecx,[ebp+960]
 and ecx,[ebp+1012]
 jz wdoskeb
 add ebx,[ebp+968]
 add ebx,[ebp+948]
; 256 = 968 + 948
 mov ecx,[ebp+964]
 and ecx,[ebp+1012]
 jz wdoskeb
 add ebx,ebx
wdoskeb: add ebx,[ebp+936]
 sub ebx,1000
 mov esi,[ebp+1008]
 and esi,[ebp+948]
 xor edx,edx
 mov dl,[ebx+esi*1+1000]
 and edx,[ebp+952]
 mov [ebp+976],edx
; 2+7+6+6+2+2+2+6+6+6
 xor eax,eax
 mov al,[ebx+esi*1+1000]
 mov edx,[ebp+968]
 add edx,[ebp+952]
; 128 = 968 + 952
 and edx,eax
 jz wdosyorm
 xor edx,edx
 add edx,3024
 sub edx,2000
 add [ebp+976],edx
wdosyorm: xor ecx,ecx
 add ecx,1044
 sub ecx,1000
 mov eax,[ebp+976]
 mov esi,[ebp+1004]
 mov [ebp+1012],esi
 mov [ebp+1008],eax
 add esp,ecx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of wdoskey
; surgery at 6127 to
; void stdcall tnibble56(mod56,*lpival,lpbybase,lpnibzub)
; 1008 mod56   1012 *lpival   1016 lpbybase   1020 lpnibzub
; 992 esi     996 edi     1000 ebp     1004 retad
; 976 eax     980 ecx      984 edx      988 ebx
; 960 3       964 2        968 1        972 0
; 944 7       948 6        952 5        956 4
; 928 11      932 10       936 9        940 8
; 912 15      916 14       920 13       924 12
; 896 19      900 18       904 17       908 16
; 880         884 espsave   888 21      892 20
; 864 27      868 codeadr   872         876 24
; 848 31      852 lpnibzaf   856 lpnibzeo   860 28
; 832 35      836          840          844 32
tnibble56: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1036
 mov ecx,esi
 sub ecx,1000
 mov edx,esi
 sub edx,1035
 xor ebx,ebx
 mov eax,ecx
 add eax,eax
 add eax,eax
tnibblepu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz tnibblepu
 mov [ebp+884],eax
 xor edi,edi
 push edi
 call getreala
; rem add esp,[ebp+956]
 mov [ebp+868],eax
 mov ecx,[ebp+1020]
 mov edx,ecx
 and ecx,[ebp+968]
 mov [ebp+856],ecx
 shr edx,1
 mov [ebp+852],edx
 mov ebx,[ebp+1012]
 sub ebx,1000
 mov ecx,[ebp+1008]
 cmp ecx,[ebp+948]
 jz tnibwrt
 xor ecx,ecx
 jz tnibred
tnibwrt: mov dl,[ebx+1000]
 and edx,[ebp+912]
 mov ecx,[ebp+968]
 and ecx,[ebp+856]
 jz elnib
 add edx,[ebp+908]
elnib: mov ebx,[ebp+868]
 lea esi,[ebx+lnibba]
 add esi,edx
 sub esi,1000
 mov edi,[ebp+852]
 add edi,[ebp+1016]
 sub edi,1000
 mov dl,[esi+1000]
 mov al,[esi+1032]
 and [edi+1000],dl
 or [edi+1000],al
 xor ecx,ecx
 jz tnibblex
tnibred: mov esi,[ebp+852]
 add esi,[ebp+1016]
 sub esi,1000
 mov dl,[esi+1000]
 mov ecx,[ebp+968]
 and ecx,[ebp+856]
 jnz arnib
 shr edx,1
 shr edx,1
 shr edx,1
 shr edx,1
arnib: and edx,[ebp+912]
 xor edx,[ebp+912]
 mov [ebx+1000],dl
tnibblex: mov esi,[ebp+1004]
 mov edi,[ebp+976]
 mov [ebp+1020],esi
 mov [ebp+1016],edi
 add esp,[ebp+884]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 pop eax
 ret
; end of tnibble56
; void stdcall typrint(lnes *typrbase)
; 1004 retad     1008 *typrbase
; 988 ebx     992 esi     996 edi    1000 ebp
; 972 0       976 eax     980 ecx     984 edx
; 956 4       960 3       964 2       968 1
; 940 8       944 7       948 6       952 5
; 924 12      928 11      932 10      936 9
; 908 16      912 15      916 14      920 13
; 892 20      896 19      900 18      904 17
; 876 24      880         884         888 margin02
; 860 28   864 mlopct06  868 ilopct   872 25
; 844 32      848 31      852 30    856 rpivalue
; 828 36      832 35   836 olchbase   840 oldesbase
; 812 40   816 xmargin01   820 olctr   824 olmax
; 796 44    800 ramaddr   804 bytewid   808 41
; 780 48   784 espsave   788 codeaddr   792 45
typrint: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 add edi,1049
 mov edx,edi
 sub edx,1048
 mov ecx,edi
 sub ecx,1000
 clc
 xor ebx,ebx
 mov eax,ecx
 add eax,eax
 add eax,eax
typripu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz typripu
 mov [ebp+784],eax
 xor esi,esi
 push esi
 call getreala
; rem add esp,[ebp+956]
 mov [ebp+788],eax
 mov ebx,[ebp+1008]
 mov [ebp+800],ebx
 sub ebx,8192
; --
 mov ecx,[ebp+972]
 mov [ebp+888],ecx
; margin02
 mov edi,[ebx+requestwid]
 cmp edi,352
 js tywide48
; mov ecx,[ebp+844]
 mov ecx,[ebp+972]
 mov [ebp+888],ecx
; --
tywide48: mov edi,[ebp+788]
;              codeaddr788
 lea esi,[edi+prebh]
 sub esi,1000
 mov ecx,[esi+1012]
 lea edi,[ebx+vardib]
 sub edi,1000
 xor edx,edx
tyloadghdr: mov dl,[esi+1002]
 mov [edi+1000],dl
 add esi,[ebp+968]
 add edi,[ebp+968]
 sub ecx,[ebp+968]
 jnz tyloadghdr
; -----------------
; ecx edx undefined
 xor ecx,ecx
 add ecx,320
 add ecx,[ebp+888]
 xor edx,edx
 add edx,1200
 sub edx,1000
; add edx,[ebp+888]
; ***ERROR*** unable to determine max screen width
; -----------------
 lea edi,[ebx+vardib]
 sub edi,1002
 mov [edi+1020],ecx
;                       18 biwidth         22 biheight
 mov [edi+1024],edx
; -----------------
 mov esi,ebx
 add esi,[ebp+900]
;             900_18
 mov edx,[esi+vardib]
 add edx,[ebp+944]
 shr edx,1
 shr edx,1
 shr edx,1
 mov [ebp+804],edx
; bytewid_804
 add esi,[ebp+812]
 xor ecx,ecx
 add ecx,2047
;        16777215.2047
 mov [esi+vardib],ecx
 mov esi,[ebp+968]
 cmp edx,[ebp+808]
 jns tyx12
 mov esi,[ebp+972]
tyx12: mov [ebp+816],esi
 mov ecx,[ebp+968]
 add ecx,[ebx+ypheight]
 mov [ebp+820],ecx
;   olctr_820     olmax_824
 mov [ebp+824],ecx
tyolop: mov esi,[ebp+820]
;              olctr_820
 sub esi,[ebp+968]
 mov [ebp+820],esi
 mov ecx,[ebx+a80w]
 push esi
 push ecx
 call nampy
; rem add esp,[ebp+940]
 mov [ebp+836],eax
; olchbase_836 = a80w * (olctr_820 - 1)
 mov ecx,[ebx+ypheight]
 sub ecx,[ebp+820]
 add ecx,ecx
 add ecx,ecx
 add ecx,ecx
 add ecx,[ebp+944]
 mov edx,[ebp+804]
; edx = bytewid_804
; ecx=((ypheight - olctr820) * 8) + 7
 push ecx
 push edx
 call nampy
; rem add esp,[ebp+940]
 mov [ebp+840],eax
; oldesbase_840 = bytewid_804 * (((ypheight - olctr820) * 8 ) + 7)
 mov ecx,[ebp+972]
 mov [ebp+864],ecx
; mlopct06_864
tymlopa: mov edx,[ebp+972]
 mov [ebp+868],edx
;  ilopct_868
tyilop: mov esi,[ebp+868]
 cmp esi,[ebx+a80w]
 js tyjlop
 jmp tyibot
tyjlop: mov ecx,[ebp+836]
;           olchbase_836
 add ecx,ebx
 xor edx,edx
 mov dl,[ecx+esi*1+evwr]
 lea ecx,[ebp+856]
;    rpivalue_856
 mov esi,[ebp+788]
;    codeaddr_788
 lea edi,[esi+edx*4+tnyfourfont]
 mov esi,[ebp+952]
 mov edx,[ebp+864]
;    mlopct06_864
 push edx
 push edi
 push ecx
 push esi
 call tnibble56
; rem add esp,[ebp+908]
 mov esi,[ebp+868]
;      ilopct_868
 mov eax,esi
 add eax,[ebp+816]
 lea edi,[ebx+vardib]
 add edi,[ebp+848]
 add edi,[ebp+848]
 add edi,[ebp+840]
 lea ecx,[ebp+856]
 mov esi,[ebp+948]
 push eax
 push edi
 push ecx
 push esi
 call tnibble56
; rem add esp,[ebp+908]
 mov ecx,[ebp+968]
 add [ebp+868],ecx
;  ilopct_868
 jmp tyilop
tyibot: mov esi,[ebp+804]
;            bytewid_804
 sub [ebp+840],esi
; oldesbase_840
;    mlopct06_864
 mov ecx,[ebp+864]
 add ecx,[ebp+968]
 mov [ebp+864],ecx
 cmp ecx,[ebp+944]
 jns tymbota
; xxxxxxxxxxxx
 jmp tymlopa
tymbota: mov edx,[ebp+972]
 mov [ebp+868],edx
;  ilopct_868
tyrlop: mov eax,[ebp+912]
 mov [ebp+856],eax
 mov esi,[ebp+868]
 add esi,[ebp+968]
 mov edi,[ebp+820]
 add edi,[ebp+968]
 cmp esi,[ebx+onecurwozx]
 jnz tyblankcur
 cmp edi,[ebx+onecurwozy]
 jnz tyblankcur
 mov eax,[ebp+940]
 mov [ebp+856],eax
 mov edx,[ebx+insertype]
 or edx,edx
 jnz tyblankcur
 mov eax,[ebp+952]
 mov [ebp+856],eax
tyblankcur: mov esi,[ebp+868]
 lea edi,[ebx+vardib]
 add edi,[ebp+848]
 add edi,[ebp+848]
 add edi,[ebp+840]
 lea ecx,[ebp+856]
 mov eax,esi
 add eax,[ebp+816]
 mov edx,[ebp+948]
 push eax
 push edi
 push ecx
 push edx
 call tnibble56
; rem add esp,[ebp+908]
 mov edx,[ebp+868]
 add edx,[ebp+968]
 mov [ebp+868],edx
 cmp edx,[ebx+a80w]
 jns tyrbot
 jmp tyrlop
tyrbot: xor edx,edx
 or edx,[ebp+820]
 jz tybbot
 jmp tyolop
tybbot: mov esi,[ebp+1004]
 mov edi,[ebp+976]
 mov [ebp+1008],esi
 mov [ebp+1004],edi
 add esp,[ebp+784]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 ret
; end of typrint
; -----------------
; typrint6(*tylnes)
; 1004 retad        1008 *tylnes
; 988 ebx     992 esi     996 edi    1000 ebp
; 972 0       976 eax     980 ecx     984 edx
; 956 4       960 3       964 2       968 1
; 940 8       944 7       948 6       952 5
; 924 12      928 11      932 10      936 9
; 908 16      912 15      916 14      920 13
; 892 20      896 19      900 18      904 17
; 876 24      880         884         888 21
; 860 28   864 mlopct06  868 ilopct   872 25
; 844 32      848 31      852 30    856 rpivalue
; 828 36      832 35   836 olchbase   840 oldesbase
; 812 40   816 xmargin01   820 olctr   824 olmax
; 796 44    800 ramaddr   804 bytewid   808 41
; 780 48   784 espsave   788 codeaddr   792 45
typrint6: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 xor edi,edi
 add edi,1049
 mov edx,edi
 sub edx,1048
 mov ecx,edi
 sub ecx,1000
 xor ebx,ebx
 mov eax,ecx
 add eax,eax
 add eax,eax
typripu6: push ebx
 add ebx,edx
 sub ecx,edx
 jnz typripu6
 mov [ebp+784],eax
 xor esi,esi
 push esi
 call getreala
; rem add esp,[ebp+956]
 mov [ebp+788],eax
 mov ebx,[ebp+1008]
 mov [ebp+800],ebx
 sub ebx,8192
; constbh fix header here
 mov edi,[ebp+788]
 mov ecx,[ebp+848]
 add ecx,ecx
 lea esi,[edi+constbh]
 sub esi,9000
 xor edx,edx
 mov eax,[ebp+968]
 clc
 xor edi,edi
lopfixpri6: mov dl,[esi+9000]
 mov [ebx+edi*1+vardib],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz lopfixpri6
; xxxxxxxxxxxxxxxxxxxxxxxx
 mov esi,ebx
 add esi,[ebp+900]
 xor ecx,ecx
 add ecx,1320
 sub ecx,1000
 cmp [esi+vardib],ecx
; ??
 mov edx,[esi+vardib]
 add edx,[ebp+944]
 shr edx,1
 shr edx,1
 shr edx,1
 mov [ebp+804],edx
; bytewid_804
 add esi,[ebp+812]
 xor ecx,ecx
 add ecx,2047
;        16777215.2047
 mov [esi+vardib],ecx
; mov esi,[ebp+972]
 xor esi,esi
 cmp edx,[ebp+808]
 jns tyx126
; mov esi,[ebp+972]
 xor esi,esi
tyx126: mov [ebp+816],esi
 mov ecx,[ebp+968]
 add ecx,[ebx+ypheight]
 mov [ebp+820],ecx
; olctr_820        olmax_824
 mov [ebp+824],ecx
tyolop6: mov esi,[ebp+820]
 sub esi,[ebp+968]
 mov [ebp+820],esi
 mov ecx,[ebx+a80w]
 push esi
 push ecx
 call nampy
; rem add esp,[ebp+940]
 mov [ebp+836],eax
;  836_olchbase =  olctr_820 * a80w
 mov ecx,[ebx+ypheight]
 sub ecx,[ebp+820]
;    ecx = ypheight - 820_olctr
 add ecx,ecx
 mov eax,ecx
 add ecx,ecx
; change here 3563 3564 3561
 add ecx,eax
 add ecx,[ebp+952]
;         944.952
 mov edx,[ebp+804]
 push ecx
 push edx
 call nampy
; rem add esp,[ebp+940]
 mov [ebp+840],eax
; oldesbase_840 = ((6 * (ypheight - 820_olctr)) + 5) * bytewid
; mov ecx,[ebp+972]
 xor ecx,ecx
 mov [ebp+864],ecx
; tymlopa: mov edx,[ebp+972]
tymlopa6: xor edx,edx
 mov [ebp+868],edx
tyilop6: mov esi,[ebp+868]
 cmp esi,[ebx+a80w]
 js tyjlop6
 jmp tyibot6
tyjlop6: mov ecx,[ebp+836]
 add ecx,ebx
 xor edx,edx
 mov dl,[ecx+esi*1+evwr]
 lea ecx,[ebp+856]
 mov esi,[ebp+788]
 lea edi,[esi+edx*4+tnyfourfont]
 mov esi,[ebp+952]
 mov edx,[ebp+864]
 add edx,[ebp+968]
 push edx
 push edi
 push ecx
 push esi
 call tnibble56
; tnibble56(5,&rpivalue_856,&(code+tnyfourfont+(4*(*(evwr+olchbase+ilopct)))),
; mlopct06_864
; rem add esp,[ebp+908]
 mov esi,[ebp+868]
 mov eax,esi
 add eax,[ebp+816]
 mov ecx,[ebp+848]
 lea edi,[ebx+vardib]
; add edi,[ebp+848]
; add edi,[ebp+848]
 add edi,ecx
 add edi,ecx
 add edi,[ebp+840]
 lea ecx,[ebp+856]
 mov esi,[ebp+948]
 push eax
 push edi
 push ecx
 push esi
 call tnibble56
; tnibble56(6,&rpivalue,vardib+oldesbase_840+62,ilopct+xmargin01)
; rem add esp,[ebp+908]
 mov ecx,[ebp+968]
 add [ebp+868],ecx
 jmp tyilop6
tyibot6: mov esi,[ebp+804]
;             bytewid_804
; rem delay sub [ebp+840],esi
 mov ecx,[ebp+864]
;    mlopct06_864
 add ecx,[ebp+968]
 mov [ebp+864],ecx
 cmp ecx,[ebp+948]
;         944.952.948
 jns tymbota6
 sub [ebp+840],esi
 jmp tymlopa6
; tymbota: mov edx,[ebp+972]
tymbota6: xor edx,edx
 mov [ebp+868],edx
tyrlop6: mov eax,[ebp+912]
 mov [ebp+856],eax
 mov esi,[ebp+868]
 add esi,[ebp+968]
 mov edi,[ebp+820]
 add edi,[ebp+968]
 cmp esi,[ebx+onecurwozx]
 jnz tyblankcur6
 cmp edi,[ebx+onecurwozy]
 jnz tyblankcur6
 mov eax,[ebp+936]
 mov [ebp+856],eax
 mov edx,[ebx+insertype]
 or edx,edx
 jnz tyblankcur6
 mov eax,[ebp+952]
 mov [ebp+856],eax
tyblankcur6: mov esi,[ebp+868]
 mov ecx,[ebp+848]
 lea edi,[ebx+vardib]
; add edi,[ebp+848]
; add edi,[ebp+848]
 add edi,ecx
 add edi,ecx
 add edi,[ebp+840]
 lea ecx,[ebp+856]
 mov eax,esi
 add eax,[ebp+816]
 mov edx,[ebp+948]
 push eax
 push edi
 push ecx
 push edx
 call tnibble56
; rem add esp,[ebp+908]
 mov edx,[ebp+868]
 add edx,[ebp+968]
 mov [ebp+868],edx
 cmp edx,[ebx+a80w]
 jns tyrbot6
 jmp tyrlop6
tyrbot6: xor edx,edx
 or edx,[ebp+820]
 jz tybbot6
 jmp tyolop6
tybbot6: mov esi,[ebp+976]
 mov edi,[ebp+1004]
 mov [ebp+1008],edi
 mov [ebp+1004],esi
 add esp,[ebp+784]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 ret
; end of typrint6
; void sagetodib(lnes* sagel)
;  996 edi      1000 ebp     1004 retad    1008 *sagel
;  980 ecx       984 edx      988 ebx       992 esi
;  964 2         968 1        972 0         976 eax
;  948 6         952 5        956 4         960 3
;  932 10        936 9        940 8         944 7
;  916 14        920 13       924 12        928 11
;  900 18        904 17       908 16        912 15
;  884 22        888 21       892 20        896 19
;  868 26        872 25       876 24        880 23.xctr0
;  852 30        856 29       860 28        864 27.biglinewid
;  836 34        840 33       844 32        848 31
;  820 38        824 37       828 36        832 35
;  804 42        808 41       812 40        816 linebid
;  788 46        792 45       796 44        800 ltopdisp
;  772 50        776 49       780 48        784 linewid
;  756 54        760 53       764 52        768 yctr0
;  740 58        744 57       748 56        752 ydtop
;  724 62        728 61       732 60        736 yctr1
;  708 66        712 65       716 64        720 63
;  692 70        696 69       700 68        704 fontaddr
;  676 74        680 73       684 72        688 codeaddr
;  660 78        664 77       668 76        672 espaddend
;  644 82        648 81       652 80        656 xchr6lp
;  628 86        632 85       636 84        640 83
;  612 90        616 89       620 88        624 ychbase
;  596 94        600 93       604 92        608 91
;  580 98        584 97       588 96        592 xctr1
;  564 102       568 101      572 100       576 99
;  548 106       552 105      556 104       560 ytdstart
;  532 110       536 109      540 108       544 107
;  516 114       520 113      524 112       528
;  500 118       504 117      508 116       512 115
;  484 122       488 121      492 120       496 tnyctr
;  468 126       472 125      476 124       480 123
;  452 130       456 129      460 128       464 127
sagetodib: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1131
 mov edx,edi
 sub edx,1130
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
sagetopub: push ebx
 add ebx,edx
 sub ecx,edx
 jnz sagetopub
 mov [ebp+672],eax
 mov ecx,[ebp+732]
 mov [ebp+816],ecx
 mov edx,[ebp+952]
 push edx
 push ecx
 call nampy
 mov [ebp+800],eax
 add eax,ecx
 mov [ebp+784],eax
 mov edx,[ebp+940]
 push edx
 push ecx
 call nampy
 mov [ebp+864],eax
 xor edx,edx
 push edx
 call getreala
 mov [ebp+688],eax
 mov ebx,[ebp+688]
 lea esi,[ebx+font686]
 mov ebx,[ebp+1008]
 sub ebx,8192
 xor edx,edx
 mov [ebp+768],edx
 mov [ebp+704],esi
; 505
 mov edi,[ebp+688]
 lea esi,[edi+constbh]
 sub esi,500
 xor edi,edi
 xor eax,eax
constsagel: mov al,[esi+500]
 mov [ebx+edi*1+vardib],al
 add esi,[ebp+968]
 add edi,[ebp+968]
 cmp edi,[ebp+724]
 js constsagel
 mov ecx,[ebp+864]
 xor edx,edx
 add edx,1038
 sub edx,900
 mov edi,[ebp+900]
 mov [ebx+edi*1+vardib],ecx
 mov edi,[ebp+884]
 mov [ebx+edi*1+vardib],edx
sageyolop: mov edx,[ebp+768]
 mov ecx,[ebx+ypheight]
 sub ecx,edx
 mov eax,[ebx+a80w]
 push edx
 push eax
 call nampy
 mov [ebp+624],eax
 mov eax,[ebp+784]
 push eax
 push ecx
 call nampy
 add eax,[ebp+800]
 add edx,[ebp+968]
 mov [ebp+736],edx
 add eax,[ebp+724]
; rem add eax,[ebp+784]
 add eax,[ebp+972]
 mov [ebp+560],eax
 xor eax,eax
 mov [ebp+880],eax
sagexilop: mov eax,[ebp+880]
 mov esi,eax
 add eax,[ebp+968]
 mov [ebp+592],eax
 add esi,[ebp+624]
 xor edx,edx
 mov dl,[ebx+esi*1+evwr]
 mov eax,[ebp+948]
 push eax
 push edx
 call nampy
 mov [ebp+656],eax
 mov esi,[ebp+704]
 lea edi,[ebx+vardib]
 add edi,[ebp+560]
 mov ecx,[ebp+968]
 mov [ebp+496],ecx
 mov edx,[ebp+880]
 mov eax,[ebp+968]
 add [ebp+656],eax
sagetnylop: mov eax,[ebp+656]
 push eax
 push esi
 call get03
 xor eax,[ebp+720]
 push eax
 push edx
 push edi
 call put03
 mov eax,[ebp+968]
 add [ebp+656],eax
 sub edi,[ebp+816]
 mov ecx,[ebp+496]
 add ecx,[ebp+968]
 mov [ebp+496],ecx
 cmp ecx,[ebp+948]
 js sagetnylop
 mov esi,[ebp+720]
 mov eax,[ebx+onecurwozx]
 cmp eax,[ebp+592]
 jnz sagenocur
 mov ecx,[ebx+onecurwozy]
 cmp ecx,[ebp+736]
 jnz sagenocur
 mov esi,[ebp+852]
 mov ecx,[ebx+insertype]
 cmp ecx,[ebp+968]
 jz sagenocur
 mov esi,[ebp+900]
sagenocur: mov eax,[ebp+972]
 push eax
 push edx
 push edi
 call put03
; rem sub edi,[ebp+816]
 sub edi,[ebp+972]
 push esi
 push edx
 push edi
 call put03
 mov edx,[ebp+592]
 mov [ebp+880],edx
 cmp edx,[ebx+a80w]
 jns sagexbot
 jmp sagexilop
sagexbot: mov edx,[ebp+768]
 mov ecx,[ebp+736]
 mov [ebp+768],ecx
 cmp edx,[ebx+ypheight]
 jns sageybot
 jmp sageyolop
sageybot: mov esi,[ebp+1004]
 mov edi,[ebp+976]
 mov [ebp+1008],esi
 mov [ebp+1004],edi
 add esp,[ebp+672]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 ret
; bottom of sagetodib
; 0313.2245.2230
; rem   0 1 2 3
; shift 3 2 1 0
; int get03(char* get03abs,int getfoursub)
; 1000 ebp   1004 retad    1008 *get03abs  1012 getfoursub
;  984 edx    988 ebx       992 esi         996 edi
;  968 1      972 0         976 eax         980 ecx
;  952 5      956 4         960 3           964 2
;  936 9      940 8         944 7           948 6
;  920 13     924 12        928 11          932 espsave
;  904 17     908 16        912 15          916 fourthsub
;  888 21     892 20        896 19          900 remainder
;  872 25     876 24        880 23          884 result884
;  856 29     860 28        864 27          868 ctr868
;  840 33     844 32        848 31          852 tripp3
;  824 37     828 36        832 35          836
get03: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1038
 mov edx,edi
 sub edx,1037
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
get03pu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz get03pu
 mov [ebp+932],eax
; ----------------
 xor ebx,ebx
 mov [ebp+884],ebx
 mov [ebp+868],ebx
 mov edx,[ebp+1012]
 mov ecx,edx
 add edx,edx
 add edx,ecx
 mov [ebp+852],edx
; ----------------
olopge3: mov ebx,[ebp+1008]
 sub ebx,8192
;              ????
; mov edi,[ebp+1012]
 mov edi,[ebp+852]
 add edi,[ebp+868]
;            ----
 mov ecx,edi
 and ecx,[ebp+960]
 mov [ebp+900],ecx
 mov ecx,[ebp+964]
 shr edi,cl
 mov [ebp+916],edi
 xor edx,edx
 mov esi,[ebp+916]
 mov dl,[ebx+esi*1+8192]
 mov ecx,[ebp+960]
 sub ecx,[ebp+900]
 jz skipget03sr
 add ecx,ecx
 shr edx,cl
skipget03sr: and edx,[ebp+960]
; ----------------------------
 mov ebx,[ebp+868]
 add ebx,[ebp+968]
 mov [ebp+868],ebx
 mov ecx,[ebp+884]
 add ecx,ecx
 add ecx,ecx
 add ecx,edx
 mov [ebp+884],ecx
 cmp ebx,[ebp+960]
 jns gotbot03
 jmp olopge3
; ----------------------------
gotbot03: mov edx,[ebp+884]
 mov edi,[ebp+1004]
 mov [ebp+1012],edi
 mov [ebp+1008],edx
 add esp,[ebp+932]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of get03
; void put03(char* put03abs,int putfoursub0,int put03value)
; 1004 retad    1008 *put03abs  1012 putfoursub0  1016 put03value
;  988 ebx       992 esi         996 edi          1000 ebp
;  972 0         976 eax         980 ecx           984 edx
;  956 4         960 3           964 2             968 1
;  940 8         944 7           948 6             952 5
;  924 12        928 11          932 10            936 9
;  908 16        912 15          916 14            920 13
;  892 20        896 19          900 18            904 17
;  876 24        880 23          884 22            888 espsave
;  860 28        864 27          868 26            872
;  844 32        848 31          852 30            856 fourthsub0
;  828 36        832 35          836 34            840 ctr840
;  812 40        816 39          820 38            824 value824
;  796 44        800 43          804 42            808 putrem
;  780 48        784 47          788 46            792 fullsub0
;  764 52        768 51          772 50            776 putmask
;  748 56        752             756               760
;  732 60        736             740               744
put03: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 add edi,1061
 mov edx,edi
 sub edx,1060
 xor ebx,ebx
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
put03pu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz put03pu
 mov [ebp+888],eax
 xor edx,edx
 mov [ebp+840],edx
putlop840: mov ecx,[ebp+964]
 sub ecx,[ebp+840]
 mov edx,[ebp+1016]
 add ecx,ecx
 jz sklop840
 shr edx,cl
sklop840: mov [ebp+824],edx
 mov ecx,[ebp+840]
 add ecx,[ebp+1012]
 add ecx,[ebp+1012]
 add ecx,[ebp+1012]
 mov [ebp+792],ecx
; ----------------
 mov edi,[ebp+792]
 mov edx,edi
 and edx,[ebp+960]
 mov [ebp+808],edx
 mov ecx,[ebp+964]
 shr edi,cl
 mov [ebp+856],edi
 mov ecx,[ebp+960]
 mov esi,[ebp+824]
 mov edx,ecx
 sub ecx,[ebp+808]
 add ecx,ecx
 jz skipputdoub
lopdoubput: add esi,esi
 add edx,edx
 sub ecx,[ebp+968]
 jnz lopdoubput
skipputdoub: mov [ebp+824],esi
 mov [ebp+776],edx
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov edi,[ebp+856]
 mov edx,[ebp+972]
 sub edx,[ebp+968]
 sub edx,[ebp+776]
 and [ebx+edi*1+8192],dl
 mov edx,[ebp+776]
 and edx,[ebp+824]
 or [ebx+edi*1+8192],dl
; ------
 mov esi,[ebp+840]
 add esi,[ebp+968]
 mov [ebp+840],esi
 cmp esi,[ebp+960]
 jns putbot840
 jmp putlop840
putbot840: mov esi,[ebp+1004]
 mov edi,[ebp+976]
 mov [ebp+1016],esi
 mov [ebp+1012],edi
 add esp,[ebp+888]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 ret
; bottom of put03
; ----------------
; int fixrect(*rects)
; 1000 ebpsave    1004 retad    1008 *rects
; 988 ebx    992 esi    996 edi
; 976 eax    980 ecx    984 edx
; 964 2    968 1    972 0
; 952 wwcmp    956 4    960 3
; 940 8    944 7    948 6
; 928 whcmp    932 10    936 9
fixrect: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 xor edi,edi
 add edi,1000
 mov edx,edi
 mov ecx,edi
 sub edi,1001
 sub edx,999
 sub ecx,986
fixrecpu: push edi
 add edi,edx
 sub ecx,edx
 jnz fixrecpu
 xor esi,esi
 add esi,2000
 mov ecx,esi
 sub ecx,1950
 mov [ebp+928],ecx
 sub esi,1800
 mov [ebp+952],esi
 mov ebx,[ebp+1008]
 sub ebx,1000
 mov edx,[ebx+1012]
 sub edx,[ebx+1004]
 mov [ebx+1012],edx
 mov edi,[ebx+1008]
 sub edi,[ebx+1000]
 mov [ebx+1008],edi
 xor esi,esi
 mov [ebx+1004],esi
 mov [ebx+1000],esi
 cmp edx,[ebp+928]
 js tinyrect
 cmp edi,[ebp+952]
 js tinyrect
 mov ecx,[ebp+968]
 mov [ebp+976],ecx
tinyrect: xor ecx,ecx
 add ecx,1052
 sub ecx,1000
 mov eax,[ebp+976]
 mov edx,[ebp+1004]
 mov [ebp+1008],edx
 mov [ebp+1004],eax
 add esp,ecx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 ret
; rect.left
; rect.top
; rect.right
; rect.bottom
; bottom of fixrect
; clearline(struct lnes* zzc,int cwch)
; cwch 1012    *zzc 1008    retad 1004
; ebp 1000    edi 996    esi 992
; ebx 988    edx 984    ecx 980
; eax 976    972 0    968 1
; 964 2    960 3    956 4
; 952 5    948    944 7    940 8
clearline: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1000
 mov ecx,esi
 mov edx,esi
 sub edx,999
 sub ecx,991
 xor edi,edi
cleariiu: push edi
 add edi,edx
 sub ecx,edx
 jnz cleariiu
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov eax,[ebp+1012]
 sub eax,[ebp+968]
 mov ecx,[ebx+a80w]
 push eax
 push ecx
 call nampy
; rem add esp,[ebp+940]
 mov edi,eax
 mov edx,esi
 sub edx,968
 mov eax,[ebp+968]
clearllp: mov [ebx+edi*1+crz0160],dl
 add edi,eax
 sub ecx,eax
 jnz clearllp
 mov ecx,esi
 sub ecx,964
 mov eax,[ebp+976]
 mov esi,[ebp+1004]
 mov [ebp+1008],eax
 mov [ebp+1012],esi
 add esp,ecx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of clearline
; rw8056(lnes* zyc,int zrw56,int bwlocal, int wcy)
; wcy 1020
; retad 1004    *zyc 1008    zrw56 1012    bwlocal 1016
; ebx 988    esi 992    edi 996    ebp 1000
; 972 -4     eax 976    ecx 980    edx 984
; 956 0    960 -1    964  -2    968 -3
; 940 4    944 3    948 2    952 1
; 924 8    928 7    932 6    936 5
; 908 12    912 11    916 10    920 9
; 892 16    896 baselocal    900 basey    904 codeaddr
rw8056: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1000
 mov ecx,esi
 sub ecx,979
 mov edx,esi
 sub edx,999
 mov edi,esi
 sub edi,1004
rwu805: push edi
 add edi,edx
 sub ecx,edx
 jnz rwu805
 xor ecx,ecx
 push ecx
 call getreala
; rem add esp,[ebp+940]
 mov [ebp+904],eax
 mov ebx,[ebp+1008]
 sub ebx,02000h
 mov eax,[ebx+a80w]
 mov ecx,[ebp+1016]
 sub ecx,[ebp+952]
 push eax
 push ecx
 call nampy
; rem add esp,[ebp+924]
 mov [ebp+896],eax
 mov eax,[ebx+a80w]
 mov ecx,[ebp+1020]
 sub ecx,[ebp+952]
 cmp ecx,[ebp+956]
 js rwfailNE
 push eax
 push ecx
 call nampy
; rem add esp,[ebp+924]
 mov [ebp+900],eax
 add eax,[ebx+a80w]
 add eax,[ebx+a80w]
 mov esi,[ebp+904]
; mov ecx,[esi+ramsizech]
 lea ecx,[esi+lastdword]
 add ecx,[ebp+940]
 lea edx,[esi+sandoval]
 sub edx,ecx
 mov ecx,[esi+ramsizech]
; lea ecx,[ebx+00600000h]
; lea edx,[ebx+sandoval]
 sub ecx,edx
 sub ecx,8192
 cmp eax,ecx
 js rw85ok
rw85fail: mov ecx,[ebp+952]
 mov [ebx+nzerror],ecx
rwfailNE: mov ecx,[ebp+1012]
 cmp ecx,[ebp+936]
 jnz rw86fail
 mov eax,[ebp+1016]
 mov ecx,[ebp+1008]
 push eax
 push ecx
 call clearline
; rem add esp,[ebp+924]
rw86fail: jmp rw805zot
rw85ok: mov ecx,[ebp+1012]
 cmp ecx,[ebp+936]
 jz ron85rex
 jmp non85red
ron85rex: mov edx,[ebp+1020]
 add edx,[ebp+960]
 cmp edx,[ebx+afilelen]
 jns rwfailNE
; insert READ
 lea esi,[ebx+sandoval]
 add esi,[ebp+900]
 lea edi,[ebx+crz0160]
 add edi,[ebp+896]
 sub esi,1024
 sub edi,1024
 mov eax,[ebp+952]
 mov ecx,[ebx+a80w]
rr5053: mov dl,[esi+1024]
 mov [edi+1024],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz rr5053
 xor esi,esi
 cmp esi,[ebx+uppercase]
 jz a85red
 lea edi,[ebx+crz0160]
 add edi,[ebp+896]
 sub edi,16384
 mov esi,[ebx+a80w]
upca8056u: xor eax,eax
 mov al,[edi+16384]
 xor edx,edx
 add edx,1096
 sub edx,1000
 cmp edx,eax
 jns upcb8056u
 add edx,[ebp+952]
 cmp edx,[ebx+uppercase]
 jnz upcb8056u
 xor edx,edx
 add edx,1123
 sub edx,1000
 cmp edx,eax
 js upcb8056u
 sub eax,[ebp+892]
 sub eax,[ebp+892]
 mov [edi+16384],al
upcb8056u: mov edx,[ebp+952]
 add edi,edx
 sub esi,edx
 jnz upca8056u
a85red: jmp rw86fail
non85red: cmp ecx,[ebp+932]
 jz ron86rex
 jmp rw86fail
ron86rex: lea ecx,[ebx+sandoval]
 mov edx,[ebp+1020]
 add edx,[ebp+960]
 cmp edx,[ebp+956]
 jns ron87ming
 jmp rw85fail
ron87ming: xor esi,esi
 cmp esi,[ebx+uppercase]
 jz rww8066
 lea edi,[ebx+crz0160]
 add edi,[ebp+896]
 sub edi,16384
 mov esi,[ebx+a80w]
upca8056l: xor eax,eax
 mov al,[edi+16384]
 xor edx,edx
 add edx,1096
 sub edx,1000
 cmp edx,eax
 jns upcb8056l
 add edx,[ebp+952]
 cmp edx,[ebx+uppercase]
 jnz upcb8056l
 xor edx,edx
 add edx,1123
 sub edx,1000
 cmp edx,eax
 js upcb8056l
 sub eax,[ebp+892]
 sub eax,[ebp+892]
 mov [edi+16384],al
upcb8056l: mov edx,[ebp+952]
 add edi,edx
 sub esi,edx
 jnz upca8056l
rww8066: lea edi,[ebx+sandoval]
 add edi,[ebp+900]
 sub edi,1024
 lea esi,[ebx+crz0160]
 add esi,[ebp+896]
 sub esi,1024
 mov eax,[ebp+952]
 mov ecx,[ebx+a80w]
ww8068: mov dl,[esi+1024]
 mov [edi+1024],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz ww8068
rw805zot: xor edx,edx
 add edx,2084
 sub edx,2000
 mov eax,[ebp+976]
 mov ecx,[ebp+1004]
 mov [ebp+1020],ecx
 mov [ebp+1016],eax
 add esp,edx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 pop eax
 ret
; bottom of rw8056
; lalocal12(struct lnes* zlal)
; retad 1004    *zlal 1008
; ebx 988    esi 992    edi 996    ebp 1000
; 972 0    976 eax    980 ecx    984 edx
; 956 4    960 3    964 2    968 1
; 940 8    944 ycmp    948 6    952 5
lalocal12: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1000
 mov ecx,esi
 sub ecx,991
 xor edi,edi
 mov edx,esi
 sub edx,999
 xor edi,edi
lalocpu12: push edi
 add edi,edx
 sub ecx,edx
 jnz lalocpu12
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov ecx,[ebx+y]
 add ecx,[ebp+968]
 mov [ebp+944],ecx
 mov edx,[ebx+y]
 cmp edx,[ebp+972]
 js lalcone
 mov ecx,[ebx+afilelen]
 cmp ecx,[ebp+944]
 jns lalctwo
lalcone: mov edx,[ebp+964]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearline
; rem add esp,[ebp+940]
lalctwo: mov ecx,[ebx+y]
 cmp ecx,[ebp+972]
 js lalcthree
 mov ecx,[ebx+afilelen]
 cmp ecx,[ebp+944]
 js lalcthree
 mov edi,[ebp+944]
 mov edx,[ebp+964]
 mov ecx,[ebp+952]
 mov eax,[ebp+1008]
 push edi
 push edx
 push ecx
 push eax
 call rw8056
; rem mov edx,[ebp+940]
; rem add edx,edx
; rem add esp,edx
lalcthree: mov edx,[ebx+y]
 cmp edx,[ebp+968]
 js lalcfour
 mov ecx,[ebx+afilelen]
 cmp ecx,[ebx+y]
 jns lalcfive
lalcfour: mov edx,[ebp+968]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearline
; rem add esp,[ebp+940]
lalcfive: mov ecx,[ebx+y]
 cmp ecx,[ebp+968]
 js lalcsix
 mov edx,[ebx+afilelen]
 cmp edx,[ebx+y]
 js lalcsix
 mov edi,[ebx+y]
 mov edx,[ebp+968]
 mov ecx,[ebp+952]
 mov eax,[ebp+1008]
 push edi
 push edx
 push ecx
 push eax
 call rw8056
; rem mov edx,[ebp+940]
; rem add edx,edx
; rem add esp,edx
lalcsix: mov edx,esi
 sub edx,964
 mov eax,[ebp+976]
 mov edi,[ebp+1004]
 mov [ebp+1008],edi
 mov [ebp+1004],eax
 add esp,edx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 ret
; bottom of lalocal12
; laput12(lnes* lput)
; 1000 ebp    1004 retad    1008 *lput
; 988 ebx    992 esi       996 edi
; 976 eax    980 ecx       984 edx
; 964 2    968 1     972 0
; 952 5    956 4    960 putae
; 940 8    944        948 6
; 928        932           936
; 916        920           924 12
laput12: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1000
 mov ecx,esi
 mov edx,esi
 xor edi,edi
 sub ecx,985
 sub edx,999
laww12pu: push edi
 add edi,edx
 sub ecx,edx
 jnz laww12pu
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov edi,[ebx+y]
 add edi,[ebp+968]
 mov [ebp+960],edi
 cmp edi,[ebp+964]
 jns laput13
; jmp nonput48
 xor edi,edi
 jz nonput48
laput13: mov ecx,[ebx+chnext]
 cmp ecx,[ebp+972]
 jz nonput36
laput15: mov edi,[ebp+960]
 mov edx,[ebp+964]
 mov ecx,[ebp+948]
 mov eax,[ebp+1008]
 push edi
 push edx
 push ecx
 push eax
 call rw8056
; rem mov ecx,[ebp+940]
; rem add ecx,ecx
; rem add esp,ecx
 mov ecx,[ebx+afilelen]
 mov edx,[ebp+960]
 cmp ecx,edx
 jns nonput36
 mov [ebx+afilelen],edx
nonput36: mov edi,[ebx+y]
 mov edx,[ebp+968]
 mov ecx,[ebp+948]
 mov eax,[ebp+1008]
 push edi
 push edx
 push ecx
 push eax
 call rw8056
; rem mov edi,[ebp+940]
; rem add edi,edi
; rem add esp,edi
 mov edi,[ebx+y]
 mov edx,[ebx+afilelen]
 cmp edx,edi
 jns nonput48
 mov [ebx+afilelen],edi
nonput48: mov edi,[ebp+972]
 mov [ebx+chnext],edi
 mov [ebx+chzerv],edi
 mov ecx,esi
 sub ecx,940
 mov eax,[ebp+976]
 mov esi,[ebp+1004]
 mov [ebp+1008],esi
 mov [ebp+1004],eax
 add esp,ecx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 ret
; bottom of laput12
; int dlenval(lnes *den,int leub)
; 1004 retad    1008 *den    1012 leub
; 992 esi    996 edi    1000 ebp
; 980 ecx    984 edx    988 ebx
; 968 1        972 0        976 eax
; 956 4        960 3        964 2
; 944 7        948 6        952 5
; 932 cst32    936        940 8
; 920 13        924 12       928 spfixlast
dlenval: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 xor edi,edi
 add edi,1000
 mov ecx,edi
 mov edx,edi
 xor ebx,ebx
 push ebx
 sub ecx,986
 sub edx,999
 mov eax,ecx
 add eax,eax
 add eax,eax
dlenpu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz dlenpu
 mov [ebp+928],eax
 mov ecx,edi
 sub ecx,968
 mov [ebp+932],ecx
 mov edi,[ebp+1008]
 sub edi,8192
 lea ebx,[edi+crz0160]
 sub ebx,2048
 mov ecx,[edi+a80w]
 mov edx,[ebp+1012]
 sub edx,[ebp+968]
 jns dlen18
dlen16: xor edi,edi
 jz dlenbot
dlen18: mov edi,ecx
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 add ebx,eax
 mov eax,[ebp+968]
dlenloop: mov esi,edi
 sub esi,eax
 js dlenbot
 xor edx,edx
 mov dl,[ebx+esi*1+2048]
 mov ecx,[ebp+932]
 cmp ecx,edx
 js dlenbot
 mov edi,esi
 xor esi,esi
 jz dlenloop
dlenbot: mov [ebp+1008],edi
 mov esi,[ebp+1004]
 mov [ebp+1012],esi
 add esp,[ebp+928]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of dlenval
; aptinsert(*lnes seratwo,int inserfromd)
; 1004 retad    1008 *seratwo    1012 inserfromd
; 992 esi    996 edi    1000 ebp
; 976 eax    980 ecx    984 edx    988 ebx
; 960 3    964 2    968 1    972 0
; 944 7    948 6    952 5    956 4
; 928 flnext    932 espsave    936    940 8
; 912        916        920 yl    924 yh
; 896 delwid    900 yelctrl    904 delmanytemp    908 16
; 880 23    884 dhowmany    888 limdel    892 20
; inserfromd >= 0 for where to get insertable line
; inserfromd < 0 for - how many lines to delete
aptinsert: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1023
 mov edx,esi
 mov ecx,esi
 sub edx,1022
 sub ecx,999
 mov eax,ecx
 add eax,eax
 add eax,eax
 xor ebx,ebx
aptintpu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz aptintpu
 mov [ebp+932],eax
 mov edi,[ebp+1008]
 mov ebx,edi
 sub ebx,8192
 mov ecx,[ebx+y]
 cmp ecx,[ebp+968]
 js aptfaila
 mov ecx,[ebp+1012]
 cmp ecx,[ebp+972]
 jns aptinsertop
 xor eax,eax
 jz aptdeletea
aptfaila: xor eax,eax
 jz aptfailb
aptinsertop: mov esi,[ebx+afilelen]
aptinsshove: mov edx,[ebp+956]
 mov ecx,[ebp+952]
 cmp esi,[ebx+y]
 js aptinsowrt
 push esi
 push edx
 push ecx
 push edi
 call rw8056
; rem add esp,[ebp+908]
 mov eax,[ebp+968]
 add ecx,eax
 add eax,esi
 push eax
 push edx
 push ecx
 push edi
 call rw8056
; rem add esp,[ebp+908]
 sub esi,[ebp+968]
 xor eax,eax
 jz aptinsshove
aptfailb: xor eax,eax
 jz aptfailc
aptdeletea: xor eax,eax
 jz aptdeleteb
aptinsowrt: mov esi,[ebx+y]
 mov eax,[ebp+1012]
 mov ecx,[ebp+948]
 mov edx,[ebp+968]
; ecx tempdelwid   esi yelctrl  edx templimdel
 add [ebx+afilelen],edx
 push esi
 push eax
 push ecx
 push edi
 call rw8056
; rem add esp,[ebp+908]
 add [ebx+y],edx
aptfailc: xor eax,eax
 jz aptfaild
aptdeleteb: xor ecx,ecx
 sub ecx,[ebp+1012]
 mov esi,[ebx+y]
 mov edx,[ebp+968]
 add edx,[ebx+afilelen]
 sub edx,[ebx+y]
 js aptfailc
 mov eax,ecx
 sub eax,edx
 js delwidmake
 mov ecx,edx
delwidmake: mov [ebp+896],ecx
 xor eax,eax
 jz aptdeltoop
aptfaild: xor eax,eax
 jz aptfaile
aptdeltoop: mov eax,esi
 add eax,[ebp+896]
 cmp eax,[ebx+afilelen]
 jg aptdelshrfl
 mov ecx,[ebp+960]
 mov edx,[ebp+952]
 push eax
 push ecx
 push edx
 push edi
 call rw8056
; rem add esp,[ebp+908]
 mov edx,[ebp+948]
 push esi
 push ecx
 push edx
 push edi
 call rw8056
; rem add esp,[ebp+908]
 add esi,[ebp+968]
 xor eax,eax
 jz aptdeltoop
aptfaile: xor eax,eax
 jz aptfailf
aptdelshrfl: mov edx,[ebx+afilelen]
 sub edx,[ebp+896]
 mov [ebx+afilelen],edx
aptfailf: add esp,[ebp+932]
 mov esi,[ebp+976]
 mov edi,[ebp+1004]
 mov [ebp+1012],edi
 mov [ebp+1008],esi
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; end of summer 2011 aptinsert
; void ikx1864(lnes* rayloc5,int keychr1,int alselone)
; 1004 retad    1008 *rayloc5    1012 keychr1    1016 alselone
; 988 ebx    992 esi    996 edi    1000 ebp
; 972 -1     976 eax    980 ecx    984 edx
; 956 3    960 2    964 1    968 0
; 940 7    944 6    948 5    952 4
; 924 11    928 10     932 9      936 8
; 908 15    912 albase1    916 fixespikx    920 12
; 892 19    896 lval1    900 iisubc    904 16
; 876 23    880 cc1      884 filtkeychr    888 20
; 860 ikxchoose    864 ikxcontinue    868 oneikxj    872 24
; 844 31    848 ikxdex    852 raylocwhere    856 28
; 828 35    832 ikxcode    836 fstabrez    840 32
; 812    816    820    824 36
; 796    800    804    808 40
; 780 47    784    788    792 44
ikx1864: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1049
 mov edx,esi
 mov ecx,esi
 mov edi,esi
 sub edi,1050
 sub edx,1048
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
ikx186pu: push edi
 add edi,edx
 sub ecx,edx
 jnz ikx186pu
 mov [ebp+916],eax
 mov esi,[ebp+1008]
 sub esi,8192
 lea edx,[esi+crz0160]
 sub edx,1024
 mov [ebp+852],edx
 mov ecx,[ebp+1016]
 mov [esi+alsel],ecx
 xor edx,edx
 mov [ebp+848],edx
 mov edx,[esi+alsel]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
; rem add esp,[ebp+936]
 mov [ebp+896],eax
 mov edx,[esi+insertype]
 cmp edx,[ebp+968]
 jz ikxnon8
 mov ecx,[ebp+936]
 add [ebp+848],ecx
ikxnon8: mov edx,[ebp+948]
 cmp edx,[esi+alsel]
 jns ikxnon4
 mov ecx,[ebp+952]
 add [ebp+848],ecx
ikxnon4: mov edx,[esi+a80w]
 sub edx,[ebp+964]
 cmp edx,[ebp+896]
 jns ikxnon2
 mov ecx,[ebp+960]
 add [ebp+848],ecx
ikxnon2: mov edx,[esi+a80w]
 sub edx,[ebp+964]
 cmp edx,[esi+x]
 jns ikxnon1
 mov ecx,[ebp+964]
 add [ebp+848],ecx
ikxnon1: xor edx,edx
 push edx
 call getreala
; rem add esp,[ebp+952]
 mov [ebp+832],eax
 xor edi,edi
 lea ebx,[edi+fstab1864]
 add ebx,[ebp+832]
 sub ebx,3000
 mov edi,[ebp+848]
 mov ecx,[ebx+edi*4+3000]
 mov [ebp+836],ecx
 mov edx,[esi+alsel]
 cmp edx,[ebp+964]
 jnz notikx1408
 mov edx,[ebp+960]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearline
; rem add esp,[ebp+936]
 mov ecx,[ebp+964]
 mov [esi+chdoc],ecx
notikx1408: xor edi,edi
 mov [esi+inspg],edi
 mov edx,[esi+alsel]
 mov ecx,[ebp+948]
 cmp ecx,edx
 jns nonikx1409
 sub edx,[ebp+964]
 mov ecx,[esi+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+936]
 add edi,eax
nonikx1409: mov [ebp+912],edi
 add edi,[esi+x]
 sub edi,[ebp+964]
 mov [ebp+900],edi
 mov ecx,[ebp+964]
 mov [esi+chzerv],ecx
 mov edx,[ebp+968]
 mov [esi+chnext],edx
 mov ecx,[ebp+836]
 and ecx,[ebp+936]
 jz ikxvot8
 xor edx,edx
 add edx,3255
 sub edx,3000
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call iek2000
; rem add esp,[ebp+936]
 mov edx,[ebp+964]
 mov [esi+inspg],edx
ikxvot8: mov ecx,[ebp+836]
 and ecx,[ebp+952]
 jnz ikxisfour
ikxrot4: jmp ikxvot4
ikxisfour: mov edx,[esi+x]
 cmp edx,[esi+a80w]
 js ikxrot4
 mov ecx,[ebp+840]
 mov edx,[ebp+1012]
; xxxxxxxxxxxx
 mov [ebp+884],ecx
 cmp edx,ecx
 js ikxorange
 xor ecx,ecx
 add ecx,1127
 sub ecx,1000
 cmp edx,ecx
 jns ikxorange
 mov [ebp+884],edx
ikxorange: mov ebx,[ebp+852]
 mov edi,[ebp+900]
 mov edx,[ebp+884]
 mov [ebx+edi*1+1024],dl
 mov edx,[ebp+960]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call gek2040
; rem add esp,[ebp+936]
 mov ecx,[ebp+964]
 mov [esi+insel],ecx
 mov edx,[ebp+964]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearline
; rem add esp,[ebp+936]
 mov edx,[esi+insel]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call aptinsert
; rem add esp,[ebp+936]
 mov ecx,[esi+y]
 sub ecx,[ebp+964]
 mov [esi+y],ecx
 mov edx,[ebp+964]
 mov [esi+inspg],edx
ikxvot4: mov ecx,[ebp+836]
 and ecx,[ebp+960]
 jz ikxvot2
 mov ecx,[ebp+896]
 mov [ebp+880],ecx
ikxloop4: mov edx,[ebp+880]
 cmp edx,[esi+x]
 js ikxvot2
 mov edi,[ebp+912]
 add edi,[ebp+880]
 sub edi,[ebp+964]
 mov ebx,[ebp+852]
 xor edx,edx
 mov dl,[ebx+edi*1+1024]
 add edi,[ebp+964]
 mov [ebx+edi*1+1024],dl
 mov ecx,[ebp+880]
 sub ecx,[ebp+964]
 mov [ebp+880],ecx
 xor edx,edx
 jz ikxloop4
ikxvot2: mov ecx,[ebp+836]
 and ecx,[ebp+964]
; jnz ikxvoot93
 jz ikxvot1
ikxvoot93: mov ecx,[ebp+840]
 mov edx,[ebp+1012]
 mov [ebp+884],ecx
 cmp edx,ecx
 js ikxgreen
 xor ecx,ecx
 add ecx,1127
 sub ecx,1000
 cmp edx,ecx
 jns ikxgreen
 mov [ebp+884],edx
ikxgreen: mov ebx,[ebp+852]
 mov edi,[ebp+900]
 mov edx,[ebp+884]
 mov [ebx+edi*1+1024],dl
 mov ecx,[ebp+964]
 add [esi+x],ecx
 mov edx,[ebp+948]
 cmp edx,[esi+alsel]
 js ikxvot1
 mov ecx,[ebp+1008]
 push ecx
 call laput12
; rem add esp,[ebp+952]
ikxvot1: xor edi,edi
 mov eax,[ebp+976]
 mov esi,[ebp+1004]
 mov [ebp+1016],esi
 mov [ebp+1012],eax
 add esp,[ebp+916]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 ret
; bottom of ikx1864
; iek2000(lnes* rayloc2, int nzkey)
; 1004 retad    1008 *rayloc2    1012 nzkey
; 992 esi    996 edi    1000 ebp
; 980 ecx    984 edx    988 ebx
; 968 1    972 0    976 eax
; 956 4    960 3    964 2
; 944 7    948 6    952 5
; 932 10    936 9    940 8
; 920 erxsub    924 12    928 erd
; 908 16    912 ercmp    916 erchk
; 896 fixspiek    900 raywhere    904 albase2
; 884 22    888 21    892 20
iek2000: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1023
 mov ecx,esi
 mov edx,esi
 xor ebx,ebx
 sub ecx,1000
 sub edx,1022
 mov eax,ecx
 add eax,eax
 add eax,eax
iek20pu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz iek20pu
 mov [ebp+896],eax
 mov esi,[ebp+1008]
 sub esi,8192
 lea ecx,[esi+crz0160]
 sub ecx,2048
 mov [ebp+900],ecx
 xor edx,edx
 mov [ebp+904],edx
 mov ecx,[esi+a80w]
 mov [ebp+928],ecx
 mov edx,[esi+x]
 sub edx,[ebp+968]
 mov [ebp+920],edx
 mov edx,[ebp+964]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearline
; rem add esp,[ebp+940]
 mov edx,[ebp+968]
 mov [esi+alsel],edx
 xor ecx,ecx
 mov [ebp+916],ecx
iek22loop: mov edx,[ebp+920]
 cmp edx,[esi+a80w]
 jns iek22bot
 xor edx,edx
 mov ebx,[ebp+900]
 mov edi,[ebp+920]
 mov dl,[ebx+edi*1+2048]
 mov [ebp+912],edx
 mov ecx,[ebp+932]
 add ecx,[ebp+884]
 cmp ecx,[ebp+912]
 jz iek21bot
 mov ecx,[ebp+968]
 mov [ebp+916],ecx
 xor ecx,ecx
 jz iek21bot
iek4304: xor edx,edx
 jz iek22loop
iek22bot: xor ecx,ecx
 jz iek23bot
iek21bot: mov edx,[ebp+912]
 mov edi,[ebp+928]
 mov ebx,[ebp+900]
 mov [ebx+edi*1+2048],dl
 mov edi,[ebp+920]
 mov edx,[ebp+932]
 add edx,[ebp+884]
 mov [ebx+edi*1+2048],dl
 mov ecx,[ebp+968]
 mov edx,ecx
 add [ebp+928],ecx
 add [ebp+920],edx
 xor edx,edx
 jz iek4304
iek23bot: mov edx,[ebp+1012]
 cmp edx,[ebp+972]
 jz iek25top
 mov edx,[ebp+916]
 cmp edx,[ebp+972]
 jnz iek25top
 jmp iek30bot
iek25top: mov edx,[ebp+968]
 add [esi+y],edx
 mov ecx,[ebp+964]
 mov [esi+insel],ecx
 mov edx,[esi+insel]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call aptinsert
; rem add esp,[ebp+940]
 mov edx,[esi+insel]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
; rem add esp,[ebp+940]
 cmp eax,[ebp+972]
 jz iek27
 mov ecx,[ebp+968]
 mov [esi+marginselect],ecx
iek27: mov edx,[ebp+964]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearline
; rem add esp,[ebp+940]
 mov edx,[esi+y]
 sub edx,[ebp+964]
 mov [esi+y],edx
 mov ecx,[ebp+968]
 mov [esi+alsel],ecx
iek30bot: xor edi,edi
 mov eax,[ebp+976]
 mov esi,[ebp+1004]
 mov [ebp+1012],esi
 mov [ebp+1008],eax
 add esp,[ebp+896]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of iek2000
; gek2040(lnes* rayloc4,int zurtwo)
; 1004 retad    1008 *rayloc4    1012 zurtwo
; 992 esi    996 edi    1000 ebp
; 980 ecx    984 edx    988 ebx
; 968 1    972 0    976 eax
; 956 4    960 3    964 2
; 944 7    948 gekspfix    952 5
; 932 10    936 rr2040    940 8
gek2040: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1000
 mov ecx,esi
 mov edx,esi
 xor edi,edi
 sub ecx,989
 mov eax,ecx
 add eax,eax
 add eax,eax
; mov [ebp+948],eax
 sub edx,999
gek204pu: push edi
 add edi,edx
 sub ecx,edx
 jnz gek204pu
 mov [ebp+948],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov ecx,[ebp+1012]
 cmp ecx,[ebp+972]
 jnz noniek2041
 mov edx,[ebp+972]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call iek2000
; rem add esp,[ebp+940]
noniek2041: mov edx,[ebp+972]
 mov [ebx+chnext],edx
 mov ecx,[ebp+1008]
 push ecx
 call laput12
; rem add esp,[ebp+956]
 mov ecx,[ebx+marginselect]
 mov edx,[ebp+968]
; ecx marginselect    or    edx 1    for x
 mov [ebx+x],ecx
 mov ecx,[ebx+y]
 add ecx,[ebp+968]
 mov [ebx+y],ecx
 mov eax,[ebp+976]
 mov esi,[ebp+1004]
 mov [ebp+1012],esi
 mov [ebp+1008],eax
 add esp,[ebp+948]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of gek2040
; dkx2050(lnes *rayloc4, int deltype44)
; 1004 retad    1008 *rayloc4    1012 deltype44
; 988 ebx    992 esi    996 edi    1000 ebp
; 972 0    976 eax    980 ecx    984 edx
; 956 4    960 3    964 2    968 1
; 940 8    944 7    948 6    952 5
; 924 12   928 11    932 10    936 9
; 908 16   912 15    916 14    920 13
; 892 20    896 ix4    900 lval4    904 fixdkxsp
; 876 24    880 deldisp    884 cc4    888 tnydeltype
; 860 28    864 dd4    868 26    872 deltype
; 844 32    848 delgcm    852 30    856 delgtl
; 828 36    832 albase4    836 isi4    840 iisub4
; 812 40    816 39    820 38    824 whereray4
; 796 44    800 43    804 42    808 41
; 780 48    784 47    788 46    792 45
dkx2050: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1049
 mov ecx,esi
 mov edx,esi
 xor edi,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
 sub edx,1048
dkx205pu: push edi
 add edi,edx
 sub ecx,edx
 jnz dkx205pu
 mov [ebp+904],eax
 mov esi,[ebp+1012]
 mov [ebp+872],esi
 mov ebx,[ebp+908]
 push ebx
 push esi
 call smposdiv
; rem add esp,[ebp+940]
 push eax
 push ebx
 call nampy
; rem add esp,[ebp+940]
 sub esi,eax
 mov [ebp+888],esi
 xor esi,esi
 lea ebx,[esi+chdelval]
 xor ecx,ecx
 push ecx
 call getreala
; rem add esp,[ebp+956]
 add ebx,eax
 sub ebx,512
 mov edi,[ebp+888]
 mov ecx,[ebx+edi*4+512]
 mov [ebp+856],ecx
 mov esi,[ebp+1008]
 sub esi,8192
 lea ecx,[esi+crz0160]
 sub ecx,2048
 mov [ebp+824],ecx
 mov edx,[ebp+856]
 cmp edx,2156
 jnz non2156
 mov ecx,[ebp+968]
 mov [esi+alsel],ecx
 mov [esi+chdoc],ecx
 xor edi,edi
 add edi,2142
 mov [ebp+856],edi
 mov ecx,[ebp+968]
 cmp ecx,[esi+x]
 js isdkxe2158
 cmp ecx,[esi+y]
 jns non2156
isdkxe2158: xor edi,edi
 add edi,2158
 mov [ebp+856],edi
non2156: mov edx,[ebp+856]
 cmp edx,2158
 jnz non2158
 mov edi,[esi+x]
 sub edi,[ebp+968]
 mov [esi+x],edi
 xor ebx,ebx
 mov [esi+inspg],ebx
 mov [ebp+832],ebx
 add ebx,2054
 mov [ebp+856],ebx
 mov ecx,[esi+x]
 cmp ecx,[ebp+968]
 jns non2158
 xor edx,edx
 add edx,2162
 mov [ebp+856],edx
 mov ecx,[ebp+968]
 mov [esi+x],ecx
non2158: mov edx,[ebp+856]
 cmp edx,2162
 jnz non2162
 mov edi,[ebp+968]
 mov [esi+inspg],edi
 xor ecx,ecx
 add ecx,2167
 mov [ebp+856],ecx
 cmp edi,[esi+y]
 js non2162
 mov [esi+x],edi
 mov [esi+y],edi
 xor ecx,ecx
 add ecx,2055
 mov [ebp+856],ecx
non2162: mov edx,[ebp+856]
 cmp edx,2167
 jnz non2167
 mov ecx,[esi+y]
 mov edi,[ebp+968]
 sub ecx,edi
 mov [esi+y],ecx
 mov ebx,[ebp+1008]
 push ebx
 call lalocal12
; rem add esp,[ebp+956]
 mov edx,[esi+alsel]
 push edx
 push ebx
 call dlenval
; rem add esp,[ebp+940]
 mov [ebp+900],eax
 add eax,edi
 mov [esi+x],eax
 mov ecx,[ebp+888]
 mov [ebp+872],ecx
 xor edx,edx
 add edx,2055
 mov [ebp+856],edx
 mov ecx,[esi+a80w]
 cmp ecx,[esi+x]
 jns non2167
 mov [esi+x],ecx
non2167: mov edx,[ebp+856]
 cmp edx,2050
 jnz non2050
 mov edx,[ebp+968]
 mov [esi+alsel],edx
 xor ecx,ecx
 add ecx,2054
 mov [ebp+856],ecx
non2050: mov edx,[ebp+856]
 cmp edx,2054
 jnz non2054
 xor ebx,ebx
 mov [esi+inspg],ebx
 xor ecx,ecx
 add ecx,2055
 mov [ebp+856],ecx
non2054: mov edx,[ebp+856]
 cmp edx,2055
 jz isdk2055
 jmp non2055
isdk2055: mov edi,[ebp+968]
 mov [esi+chzerv],edi
 xor ebx,ebx
 mov [ebp+832],ebx
 mov [esi+chnext],ebx
 mov ecx,[ebp+832]
 add ecx,[esi+x]
 sub ecx,edi
 mov [ebp+840],ecx
 xor ecx,ecx
 add ecx,2067
 mov [ebp+856],ecx
 mov edx,[ebp+952]
 cmp edx,[esi+alsel]
 js setdk2070
 cmp ebx,[esi+insertype]
 jz skipkx2070
setdk2070: xor edx,edx
 add edx,2070
 mov [ebp+856],edx
skipkx2070: mov ecx,[ebp+856]
 cmp ecx,2067
 jnz non2055
 mov ebx,[ebp+824]
 mov edx,[ebp+844]
 mov edi,[ebp+840]
 mov [ebx+edi*1+2048],dl
non2055: mov edx,[ebp+856]
 cmp edx,2070
 jz isdk2070
 jmp non2070
isdk2070: mov edx,[esi+alsel]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
; rem add esp,[ebp+940]
 mov [ebp+900],eax
 xor ecx,ecx
 add ecx,2075
 mov [ebp+856],ecx
 mov edx,[ebp+952]
 mov ecx,[ebp+780]
 add ecx,[ebp+912]
 cmp edx,[esi+alsel]
 js setdk2076
 cmp ecx,[ebp+872]
 jns skipkx2076
setdk2076: xor edx,edx
 add edx,2076
 mov [ebp+856],edx
skipkx2076: mov ecx,[ebp+856]
 cmp ecx,2075
 jnz skipkx2096
 mov edx,[ebp+900]
 cmp edx,[esi+x]
 jns skipkx2096
 xor ecx,ecx
 add ecx,2096
 mov [ebp+856],ecx
skipkx2096: mov edx,[ebp+856]
 cmp edx,2095
 jns skipkx2084
 xor ecx,ecx
 add ecx,2084
 mov [ebp+856],ecx
skipkx2084: mov edx,[ebp+856]
 cmp edx,2084
 jz startik2084
ron2084: jmp non2084
startik2084: mov ecx,[esi+x]
 mov [ebp+896],ecx
loop2084top: mov ecx,[ebp+856]
 cmp ecx,2084
 jnz ron2084
 mov edx,[ebp+832]
 add edx,[ebp+896]
 sub edx,[ebp+968]
 mov [ebp+836],edx
 mov ecx,[ebp+896]
 cmp ecx,[ebp+900]
 js skipkx2090
 xor edx,edx
 add edx,2090
 mov [ebp+856],edx
skipkx2090: mov edx,[ebp+856]
 cmp edx,2084
 jnz ron2084
 mov ebx,[ebp+824]
 xor edx,edx
 mov edi,[ebp+836]
 mov ecx,[ebp+968]
 add edi,ecx
 mov dl,[ebx+edi*1+2048]
 sub edi,ecx
 mov [ebx+edi*1+2048],dl
 add [ebp+896],ecx
 xor ecx,ecx
 jz loop2084top
non2084: mov edx,[ebp+856]
 cmp edx,2090
 jnz non2070
 mov ebx,[ebp+824]
 mov edx,[ebp+844]
 mov edi,[ebp+836]
 mov [ebx+edi*1+2048],dl
 xor ecx,ecx
 add ecx,2067
 mov [ebp+856],ecx
non2070: mov edx,[ebp+856]
 cmp edx,2096
 jz isk2096
 jmp non2096
isk2096: mov ecx,[ebp+968]
 add ecx,[esi+a80w]
 sub ecx,[esi+x]
 mov [ebp+880],ecx
 mov edx,[ebp+968]
 mov [esi+alsel],edx
 xor ebx,ebx
 mov [ebp+832],ebx
 mov edx,[esi+x]
 mov [ebp+896],edx
 xor ecx,ecx
 add ecx,2106
 mov [ebp+856],ecx
loop2106: mov edx,[ebp+856]
 cmp edx,2106
 jz isdk2106
ron2106: jmp non2106
isdk2106: mov ecx,[ebp+896]
 sub ecx,[ebp+968]
 mov [ebp+884],ecx
 add ecx,[ebp+880]
 mov [ebp+864],ecx
 xor ecx,ecx
 add ecx,2112
 mov [ebp+856],ecx
 mov edx,[ebp+884]
 cmp edx,[esi+a80w]
 jns check22106
 xor ecx,ecx
 add ecx,2106
 mov [ebp+856],ecx
check22106: mov edx,[ebp+856]
 cmp edx,2106
 jnz ron2106
 mov ecx,[ebp+832]
 add ecx,[ebp+864]
 mov [ebp+836],ecx
 xor edx,edx
 mov ebx,[ebp+824]
 mov edi,[ebp+836]
 mov dl,[ebx+edi*1+2048]
 mov edi,[ebp+832]
 add edi,[ebp+884]
 mov [ebx+edi*1+2048],dl
 mov ecx,[ebp+968]
 add [ebp+896],ecx
 jmp loop2106
non2106: mov ecx,[ebp+880]
 mov [ebp+896],ecx
loop2107: mov ecx,[ebp+896]
 cmp ecx,[ebp+972]
 jz bot2107
 mov edx,[ebp+832]
 add edx,[ebp+884]
 mov [ebp+836],edx
 mov eax,[ebp+844]
 mov ebx,[ebp+824]
 mov edi,[ebp+836]
 mov [ebx+edi*1+2048],al
 mov ecx,[ebp+968]
 add [ebp+884],ecx
 mov edx,[ebp+896]
 sub edx,[ebp+968]
 mov [ebp+896],edx
 xor ecx,ecx
 jz loop2107
bot2107: xor edx,edx
 mov [ebp+896],edx
 add edx,2122
 mov [ebp+856],edx
loop2122: mov edx,[ebp+856]
 cmp edx,2122
 jz isdk2122
 jmp non2122
isdk2122: mov ecx,[esi+a80w]
 add ecx,[ebp+896]
 mov [ebp+884],ecx
 add ecx,[ebp+832]
 mov [ebp+836],ecx
 xor edx,edx
 add edx,2130
 mov [ebp+856],edx
 xor edx,edx
 mov ebx,[ebp+824]
 mov edi,[ebp+836]
 mov dl,[ebx+edi*1+2048]
 mov [ebp+848],edx
 cmp edx,[ebp+844]
 jz skip2108
 mov ecx,[ebp+968]
 mov [esi+inspg],ecx
 mov [esi+chnext],ecx
 xor edx,edx
 add edx,2067
 mov [ebp+856],edx
skip2108: mov edx,[ebp+856]
 cmp edx,2130
 jnz non2130
 mov edx,[ebp+896]
 add edx,[ebp+968]
 mov [ebp+896],edx
 xor ecx,ecx
 add ecx,2135
 mov [ebp+856],ecx
 mov edx,[ebp+896]
 cmp edx,[esi+a80w]
 jns non2130
 xor ecx,ecx
 add ecx,2122
 mov [ebp+856],ecx
non2130: jmp loop2122
non2122: mov edx,[ebp+856]
 cmp edx,2135
 jnz non2096
 mov edi,[esi+y]
 add edi,[ebp+968]
 mov [esi+y],edi
 xor edx,edx
 sub edx,[ebp+968]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call aptinsert
; rem add esp,[ebp+940]
 mov edi,[ebp+968]
 mov [esi+inspg],edi
 mov ecx,[esi+y]
 sub ecx,edi
 mov [esi+y],ecx
 xor edx,edx
 add edx,2067
 mov [ebp+856],edx
non2096: mov ecx,[ebp+856]
 cmp ecx,2067
 jnz non2067
 mov edx,[ebp+952]
 cmp edx,[esi+alsel]
;    value of alsel
 js non2067
 mov ecx,[ebp+1008]
 push ecx
 call laput12
; rem add esp,[ebp+956]
non2067: xor ebx,ebx
 mov eax,[ebp+976]
 mov esi,[ebp+1004]
 mov [ebp+1012],esi
 mov [ebp+1008],eax
 add esp,[ebp+904]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; end of dkx2050
; pairprline(lnes* tinyroy,int tinyboy, int rprlnumber,
;                        int curposone, int curpostwo);
; 1012 rprlnumber    1016 curposone    1020 curpostwo
; 1000 ebp    1004 *tinyroy    1008 tinyboy
; *** ERROR *** Forgot to insert retad at [ebp+1004]
; 1024 curpostwo
; 1012 tinyboy   1016 rprlnumber    1020 curposone
; 1000 ebp    1004 retad       1008 * tinyroy
; 984 edx    988 ebx    992 esi    996 edi
; 968 1    972 0    976 eax    980 ecx
; 952 5    956 4    960 3    964 2
; 936 9    940 8    944    948 rprtargline
; 920 13    924 12    928    932 rprtargad
; 904 17    908 16    912 wherecrz   916 rprsrcad
; 888 21    892 20    896 19    900 whereevwr
pairprline: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1022
 mov edx,esi
 mov ecx,esi
 sub edx,1021
 sub ecx,1000
 xor edi,edi
pairprpuli: push edi
 add edi,edx
 sub ecx,edx
 jnz pairprpuli
 mov ebx,[ebp+1008]
 sub ebx,8192
 lea ecx,[ebx+crz0160]
 lea edx,[ebx+evwr]
 mov [ebp+912],ecx
 mov [ebp+900],edx
 mov edi,[ebp+1012]
 add edi,[ebp+892]
 sub edi,[ebp+888]
 add edi,[ebp+972]
 mov [ebp+948],edi
 mov edx,[ebp+948]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 mov [ebp+932],eax
 mov edx,[ebp+1016]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 mov [ebp+916],eax
 mov esi,[ebp+916]
 mov edi,[ebp+932]
 sub esi,500
 sub edi,500
 add esi,[ebp+912]
 add edi,[ebp+900]
 mov ecx,[ebx+a80w]
 xor edx,edx
 mov eax,[ebp+968]
pairprloop: mov dl,[esi+500]
 mov [edi+500],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz pairprloop
 mov ecx,[ebp+1016]
 cmp ecx,[ebp+952]
 jnz norpcursor
 mov edx,[ebp+972]
 cmp edx,[ebp+1020]
 jns norpcursor
 mov edi,[ebp+1012]
 mov ecx,[ebp+1020]
 mov [ebx+onecurwozx],ecx
 mov [ebx+onecurwozy],edi
 mov ecx,[ebp+972]
 cmp ecx,[ebx+moualglobal]
 jz norpcursor
 cmp ecx,[ebx+mouallocal]
 jz norpcursor
 mov edx,[ebp+1024]
 mov [ebx+twocurwozx],edx
 mov [ebx+twocurwozy],edi
norpcursor: xor edi,edi
 add edi,1088
 sub edi,1000
 mov esi,[ebp+1004]
 mov eax,[ebp+976]
 mov [ebp+1024],esi
 mov [ebp+1020],eax
 add esp,edi
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 pop eax
 pop eax
 ret
; bottom of pairprline
; paicvgcline(lnes* icvgcine, int sslselfive,
;                int sposboy, int howmany);
; 1012 sslselfive    1016 sposboy   1020 howmany
; 1000 ebp        1004 retad    1008 *icvgcine
; 984 edx    988 ebx    992 esi    996 edi
; 968 1    972 0    976 eax    980 ecx
; 952 5    956 4    960 3    964 2
; 936 9    940 8    944 7    948 6
; 920 13    924 12    928 mcp    932 moucursorpos
; 904 17    908 16    912 shift    916 z80widthx
; 888 21    892 20    896 yzz    900 ypplh
; 872 25    876 24    880 xzz    884 concolor
; 856 29    860 28    864    868 cvgcpen
; 840 33    844 32    848 fixesp4919    852
paicvgcline: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1034
 mov edx,esi
 sub edx,1033
 mov ecx,esi
 sub ecx,1000
 xor edi,edi
 mov eax,ecx
 add eax,eax
 add eax,eax
pcicvgliu: push edi
 add edi,edx
 sub ecx,edx
 jnz pcicvgliu
 mov [ebp+848],eax
 xor ecx,ecx
 mov [ebp+932],ecx
 mov [ebp+928],ecx
 mov edx,[ebp+1016]
 mov [ebp+912],edx
 mov [ebp+868],ecx
 mov [ebp+884],ecx
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov edx,[ebp+1012]
 cmp edx,[ebp+952]
 jz gclistart
 jmp gcliskipone
gclistart: mov edx,[ebx+prindiff]
 xor edi,edi
 cmp edx,edi
 jns cvglin11
 mov [ebx+prindiff],edi
cvglin11: mov edx,[ebx+y]
 sub edx,[ebx+prindiff]
 mov [ebx+prinjill],edx
 mov edx,[ebx+ypheight]
 sub edx,[ebx+nznormalend]
 cmp edx,[ebx+prinjill]
 jns cvglin14
 mov edx,[ebx+y]
 add edx,[ebx+nznormalend]
 sub edx,[ebx+ypheight]
 mov [ebx+prindiff],edx
cvglin14: mov edx,[ebx+prinjill]
 cmp edx,[ebp+968]
 jns cvglin16
 mov edx,[ebx+y]
 sub edx,[ebp+968]
 mov [ebx+prindiff],edx
cvglin16: mov edx,[ebx+prindiff]
 add edx,[ebp+1016]
 mov [ebp+900],edx
 mov edx,[ebp+1020]
 cmp edx,[ebp+968]
 js cvglin20
 cmp edx,[ebp+960]
 jns cvglin20
 mov edx,[ebx+y]
 cmp edx,[ebp+900]
 jnz cvglin20
 mov edx,[ebp+968]
 mov [ebp+868],edx
 mov edx,[ebx+x]
 mov [ebp+928],edx
cvglin20: mov edi,[ebp+968]
 cmp edi,[ebp+1020]
 jns cvglin26
 mov [ebp+868],edi
cvglin26: mov edi,[ebp+972]
 cmp edi,[ebp+868]
 jnz cvglin28
cvglin27: jmp gcliskipone
cvglin28: mov edi,[ebp+900]
 mov edx,[ebp+952]
 mov ecx,[ebp+952]
 mov eax,[ebp+1008]
 push edi
 push edx
 push ecx
 push eax
 call rw8056
; rem add esp,[ebp+908]
 mov edx,[ebp+1020]
 cmp edx,[ebp+960]
 jns cvglin27
 xor edi,edi
 cmp edi,[ebx+moualglobal]
 jz cvglin27
 mov edi,[ebx+prindiff]
 sub edi,[ebx+prindiffprv]
 add edi,[ebx+mouy]
 mov [ebx+mouy],edi
 mov edx,[ebx+prindiff]
 mov [ebx+prindiffprv],edx
 mov ecx,[ebx+mouy]
 sub ecx,[ebp+900]
 cmp ecx,[ebp+972]
 jnz gcliskipone
 mov edx,[ebx+moux]
 cmp edx,[ebp+968]
 js gcliskipone
 mov edx,[ebx+moux]
 mov [ebp+932],edx
gcliskipone: mov edx,[ebp+1012]
 sub edx,[ebp+968]
 cmp edx,[ebp+936]
 jns cvglin40
 cmp edx,[ebp+952]
 js cvglin40
 mov edx,[ebp+968]
 mov [ebp+868],edx
cvglin40: mov ecx,[ebp+868]
 cmp ecx,[ebp+972]
 jz cvgclin70
bvgclin70: mov edx,[ebp+1012]
 cmp edx,[ebp+936]
 jns cvgclin50
 cmp edx,[ebp+948]
 js cvgclin50
 mov ecx,[ebx+x]
 mov [ebp+928],ecx
cvgclin50: mov edi,[ebp+932]
 xor edx,edx
 cmp edx,[ebx+insertype]
 jnz cvgclin53
 xor edi,edi
cvgclin53: mov edx,[ebp+928]
 mov ecx,[ebp+1012]
 mov eax,[ebp+912]
 mov esi,[ebp+1008]
 push edi
 push edx
 push ecx
 push eax
 push esi
 call pairprline
; rem add esp,[ebp+892]
cvgclin70: mov eax,[ebp+976]
 mov esi,[ebp+1004]
 mov [ebp+1020],esi
 mov [ebp+1016],eax
 add esp,[ebp+848]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 pop eax
 ret
; bottom of paicvgcline
; pachrvgapage(lnes* ghowage, int ghowmany);
; 1000 ebp    1004 ret    1008 *ghowage    1012 ghowmany
; 984 edx    988 ebx    992 esi         996 edi
; 968 1    972 0    976 eax     980 ecx
; 952 5    956 4    960 3    964 2
; 936 9    940 8    944 7    948 6
; 920 13    924 12    928 fixesp5090    932 10
; 904 17    908 16    912 15    916 pavpagectr
pachrvgapage: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1018
 mov edx,esi
 sub edx,1017
 mov ecx,esi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
 xor edi,edi
pachrvgapgu: push edi
 add edi,edx
 sub ecx,edx
 jnz pachrvgapgu
 mov [ebp+928],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov ecx,[ebp+968]
 mov [ebp+916],ecx
pachvploop: mov edi,[ebx+ypheight]
 sub edi,[ebx+nznormalend]
 cmp edi,[ebp+916]
 js pachvpbot
 mov esi,[ebp+1012]
 mov edx,[ebp+916]
 mov ecx,[ebp+952]
 mov eax,[ebp+1008]
 push esi
 push edx
 push ecx
 push eax
 call paicvgcline
; rem add esp,[ebp+908]
 mov ecx,[ebp+916]
 add ecx,[ebp+968]
 mov [ebp+916],ecx
 xor edi,edi
 jz pachvploop
pachvpbot: xor edi,edi
 mov eax,[ebp+976]
 mov esi,[ebp+1004]
 mov [ebp+1012],esi
 mov [ebp+1008],eax
 add esp,[ebp+928]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of pachrvgapage
; udregkey2176(lnes* udbpoint, int udbkeychr)
; 1004 retad    1008 *udbpoint    1012 udbkeychr
; 988 ebx    992 esi    996 edi    1000 ebp
; 972 0    976 eax    980 ecx     984 edx
; 956 4    960 3    964 2    968 1
; 940 8    944 7    948 6    952 5
; 924 12    928 11    932 10    936 9
; 908 16    912 15    916 fixesp    920 peter8max
; 892 20    896 19    900 *bwv2176    904 pete8len
; 876 24    880 23    884 22   888 petro8ctr
; 860 28    864 27    868    872 udregkeyjmp
; 844 32    848 31    852    856 udrkeytype
; 828 36    832 35    836    840 udrkeychr
; 812 40    816 39    820    824 rlkey
; 796 44    800 43    804    808 crzwhere-2048
; 780 48    784 47    788    792 ninewhere
udregkey2176: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1049
 mov edx,esi
 sub edx,1048
 mov ecx,esi
 sub ecx,1000
 xor edi,edi
 mov eax,ecx
 add eax,eax
 add eax,eax
udregpu2176: push edi
 add edi,edx
 sub ecx,edx
 jnz udregpu2176
 mov [ebp+916],eax
 mov ecx,[ebp+780]
 mov [ebp+856],ecx
 xor edi,edi
 add edi,53098
 mov esi,[ebp+1008]
 sub esi,8192
 lea edx,[esi+crz0160]
 sub edx,2048
 mov [ebp+808],edx
 mov [esi+dagrajmpnow],edi
 xor edi,edi
 add edi,52645
 mov [esi+freddynext],edi
 xor ecx,ecx
 cmp ecx,[esi+nznormalend]
 jnz usr000
 jmp udr009
usr000: mov ecx,[ebp+964]
 add ecx,[ebp+908]
 cmp ecx,[ebp+1012]
 jnz udr000
; ctrl R
 xor edi,edi
 add edi,52733
 mov ecx,[ebp+940]
 mov eax,[ebp+1008]
 push ecx
 push eax
 call dlenval
; rem add esp,[ebp+940]
 cmp eax,[ebp+968]
 js udvr00
 add edi,[ebp+960]
udvr00: mov [esi+freddynext],edi
udr000: mov ecx,[ebp+876]
 cmp ecx,[ebp+1012]
 jnz udr001
; ctrl X
 xor edi,edi
 add edi,52782
 mov [esi+freddynext],edi
udr001: mov ecx,[ebp+968]
 add ecx,[ebp+876]
 cmp ecx,[ebp+1012]
; ctrl Y
 jnz udr002
 xor edi,edi
 add edi,53072
 mov [esi+freddynext],edi
udr002: mov ecx,[ebp+876]
 sub ecx,[ebp+968]
 cmp ecx,[ebp+1012]
 jnz udr003
; ctrl W Whereis
 xor edi,edi
 add edi,52860
 mov [esi+freddynext],edi
udr003: xor edi,edi
 add edi,52645
 cmp edi,[esi+freddynext]
 jz udr009
 mov ecx,[esi+freddynext]
 mov [esi+dagrajmpnow],ecx
 mov ecx,[esi+y]
 mov [esi+yre],ecx
 xor ecx,ecx
 mov [esi+onecurwozx],ecx
 mov [esi+onecurwozy],ecx
 jmp udrnot2190
udr009: xor ecx,ecx
 add ecx,2176
 mov [ebp+872],ecx
 xor edi,edi
 add edi,3255
 sub edi,3000
 mov ecx,[ebp+1012]
 mov eax,ecx
 and eax,edi
 mov [ebp+840],eax
 cmp edi,ecx
 js udr012
 mov eax,[ebp+968]
 add eax,[ebp+780]
 mov [ebp+856],eax
udr012: xor edx,edx
 add edx,1024
 and edx,ecx
 jz udr014
 mov eax,[ebp+964]
 add eax,[ebp+780]
 mov [ebp+856],eax
udr014: mov eax,[ebp+780]
 cmp eax,[ebp+856]
 jns udr016
 xor edx,edx
 add edx,2192
 mov [ebp+872],edx
udr016: mov edx,[ebp+800]
 mov ecx,[ebp+796]
 cmp edx,ecx
 jnz udr018
 mov edx,[ebp+1008]
 push edx
 call lalocal12
; rem add esp,[ebp+956]
udr018: mov edx,[ebp+872]
 sub edx,2192
 jnz udrnodel30
 mov edx,[ebp+840]
 cmp edx,[ebp+940]
 jnz udrnodel30
 mov edx,[ebp+844]
 add edx,[ebp+844]
 add edx,[ebp+948]
 mov eax,[ebp+1008]
 push edx
 push eax
 call dkx2050
; rem add esp,[ebp+940]
 mov edx,[ebp+968]
 mov [esi+chdoc],edx
 add edx,2175
 mov [ebp+872],edx
 xor ecx,ecx
 cmp ecx,[esi+inspg]
 jnz udrnodel30
 mov eax,[ebp+944]
 add edx,eax
 add edx,eax
 mov [ebp+872],edx
udrnodel30: mov edx,[ebp+840]
 mov eax,[ebp+948]
 add eax,[ebp+944]
 cmp edx,eax
 jz udr029
 cmp edx,[ebp+864]
 jnz udr028a
 mov edi,edx
 jmp udr14g
udr028a: cmp edx,[ebp+932]
 jnz udrnoent40
udr029: mov edx,[ebp+872]
 sub edx,2192
 jnz udrnoent40
 xor edx,edx
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call gek2040
; rem add esp,[ebp+940]
 mov ecx,[ebp+968]
 mov [esi+chdoc],ecx
 mov edx,[esi+marginselect]
 mov [esi+x],edx
 xor ecx,ecx
 add ecx,2176
 mov [ebp+872],ecx
udrnoent40: mov edx,[ebp+872]
 cmp edx,2192
 jnz udr037
 mov edx,[ebp+840]
 cmp edx,[ebp+864]
 jnz udr037
 xor ecx,ecx
 add ecx,2190
 mov [ebp+872],ecx
udr037: mov edx,[ebp+872]
 cmp edx,2192
 jnz udr039
 mov ecx,[ebp+968]
 add ecx,[ebp+780]
 cmp ecx,[ebp+856]
 jz udr040
udr039: jmp noudr1864
udr040: mov edi,[ebp+840]
 mov [ebp+824],edi
 mov ebx,[ebp+844]
 xor edx,edx
 add edx,1127
 sub edx,1000
 cmp edi,ebx
 js udr045
 cmp edi,edx
 jns udr045
 xor eax,eax
 jz udr046
udr045: mov [ebp+824],ebx
udr046: mov eax,[ebp+968]
 mov edx,[ebp+824]
 mov ecx,[ebp+1008]
 push eax
 push edx
 push ecx
 call ikx1864
; rem add esp,[ebp+924]
 mov ecx,[esi+afilelen]
 cmp ecx,[esi+y]
 jns udr051
 mov edx,[ebp+968]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
; rem add esp,[ebp+940]
 xor edx,edx
 cmp edx,eax
 jns udr051
 mov ecx,[esi+afilelen]
 add ecx,[ebp+968]
 mov [esi+afilelen],ecx
udr051: xor edx,edx
 add edx,2176
 mov [ebp+872],edx
 xor ecx,ecx
 cmp ecx,[esi+inspg]
 jnz noudr1864
 sub edx,[ebp+932]
 add edx,[ebp+876]
 mov [ebp+872],edx
noudr1864: mov ecx,[ebp+856]
 mov edx,[ebp+780]
 add edx,[ebp+964]
 cmp ecx,edx
 jnz udr056
 mov ecx,[ebp+872]
 cmp ecx,2192
 jz udr057
udr056: jmp noudrjumps
udr057: xor ebx,ebx
 add ebx,2192
 mov edi,[ebp+840]
 add edi,2000
 cmp edi,2080
 jnz udr060
 xor ebx,ebx
 add ebx,2231
udr060: cmp edi,2072
 jnz udr062
 xor ebx,ebx
 add ebx,2234
udr062: cmp edi,2073
 jnz udr064
 xor ebx,ebx
 add ebx,2238
udr064: cmp edi,2081
 jnz udr066
 xor ebx,ebx
 add ebx,2242
udr066: cmp edi,2077
 jnz udr068
 xor ebx,ebx
 add ebx,2246
udr068: cmp edi,2075
 jnz udr070
 xor ebx,ebx
 add ebx,2252
udr070: cmp edi,2079
; 79 is O end key
 jnz udr072
 xor edx,edx
 cmp edx,[esi+nznormalend]
 jz urr071
 xor ebx,ebx
 add ebx,2261
 xor edx,edx
 jz udr072
urr071: xor ebx,ebx
 add ebx,2263
udr072: cmp edi,2082
 jnz udr074
 xor ebx,ebx
 add ebx,2274
udr074: cmp edi,2083
 jnz udd075
 xor ebx,ebx
 add ebx,2290
udd075: cmp edi,2071
 jnz udr080
udr076: xor edx,edx
 cmp edx,[esi+nznormalend]
 jz udr14g
 xor ebx,ebx
 add ebx,2265
 xor edx,edx
 jz udr080
udr14g: xor ebx,ebx
 add ebx,2176
 xor edx,edx
 add edx,52646
 mov [esi+dagrajmpnow],edx
 xor edx,edx
 add edx,52645
 mov [esi+freddynext],edx
udr080: cmp edi,2060
 jnz udr082
 xor ebx,ebx
 add ebx,2176
udr082: mov [ebp+872],ebx
 cmp ebx,2192
 jnz noudrjumps
 xor ebx,ebx
 add ebx,2176
 mov [ebp+872],ebx
noudrjumps: mov ebx,[ebp+872]
 cmp ebx,2231
 jnz udr088
; 2231 downarrow P
 mov ecx,[esi+y]
 add ecx,[ebp+968]
 mov [esi+y],ecx
 xor ebx,ebx
 add ebx,2176
 mov [ebp+872],ebx
udr088: cmp ebx,2234
 jnz udr091
; 2234 uparrow H
 mov ecx,[esi+y]
 sub ecx,[ebp+968]
 mov [esi+y],ecx
 xor ebx,ebx
 add ebx,2176
 mov [ebp+872],ebx
udr091: cmp ebx,2238
 jnz udr093
; 2238 pageup I
 mov edx,[ebp+956]
 add edx,[esi+y]
 add edx,[esi+nznormalend]
 sub edx,[esi+ypheight]
 mov [esi+y],edx
 xor ebx,ebx
 add ebx,2176
 mov [ebp+872],ebx
udr093: cmp ebx,2242
 jnz udr096
; 2242 page down Q
 mov edx,[esi+y]
 add edx,[esi+ypheight]
 sub edx,[esi+nznormalend]
 sub edx,[ebp+956]
 mov [esi+y],edx
 xor ebx,ebx
 add ebx,2176
 mov [ebp+872],ebx
udr096: cmp ebx,2246
 jnz udr101
; 2246 rightarrow M
 mov ecx,[ebp+968]
 add [esi+x],ecx
 xor ebx,ebx
 add ebx,2190
 mov [ebp+872],ebx
 mov ecx,[esi+a80w]
 cmp ecx,[esi+x]
 jns udr101
 mov edx,[ebp+968]
 mov [esi+x],edx
 mov ecx,[esi+y]
 add ecx,edx
 mov [esi+y],ecx
 xor ebx,ebx
 add ebx,2176
 mov [ebp+872],ebx
udr101: cmp ebx,2252
 jz udr103
; 2252 leftarrow K
; udr102: jmp udrnot2252
udr102: xor edi,edi
 jz udrnot2252
udr103: mov edx,[esi+x]
 mov edi,[ebp+968]
 sub edx,edi
 mov [esi+x],edx
 xor ebx,ebx
 add ebx,2190
 mov [ebp+872],ebx
 cmp edx,edi
 jns udr102
 cmp edi,[esi+y]
 jns udr108
 mov ecx,[esi+y]
 sub ecx,edi
 mov [esi+y],ecx
udr108: mov ecx,[ebp+1008]
 push ecx
 call lalocal12
; rem add esp,[ebp+956]
 push edi
 push ecx
 call dlenval
; rem add esp,[ebp+940]
 add eax,edi
 mov [esi+x],eax
 mov ecx,[esi+a80w]
 cmp ecx,[esi+x]
 jns udr112
 mov edx,[esi+a80w]
 mov [esi+x],edx
udr112: xor ebx,ebx
 add ebx,2176
 mov [ebp+872],ebx
udrnot2252: cmp ebx,2261
 jnz udrnot2261
 mov ecx,[ebp+1008]
 push ecx
 call lalocal12
; rem add esp,[ebp+956]
 mov edi,[ebp+968]
 push edi
 push ecx
 call dlenval
; rem add esp,[ebp+940]
 mov [esi+x],edi
 add edi,eax
 mov edx,[esi+a80w]
 cmp edx,edi
 js udrbot2260
 mov [esi+x],edi
udrbot2260: xor ebx,ebx
 add ebx,2190
 mov [ebp+872],ebx
udrnot2261: cmp ebx,2263
 jnz udr116
; 2263 endkey O
 mov edi,[ebp+968]
 cmp edi,[esi+x]
 jns udr116
 mov [esi+x],edi
 xor ebx,ebx
 add ebx,2190
 mov [ebp+872],ebx
udr116: cmp ebx,2263
 jnz udr120
 mov edi,[ebp+968]
 cmp edi,[esi+x]
 jnz udr120
 mov ecx,[esi+y]
 add edi,[esi+afilelen]
 cmp ecx,edi
 jns udr119
 mov [esi+y],edi
 xor ebx,ebx
 add ebx,2176
 mov [ebp+872],ebx
 xor eax,eax
 jz udr120
udr119: mov edx,[ebp+968]
 mov [esi+y],edx
 xor ebx,ebx
 add ebx,2176
 mov [ebp+872],ebx
udr120: cmp ebx,2265
 jnz udr121
 mov edx,[ebp+968]
 mov [esi+x],edx
 xor ebx,ebx
 add ebx,2190
 mov [ebp+872],ebx
udr121: cmp ebx,2274
 jnz udr124
; 2274 insertkey R
 mov edx,[ebp+968]
 sub edx,[esi+insertype]
 mov [esi+insertype],edx
 xor ebx,ebx
 add ebx,2190
 mov [ebp+872],ebx
udr124: cmp ebx,2290
 jnz udr130
; 2290 deletekey S
 xor edi,edi
 mov edx,[ebp+1008]
 push edi
 push edx
 call dkx2050
; rem add esp,[ebp+940]
 mov edx,[ebp+968]
 mov [esi+chdoc],edx
 xor ebx,ebx
 add ebx,2176
 mov [ebp+872],ebx
 cmp edi,[esi+inspg]
 jnz udr130
 xor ebx,ebx
 add ebx,2190
 mov [ebp+872],ebx
udr130: cmp ebx,2176
 jz udr132
; 2176 repaint page
 xor edi,edi
 jz udrnot2176
; jmp udrnot2176
udr132: mov edi,[ebp+968]
 mov edx,[esi+afilelen]
 mov ecx,[esi+y]
 cmp edx,ecx
 jns udr135
 add edx,edi
 mov [esi+y],edx
 mov ecx,edx
udr135: cmp ecx,edi
 jns udr137
 mov [esi+y],edi
udr137: mov ecx,[esi+x]
 mov edx,[esi+a80w]
 cmp edx,ecx
 jns udr139
 mov ecx,edx
 mov [esi+x],ecx
udr139: cmp ecx,edi
 jns udr141
 mov [esi+x],edi
udr141: mov ecx,[ebp+1008]
 push ecx
 call lalocal12
; rem add esp,[ebp+956]
 mov edx,[ebp+964]
 push edx
 push ecx
 call pachrvgapage
; rem add esp,[ebp+940]
 xor ebx,ebx
 xor ebx,ebx
 add ebx,2190
 mov [ebp+872],ebx
udrnot2176: cmp ebx,2190
 jz udr146
; 2190 repaint line
 jmp udrnot2190
udr146: mov edi,[ebp+968]
 mov edx,[esi+afilelen]
 mov ecx,[esi+y]
 cmp edx,ecx
 jns udr155
 add edx,edi
 mov [esi+y],edx
 mov ecx,edx
udr155: cmp ecx,edi
 jns udr157
 mov [esi+y],edi
udr157: mov ecx,[esi+x]
 mov edx,[esi+a80w]
 cmp edx,ecx
 jns udr159
 mov ecx,edx
 mov [esi+x],ecx
udr159: cmp ecx,edi
 jns udr161
 mov [esi+x],edi
udr161: mov ecx,[ebp+1008]
 push ecx
 call lalocal12
; rem add esp,[ebp+956]
 xor edi,edi
 mov edx,[esi+y]
 sub edx,[esi+prindiff]
 mov eax,[ebp+952]
 push edi
 push edx
 push eax
 push ecx
 call paicvgcline
; rem add esp,[ebp+908]
 mov edx,[ebp+960]
 add edx,[ebp+780]
 xor ecx,ecx
 cmp ecx,[esi+nznormalend]
 jz udv162
 and edx,[ebp+972]
udv162: add edx,[ebp+968]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call litrlsput
; rem add esp,[ebp+940]
; uses chnvalue(*chwvEBX subvEDI inchnEDX *bwv96ECX)
 mov edx,[ebp+936]
 sub edx,[ebp+968]
 mov ecx,[esi+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 sub eax,[ebp+972]
 add eax,[ebp+808]
 mov [ebp+792],eax
 mov edx,[ebp+936]
 add edx,[ebp+780]
 mov [ebp+900],edx
 mov edi,[ebp+812]
 add edi,[ebp+964]
 mov ebx,[ebp+792]
 add ebx,2048
 lea ecx,[ebp+900]
 mov edx,[ebp+960]
 add edx,[ebp+780]
 mov [ebp+901],dl
 mov edx,[esi+x]
 push ecx
 push edx
 push edi
 push ebx
 call chnvalue
; rem add esp,[ebp+908]
 mov edx,[ebp+944]
 add edx,[ebp+780]
 mov [ebp+901],dl
 add edi,[ebp+956]
 mov edx,[esi+y]
 push ecx
 push edx
 push edi
 push ebx
 call chnvalue
; rem add esp,[ebp+908]
 mov edx,[ebp+964]
 add edx,[ebp+780]
 mov [ebp+901],dl
 mov edx,[esi+y]
 sub edx,[esi+prindiff]
 add edi,[ebp+940]
 push ecx
 push edx
 push edi
 push ebx
 call chnvalue
; rem add esp,[ebp+908]
 mov edx,[ebp+944]
 add edx,[ebp+780]
 mov [ebp+901],dl
 add edi,[ebp+956]
 mov edx,[esi+afilelen]
 push ecx
 push edx
 push edi
 push ebx
 call chnvalue
; rem add esp,[ebp+908]
 mov edx,[ebp+884]
 add edx,[ebp+780]
 mov [ebp+900],edx
 mov edx,[ebp+780]
 add edx,[ebp+940]
 mov [ebp+901],dl
 mov edi,ebx
 sub edi,5500
 xor edx,edx
 mov dl,[edi+5500]
 cmp edx,[ebp+844]
 jnz skipleft2176
 mov edi,[ebp+968]
 mov edx,[esi+leftdebugger]
 lea eax,[esi+leftdebugger]
 add eax,edi
 push edi
 push eax
 call revicram
 add edi,edi
 or al,dl
; or dh,dl
 jz skipleft2176
 mov edx,[esi+leftdebugger]
 push ecx
 push edx
 push edi
 push ebx
 call chnvalue
; rem add esp,[ebp+908]
skipleft2176: mov edx,[esi+keysdebugger]
; or dh,dh
 lea eax,[esi+keysdebugger]
 add eax,[ebp+968]
 mov edi,[ebp+968]
 push edi
 push eax
 call revicram
 or al,al
 jz skiplebb2177
 mov edx,[esi+keysdebugger]
 mov edi,[ebp+780]
 add edi,[ebp+892]
 push ecx
 push edx
 push edi
 push ebx
 call chnvalue
; rem add esp,[ebp+908]
skiplebb2177: mov ebx,[ebp+1008]
 mov edi,[ebp+956]
 mov edx,[esi+ypheight]
 sub edx,[esi+nznormalend]
 add edx,[ebp+968]
 mov ecx,[ebp+936]
 push edi
 push edx
 push ecx
 push ebx
 call paicvgcline
; rem add esp,[ebp+908]
; 9 to ypheight+1
 mov edx,[ebp+940]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
; rem add esp,[ebp+940]
 mov [ebp+904],eax
 mov ecx,[ebp+908]
 sub ecx,[ebp+972]
 mov [ebp+920],ecx
 mov ebx,[ebp+792]
 sub ebx,[esi+a80w]
 cmp eax,[ebp+920]
 jns udr090
 cmp eax,[ebp+952]
 js udr090
 xor ecx,ecx
 xor edx,edx
udr085: mov edi,ecx
 mov dl,[ebx+edi*1+2048]
 add edi,[esi+a80w]
 mov [ebx+edi*1+2048],dl
 add ecx,[ebp+968]
 cmp ecx,[ebp+904]
 js udr085
 add ebx,[esi+a80w]
 mov edx,[ebp+844]
udr087: mov edi,ecx
 mov [ebx+edi*1+2048],dl
 add ecx,[ebp+968]
 cmp ecx,[ebp+920]
 js udr087
udr090: mov ebx,[ebp+1008]
 mov edi,[ebp+956]
 mov edx,[esi+ypheight]
 sub edx,[esi+nznormalend]
 add edx,[ebp+968]
 mov ecx,[ebp+936]
 push edi
 push edx
 push ecx
 push ebx
 call paicvgcline
; rem add esp,[ebp+908]
; 9 ypheight+1
 xor edi,edi
 cmp edi,[esi+nznormalend]
 jz udr092
 xor edx,edx
 add edx,2070
 sub edx,2000
 push edx
 push ebx
 call litrlsput
; rem add esp,[ebp+940]
 mov edi,[ebp+956]
 mov edx,[esi+ypheight]
 sub edx,[esi+nznormalend]
 add edx,[ebp+964]
 mov ecx,[ebp+936]
 push edi
 push edx
 push ecx
 push ebx
 call paicvgcline
; rem add esp,[ebp+908]
; 9 ypheight+2
udr092: mov edi,[ebp+964]
 mov edx,[esi+y]
 sub edx,[esi+prindiff]
 mov ecx,[ebp+952]
 push edi
 push edx
 push ecx
 push ebx
 call paicvgcline
; rem add esp,[ebp+908]
; 5  y-prindiff
udrnot2190: xor edi,edi
 mov eax,[ebp+976]
 mov esi,[ebp+1004]
 mov [ebp+1012],esi
 mov [ebp+1008],eax
 add esp,[ebp+916]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of udregkey2176
; line 6102
; litrlsput(lnes* rlslinal, int rlsindex)
; rlsindex >= 1 && rlsindex < 6000 for normal litharg line
; rlsindex == -11 send from crz0160(11);
; rlsindex is 52 for send to crz0160(9)
; rlsindex is > 6000 to put (rlsindex - 6000) to
;                            crz0160(3)
; if evwr is destination then scroll and put
; new line at ypheight+1
; unless rlsindex is 70.
; 1004 retad    1008 *rlslinal    1012 rlsindex
; 988 ebx     992 esi     996 edi     1000 ebp
; 972 0    976 eax    980 ecx     984 edx
; 956 4    960 3    964 2    968 1
; 940 8    944 7    948 6    952 5
; 924 12    928 11    932 10    936 9
; 908 16    912 15    916 cst96    920
; 892 20    896 19    900    904 scrollsize
; 876 24    880 23    884    888 wherecrz0160-512
; 860 28    864 27    868    872 whereevwr-512
; 844 32    848 31    852    856 evwrset
; 828 36    832 35    836 highl    840 33
; 812 40    816 39    820 fixesp    824 wherelit
; 164 = 41 * 4
; 300 512 = 128 * 4  300 - 808 line of text
litrlsput: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 xor edi,edi
 add esi,1041
 mov edx,esi
 sub edx,1040
 mov ecx,esi
 sub ecx,1000
 mov ebx,ecx
 add ebx,ebx
 add ebx,ebx
litrlsdpu: push edi
 add edi,edx
 sub ecx,edx
 jnz litrlsdpu
 xor eax,eax
 mov ecx,[ebp+956]
 mov edx,esi
 sub edx,785
litmpylop: push edx
 push eax
 call nampy
; rem add esp,[ebp+940]
 add eax,[ebp+844]
 sub ecx,[ebp+968]
 jnz litmpylop
 mov ecx,esi
 sub ecx,913
litrlsepu: push eax
 add ebx,[ebp+956]
 sub ecx,[ebp+968]
 jnz litrlsepu
 mov [ebp+820],ebx
 xor esi,esi
 push esi
 call getreala
; rem add esp,[ebp+956]
 lea ecx,[esi+litharg]
 add ecx,eax
 mov [ebp+824],ecx
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov ecx,[ebx+ypheight]
 sub ecx,[ebx+nznormalend]
 add ecx,[ebp+968]
 mov [ebp+836],ecx
 lea edx,[ebx+evwr]
 sub edx,512
 mov [ebp+872],edx
 lea ecx,[ebx+crz0160]
 sub ecx,512
 mov [ebp+888],ecx
 mov ecx,[ebx+a80w]
 mov edx,[ebp+836]
 add edx,[ebp+864]
 sub edx,[ebp+860]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 mov [ebp+856],eax
 xor esi,esi
 add esi,13881
 mov [ebp+916],esi
 xor ecx,ecx
 add ecx,[ebp+972]
 lea edx,[ebp+916]
 mov esi,[ebp+824]
 push esi
 push edx
 push ecx
 call rlnvalue
; rem add esp,[ebp+924]
 mov edi,eax
 mov edx,[ebp+1012]
 xor ecx,ecx
 add ecx,6000
 cmp edx,ecx
 js litr017
 sub edx,ecx
litr017: cmp edx,[ebp+968]
 jns litr020
 xor edx,edx
 jz skiprlsget
litr020: sub edx,[ebp+972]
 mov ecx,[ebp+940]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 mov esi,[ebp+824]
 lea ecx,[ebp+916]
 push esi
 push ecx
 push eax
 call rlnvalue
; rem add esp,[ebp+924]
 mov esi,eax
 add esi,edi
 add esi,[ebp+824]
 sub esi,4096
 xor edi,edi
 xor ecx,ecx
litr024: xor edx,edx
 mov dl,[esi+4096]
 cmp edx,[ebp+840]
 jz skiprlsget
 mov [ebp+edi*1+300],dl
 add esi,[ebp+968]
 add edi,[ebp+968]
 add ecx,[ebp+968]
 cmp ecx,[ebx+a80w]
 js litr024
skiprlsget: mov edx,[ebp+928]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 mov esi,eax
 add esi,[ebp+888]
 mov ecx,[ebx+a80w]
 mov eax,[ebp+968]
 xor edi,edi
 xor edx,edx
 sub edx,[ebp+928]
 cmp edx,[ebp+1012]
 jnz skiprlsm11
litr031: xor edx,edx
 mov dl,[esi+512]
 mov [ebp+edi*1+300],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz litr031
skiprlsm11: mov edx,[ebp+936]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 mov edi,eax
 add edi,[ebp+888]
 xor esi,esi
 mov edx,[ebp+1012]
 xor ecx,ecx
 cmp ecx,[ebx+nznormalend]
 jz litr035
 mov ecx,[ebp+968]
 cmp ecx,edx
 jz litr037
 xor ecx,ecx
 add ecx,2070
 sub ecx,2000
 cmp ecx,edx
 jz litr037
 mov ecx,[ebp+964]
 cmp ecx,edx
 jz litr037
; xxxxxxxxxxxx litr035 )
litr035: xor ecx,ecx
 add ecx,1027
; ecx is location of line for nine 27+25
 sub ecx,975
 cmp edx,ecx
 jnz skiprlsnine
litr037: xor edx,edx
 mov dl,[ebp+esi*1+300]
 mov [edi+512],dl
 add esi,[ebp+968]
 add edi,[ebp+968]
 cmp esi,[ebx+a80w]
 js litr037
 jmp litrlsend
skiprlsnine: xor ecx,ecx
 add ecx,6000
 mov edx,[ebp+1012]
 cmp edx,ecx
 js skiprlsrine
 mov edx,[ebp+960]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 mov edi,eax
 add edi,[ebp+888]
 xor esi,esi
 mov eax,[ebp+968]
 xor edx,edx
 jz litr045
; top of shifter
skiprlsrine: mov edx,[ebx+ypheight]
 sub edx,[ebx+nznormalend]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 mov [ebp+904],eax
 mov edi,[ebp+872]
 mov esi,edi
 add esi,[ebx+a80w]
 mov eax,[ebp+968]
 mov ecx,[ebp+904]
litr043: xor edx,edx
 mov dl,[esi+512]
 mov [edi+512],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz litr043
; bottom of shifter
 mov edi,[ebp+856]
 add edi,[ebp+872]
 xor esi,esi
 mov eax,[ebp+968]
litr045: xor edx,edx
 mov dl,[ebp+esi*1+300]
 mov [edi+512],dl
 add edi,eax
 add esi,eax
 cmp esi,[ebx+a80w]
 js litr045
litrlsend: xor edi,edi
 mov esi,[ebp+1004]
 mov eax,[ebp+976]
 mov [ebp+1012],esi
 mov [ebp+1008],eax
 add esp,[ebp+820]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of litrlsput
; int tinylenval(lnes* dent, int teub)
; 1004 retad    1008 *dent    1012 teub
; 988 ebx    992 esi    996 edi    1000 ebp
; 972 0    976 eax    980 ecx    984 edx
; 956 4    960 3    964 2    968 1
; 940 8    944 7    948 6    952 5
; 924 12    928 11    932 10    936 9
; 908 16    912 15    916    920
; 892 20    896 19    900    904 fixesp
; 876 24    880 23    884    888
; 860 28    864 27    868    872
; 844 32    848    852    856
tinylenval: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1033
 mov edx,edi
 sub edx,1032
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
tinylenpuv: push ebx
 add ebx,edx
 sub ecx,edx
 jnz tinylenpuv
 mov [ebp+904],eax
 mov edi,[ebp+1008]
 sub edi,8192
 lea ebx,[edi+crz0160]
 xor esi,esi
 mov edx,[ebp+1012]
 sub edx,[ebp+968]
 js skiptinylen
 mov ecx,[edi+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 add ebx,eax
 sub ebx,4096
 mov eax,[ebp+968]
tinylen09: xor edx,edx
 mov dl,[ebx+esi*1+4096]
 cmp edx,[ebp+844]
 jz skiptinylen
 add esi,eax
 cmp esi,ecx
 js tinylen09
skiptinylen: mov [ebp+1008],esi
 mov edi,[ebp+1004]
 mov [ebp+1012],edi
 add esp,[ebp+904]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of tinylenval
; int cmdjavcurz(lnes* nzcjes, int nzcjrepeat)
; 1004 retad    1008 *nzcjes    1012 nzcjrepeat
; 988 ebx    992 esi     996 edi     1000 ebp
; 972 0    976 eax    980 ecx    984 edx
; 956 4    960 3    964 2    968 1
; 940 8    944 7    948 6    952 5
; 924 12    928 11    932 10    936 9
; 908 16    912 15    916        920 13
; 892 20    896 19    900 elevbase    904 lenleven
; 876 24    880 23    884 stepbase    888 lbigleven
; 860 28    864 27    868 lenthree    872 lenstep
; 844 32    848 31    852 tinyhctr    856 threectr
; 828 36    832 35    836 cjcznzres    840 hdmoffset
; 812 40    816 39    820 9w        824 threebase
; 796 44    800 43    804 where160    808 jurcommand
; 780 48    784 47    788 3set     792 dowmanycmd
; 764 52    768 51    772 fixesp    776 javallowcmd
; 748 56    752 55    756 levset    760
cmdjavcurz: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1057
 mov edx,esi
 sub edx,1056
 mov ecx,esi
 sub ecx,1000
 xor edi,edi
 mov eax,ecx
 add eax,eax
 add eax,eax
cmdjavpuz: push edi
 add edi,edx
 sub ecx,edx
 jnz cmdjavpuz
 mov [ebp+772],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 lea ecx,[ebx+crz0160]
 mov [ebp+804],ecx
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 mov [ebp+756],eax
 mov edx,[ebp+960]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 mov [ebp+788],eax
 xor ecx,ecx
 mov [ebp+808],ecx
 add ecx,1300
 mov [ebp+852],ecx
 xor edx,edx
 mov [ebp+836],edx
 mov [ebp+856],edx
 mov edx,[ebp+968]
 mov [ebp+792],edx
 mov [ebp+776],edx
 mov esi,[ebp+756]
 add esi,[ebp+804]
 sub esi,512
 mov [ebp+900],esi
 mov edi,[ebp+788]
 add edi,[ebp+804]
 sub edi,512
 mov [ebp+824],edi
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
; rem add esp,[ebp+940]
 mov [ebp+888],eax
 push edx
 push ecx
 call tinylenval
; rem add esp,[ebp+940]
 mov [ebp+904],eax
 mov ecx,[ebp+904]
 cmp ecx,[ebp+968]
 jns cmdjav019
 xor edx,edx
 mov [ebp+776],edx
cmdjav019: mov ecx,[ebp+936]
 add ecx,[ebp+780]
 mov [ebp+820],ecx
 mov ecx,[ebp+888]
 sub ecx,[ebp+904]
 sub ecx,[ebp+964]
 jns cmdjav021
cmdjav020: xor esi,esi
 jz cmdjav028
cmdjav021: mov ecx,[ebp+972]
 cmp ecx,[ebp+776]
 jns cmdjav020
 mov edx,[ebp+904]
 add edx,[ebp+964]
 mov [ebp+840],edx
 mov edx,[ebp+888]
 sub edx,[ebp+840]
 add edx,[ebp+968]
 add edx,[ebp+780]
 mov [ebp+821],dl
 mov edi,[ebp+900]
 lea edx,[ebp+820]
 add edi,512
 mov ecx,[ebp+840]
 sub ecx,[ebp+968]
 push edi
 push edx
 push ecx
 call rlnvalue
; rem add esp,[ebp+924]
 mov [ebp+792],eax
cmdjav028: mov esi,[ebp+972]
 cmp esi,[ebp+776]
 js cmdjav030
cmdjav029: jmp cmdjavclr3
cmdjav030: mov ecx,[ebp+960]
 mov [ebp+856],ecx
cmdjavolop: mov ecx,[ebp+860]
 cmp ecx,[ebp+856]
 js cmdjav029
 mov edx,[ebp+776]
 cmp edx,[ebp+972]
 jz cmdjav029
 mov ecx,[ebp+856]
 add ecx,6000
 mov eax,[ebp+1008]
 push ecx
 push eax
 call litrlsput
; rem add esp,[ebp+940]
 mov edx,[ebp+960]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call tinylenval
; rem add esp,[ebp+940]
 mov [ebp+868],eax
 mov ecx,[ebp+868]
 cmp ecx,[ebp+904]
 jz cmdjav038
 jmp cmdjavobot
cmdjav038: mov edi,[ebp+972]
 mov [ebp+852],edi
 mov edx,[ebp+968]
 mov [ebp+836],edx
cmdjavilop: mov ecx,[ebp+852]
 cmp ecx,[ebp+904]
 jns cmdjavafti
cmdjav041: xor eax,eax
 xor edx,edx
 mov esi,[ebp+852]
 mov edi,esi
 add esi,[ebp+900]
 add edi,[ebp+824]
 mov al,[esi+512]
 mov dl,[edi+512]
 cmp eax,edx
 jz cmdjav045
 mov ecx,[ebp+972]
 mov [ebp+836],ecx
cmdjav045: mov edx,[ebp+852]
 add edx,[ebp+968]
 mov [ebp+852],edx
 xor ecx,ecx
 jz cmdjavilop
cmdjavafti: mov ecx,[ebp+972]
 cmp ecx,[ebp+836]
 jz cmdjavobot
 mov eax,[ebp+856]
 mov [ebp+808],eax
 xor ecx,ecx
 mov [ebp+776],ecx
cmdjavobot: mov ecx,[ebp+856]
 add ecx,[ebp+968]
 mov [ebp+856],ecx
 jmp cmdjavolop
cmdjavclr3: mov edx,[ebp+960]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearline
; rem add esp,[ebp+940]
 mov ecx,[ebp+808]
 mov [ebp+836],ecx
 xor edi,edi
 cmp edi,[ebp+1012]
 jz cmdjav060
 mov esi,[ebp+792]
 mov [ebp+836],esi
cmdjav060: mov edi,[ebp+836]
 mov [ebp+1008],edi
 mov esi,[ebp+1004]
 mov [ebp+1012],esi
 add esp,[ebp+772]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of cmdjavcurz
; void clearpage(lnes* cpgenes, int nzalsorz)
; 1004 retad    1008 *cpgenes    1012 nzalsorz
; 988 ebx    992 esi    996 edi    1000 ebp
; 972 0    976 eax    980 ecx    984 edx
; 956 4    960 3    964 2    968 1
; 940 8    944 7    948 6    952 hardlim
; 924 12    928 11    932 fixesp    936
; 908 16    912 15    916 14    920 13
clearpage: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1017
 mov edx,esi
 xor edi,edi
 sub edx,1016
 mov ecx,esi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
clearpapu: push edi
 add edi,edx
 sub ecx,edx
 jnz clearpapu
 mov [ebp+932],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 xor esi,esi
 mov eax,[ebx+ypheight]
 add eax,[ebp+956]
 mov [ebp+952],eax
clearpaol: xor edi,edi
 mov edx,[ebp+1008]
 push edi
 push edx
 call litrlsput
; rem add esp,[ebp+940]
 add esi,[ebp+968]
 cmp esi,[ebp+952]
 js clearpaol
 xor esi,esi
 mov ecx,[ebp+972]
 cmp ecx,[ebp+1012]
 jz botclrpage
clearpail: mov edx,[ebp+1008]
 mov ecx,esi
 add ecx,[ebp+968]
 cmp ecx,[ebp+940]
 jz clear6596
 push ecx
 push edx
 call clearline
; rem add esp,[ebp+940]
clear6596: mov esi,ecx
 cmp esi,[ebp+928]
 js clearpail
botclrpage: xor edi,edi
 mov esi,[ebp+1004]
 mov [ebp+1012],esi
 mov eax,[ebp+976]
 mov [ebp+1008],eax
 add esp,[ebp+932]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of clearpage
; *************************************************************
; top of base 64 subroutines
; base 64 list
; 00 A_65        25 Z_90
; 26 a_97        51 z_122
; 52 0_48        61 9_57
; 62 +_43
; 63 /_47
; -----------------------
; Each base 64 digit is 6 bits
; a group of four base 64 digits can be used to represent 24 bits
; 24 bits is enough to represent 3 8-bit bytes.
; int gtbase64a(int raw64i)
; 1004 retad    1008 raw64i
; 988 ebx    992 esi    996 edi    1000 ebp
; 972 0      976 eax    980 ecx     984 edx
; 956 4      960 3      964 2       968 1
; 940 8      944 7      948 6       952 5
; 924 12     928 11     932 10      936 9
; 908 16     912 15     916 14      920 13
; 892 20     896 19     900 18      904 17
; 876 24     880 23     884 22      888 21
; 860 28     864 27     868 26      872 25
; 844 32     848 31     852 30      856 29
; 828 36     832 35     836 34      840 33
; 812 40     816 39     820 38      824 37
; 796 44     800 43     804 42      808 41
; 780 48     784 47     788 46      792 45
; 764 52     768 51     772 50      776 49
; 748 56     752 55     756 54      760 53
; 732 60     736 59     740 58      744 57
; 716 64     720 63     724 62      728 61
; 700 68     704 67     708 66      712 65
; 684 72     688 71     692 70      696 69
; 668 76     672 75     676 74      680 73
; 652 80     656 79     660 78      664 77
; 636 84     640 83     644 82      648 81
; 620 88     624 87     628 86      632 85
; 604 92     608 91     612 90      616 89
; 588 96     592 95     596 94      600 93
; 572 100    576 99     580 98      584 97
; 556 104    560 103    564 102     568 101
; 540 108    544 107    548 106     552 105
; 524 112    528 111    532 110     536 109
; 508 116    512 115    516 114     520 113
; 492 120    496 119    500 118     504 117
; 476 124    480 123    484 122     488 121
; 460 128    464 127    468 126     472 125
; 444 132    448 131    452 130     456 129
; 428 136    432 135    436 134     440 133
; 412 140    416 139    420 138     424 137
; 396 144    400 143    404 142     408 141
; 380 148    384 147    388 146     392 145
; 364 152    368 151    372 150     376 149
; 348 156    352 155    356 154     360 153
; 332 160    336 159    340 158     344 157
; 316 164    320 163    324 162     328 161
; 300 168    304 167    308 166     312 165
; 284 172    288 171    292 170     296 169
; 268 176    272 175    276 174     280 espaddend
gtbase64a: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 add edi,2177
 mov edx,edi
 mov ecx,edi
 sub edx,2176
 sub ecx,2000
 mov eax,ecx
 add eax,eax
 add eax,eax
 xor ebx,ebx
gtbapu64a: push ebx
 add ebx,edx
 sub ecx,edx
 jnz gtbapu64a
 mov [ebp+280],eax
 mov esi,[ebp+1004]
 mov edi,[ebp+1008]
; -------------------------------------------------------------------------rgt
 mov edx,[ebp+728]
 cmp edi,[ebp+972]
 js gtbask64a
 cmp edi,[ebp+868]
 jns gtbask25a
 mov edx,edi
 add edx,[ebp+712]
 xor ecx,ecx
 jz gtbask64a
gtbask25a: cmp edi,[ebp+764]
 jns gtbask51a
 mov edx,edi
 sub edx,[ebp+868]
 add edx,[ebp+584]
 xor ecx,ecx
 jz gtbask64a
gtbask51a: cmp edi,[ebp+724]
 jns gtbask61a
 mov edx,edi
 sub edx,[ebp+764]
 add edx,[ebp+780]
 xor ecx,ecx
 jz gtbask64a
gtbask61a: cmp edi,[ebp+724]
 jnz gtbask62a
 mov edx,[ebp+800]
gtbask62a: cmp edi,[ebp+720]
 jnz gtbask64a
 mov edx,[ebp+784]
gtbask64a: mov [ebp+1008],esi
 mov [ebp+1004],edx
 add esp,[ebp+280]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 ret
; bottom of gtbase64a
; int twoleftb(int tlbee)
; 1004 retad    1008 tlbee
; 988 ebx    992 esi    996 edi    1000 ebp
; 972 0      976 eax    980 ecx     984 edx
; 956 4      960 3      964 2       968 1
; 940 8      944 7      948 6       952 5
; 924 12     928 11     932 10      936 9
; 908 16     912 15     916 14      920 13
; 892 20     896 19     900 18      904 17
; 876 24     880 23     884 22      888 21
; 860 28     864 27     868 26      872 25
; 844 32     848 31     852 30      856 29
; 828 36     832 35     836 34      840 33
; 812 40     816 39     820 38      824 37
; 796 44     800 43     804 42      808 41
; 780 48     784 47     788 46      792 45
; 764 52     768 51     772 50      776 49
; 748 56     752 55     756 54      760 53
; 732 60     736 59     740 58      744 57
; 716 64     720 63     724 62      728 61
; 700 68     704 67     708 66      712 65
; 684 72     688 71     692 70      696 69
; 668 76     672 75     676 74      680 73
; 652 80     656 79     660 78      664 77
; 636 84     640 83     644 82      648 81
; 620 88     624 87     628 86      632 85
; 604 92     608 91     612 90      616 89
; 588 96     592 95     596 94      600 93
; 572 100    576 99     580 98      584 97
; 556 104    560 103    564 102     568 101
; 540 108    544 107    548 106     552 105
; 524 112    528 111    532 110     536 109
; 508 116    512 115    516 114     520 113
; 492 120    496 119    500 118     504 117
; 476 124    480 123    484 122     488 121
; 460 128    464 127    468 126     472 125
; 444 132    448 131    452 130     456 129
; 428 136    432 135    436 134     440 133
; 412 140    416 139    420 138     424 137
; 396 144    400 143    404 142     408 141
; 380 148    384 147    388 146     392 145
; 364 152    368 151    372 150     376 149
; 348 156    352 155    356 154     360 153
; 332 160    336 159    340 158     344 157
; 316 164    320 163    324 162     328 161
; 300 168    304 167    308 166     312 165
; 284 172    288 171    292 170     296 169
; 268 176    272 175    276 174     280 espaddend
twoleftb: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 add edi,2177
 mov edx,edi
 mov ecx,edi
 sub edx,2176
 sub ecx,2000
 mov eax,ecx
 add eax,eax
 add eax,eax
 xor ebx,ebx
 xor ebx,ebx
twolepu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz twolepu
 mov [ebp+280],eax
 mov esi,[ebp+1004]
 mov edi,[ebp+1008]
; -------------------------------------------------------------------------rgt
 mov ecx,[ebp+464]
 add ecx,[ebp+460]
 and edi,ecx
 mov edx,[ebp+972]
 mov ebx,[ebp+716]
 cmp edi,ebx
 js tgtbask64a
 mov edx,[ebp+968]
 add ebx,[ebp+716]
 cmp edi,ebx
 js tgtbask64a
 mov edx,[ebp+964]
 add ebx,[ebp+716]
 cmp edi,ebx
 js tgtbask64a
 mov edx,[ebp+960]
tgtbask64a: mov [ebp+1008],esi
 mov [ebp+1004],edx
 add esp,[ebp+280]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 ret
; bottom of twoleftb
; int gtabase64c(lnes *gta_1008)
; 1004 retad    1008 *gta_1008
; 988 ebx    992 esi    996 edi    1000 ebp
; 972 0      976 eax_result    980 ecx     984 edx
; 956 4      960 3      964 2       968 1
; 940 8      944 7      948 6       952 5
; 924 12     928 11     932 10      936 9
; 908 16     912 15     916 14      920 13
; 892 20     896 19     900 18      904 17
; 876 24     880 23     884 22      888 21
; 860 28     864 27     868 26      872 25
; 844 32     848 31     852 30      856 29
; 828 36     832 35     836 34      840 33
; 812 40     816 39     820 38      824 37
; 796 44     800 43     804 42      808 41
; 780 48     784 term64     788 46      792 45
; 764 52     768 51     772 50      776 49
; 748 56     752 tranch64     756 54      760 53
; 732 60     736 59     740 58      744 57
; 716 64     720 63     724 62      728 61
; 700 68     704 67     708 66      712 65
; 684 72     688 71     692 70      696 69
; 668 76     672 75     676 74      680 73
; 652 80     656 79     660 78      664 77
; 636 84     640 83     644 82      648 81
; 620 88     624 87     628 86      632 85
; 604 92     608 91     612 90      616 89
; 588 96     592 95     596 94      600 93
; 572 100    576 99     580 98      584 97
; 556 104    560 103    564 102     568 101
; 540 108    544 107    548 106     552 105
; 524 112    528 111    532 110     536 109
; 508 116    512 115    516 114     520 113
; 492 120    496 119    500 118     504 117
; 476 124    480 123    484 122     488 121
; 460 128    464 127    468 126     472 125
; 444 132    448 131    452 130     456 129
; 428 136    432 135    436 134     440 133
; 412 140    416 139    420 138     424 137
; 396 144    400 143    404 142     408 141
; 380 148    384 147    388 146     392 145
; 364 152    368 151    372 150     376 149
; 348 156    352 155    356 154     360 153
; 332 160    336 159    340 158     344 157
; 316 164    320 163    324 162     328 161
; 300 168    304 167    308 166     312 165
; 284 172    288 171    292 170     296 169
; 268 176    272 175    276 174     280 espaddend
gtabase64c: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 add edi,2177
 mov edx,edi
 mov ecx,edi
 sub edx,2176
 sub ecx,2000
 mov eax,ecx
 add eax,eax
 add eax,eax
 xor ebx,ebx
gtatwolepu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz gtatwolepu
 mov [ebp+280],eax
 mov esi,[ebp+1004]
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov ecx,[ebp+956]
 mov edi,[ebp+972]
 mov edx,[ebp+728]
 mov eax,[ebp+968]
gtabainitc: mov [ebp+edi*1+976],dl
 add edi,eax
 sub ecx,eax
 jnz gtabainitc
 mov ecx,[ebx+fp04]
 cmp ecx,[ebx+fl06]
 js gtabase64e
 jmp se64c
gtabase64e: mov edi,[ebp+1008]
 push edi
 call riadone
 mov edx,[ebx+one2]
 mov [ebp+752],edx
 mov eax,[ebp+972]
 mov [ebp+784],eax
 mov ecx,[ebp+960]
gtabase64f: mov edx,[ebp+784]
 add edx,edx
 add edx,edx
 mov [ebp+784],edx
 mov eax,[ebp+752]
 push eax
 call twoleftb
 add [ebp+784],eax
 mov edx,[ebp+752]
 add edx,edx
 add edx,edx
 mov [ebp+752],edx
 sub ecx,[ebp+968]
 jnz gtabase64f
 mov edx,[ebp+784]
 push edx
 call gtbase64a
 mov [ebp+976],al
 mov eax,[ebp+752]
 push eax
 call twoleftb
 mov [ebp+784],eax
 mov ecx,[ebx+fp04]
 cmp ecx,[ebx+fl06]
 js gtabase64g
 mov edx,[ebp+784]
 add edx,edx
 add edx,edx
 add edx,edx
 add edx,edx
 push edx
 call gtbase64a
 mov [ebp+977],al
 jmp se64c
gtabase64g: push edi
 call riadone
 mov edx,[ebx+one2]
 mov [ebp+752],edx
 mov ecx,[ebp+964]
gtabase64h: mov edx,[ebp+784]
 add edx,edx
 add edx,edx
 mov [ebp+784],edx
 mov eax,[ebp+752]
 push eax
 call twoleftb
 add [ebp+784],eax
 mov edx,[ebp+752]
 add edx,edx
 add edx,edx
 mov [ebp+752],edx
 sub ecx,[ebp+968]
 jnz gtabase64h
 mov eax,[ebp+784]
 push eax
 call gtbase64a
 mov [ebp+977],al
 mov edx,[ebp+972]
 mov [ebp+784],edx
 mov ecx,[ebp+964]
gtabase64i: mov edx,[ebp+784]
 add edx,edx
 add edx,edx
 mov [ebp+784],edx
 mov eax,[ebp+752]
 push eax
 call twoleftb
 add [ebp+784],eax
 mov edx,[ebp+752]
 add edx,edx
 add edx,edx
 mov [ebp+752],edx
 sub ecx,[ebp+968]
 jnz gtabase64i
 mov ecx,[ebx+fp04]
 cmp ecx,[ebx+fl06]
 js gtabase64j
 mov edx,[ebp+784]
 add edx,edx
 add edx,edx
 push edx
 call gtbase64a
 mov [ebp+978],al
 jmp se64c
gtabase64j: mov edx,[ebp+784]
 add edx,edx
 add edx,edx
 mov [ebp+784],edx
 push edi
 call riadone
 mov ecx,[ebx+one2]
 mov [ebp+752],ecx
 mov eax,[ebp+752]
 push eax
 call twoleftb
 add [ebp+784],eax
 mov edx,[ebp+752]
 add edx,edx
 add edx,edx
 mov [ebp+752],edx
 mov eax,[ebp+784]
 push eax
 call gtbase64a
 mov [ebp+978],al
 mov edx,[ebp+972]
 mov [ebp+784],edx
 mov ecx,[ebp+960]
gtabase64k: mov edx,[ebp+784]
 add edx,edx
 add edx,edx
 mov [ebp+784],edx
 mov eax,[ebp+752]
 push eax
 call twoleftb
 add [ebp+784],eax
 mov edx,[ebp+752]
 add edx,edx
 add edx,edx
 mov [ebp+752],edx
 sub ecx,[ebp+968]
 jnz gtabase64k
 mov eax,[ebp+784]
 push eax
 call gtbase64a
 mov [ebp+979],al
se64c: mov edi,[ebp+976]
 mov [ebp+1004],edi
 mov [ebp+1008],esi
 add esp,[ebp+280]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 ret
; bottom of gtabase64c
; void readb64(lnes *eb64, int nzbase)
; 1000 ebp  1004 retad   1008 *eb64   1012 nzbase
;  984 edx   988 ebx      992 esi      996 edi
;  968 1     972 0        976 eax      980 ecx
;  952 5     956 4        960 3        964 2
;  936 9     940 8        944 7        948 6
;  920 13    924 12       928 11       932
;  904 17    908 16       912 15       916 threectr
;  888 21    892 20       896 19       900
;  872 25    876 24       880 23       884 11_loc
;  856 29    860 28       864 27       868 fourctr
;  840 33    844 32       848 31       852 wid3
;  824 37    828 36       832 35       836 a4
;  808 41    812 40       816 39       820 espaddend
readb64: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1042
 mov edx,edi
 mov ecx,edi
 sub edx,1041
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
readu64: push ebx
 add ebx,edx
 sub ecx,edx
 jnz readu64
 mov [ebp+820],eax
 mov ecx,[ebp+844]
 add ecx,ecx
 cmp ecx,[ebp+1012]
 jz treadb64
 mov ecx,[ebp+1012]
 cmp ecx,[ebp+908]
 jnz notreab16
 mov edx,[ebp+1008]
 xor esi,esi
 xor esi,esi
 add ecx,[ebp+972]
 push ecx
trd11090: push edx
 call readhex
notreab16: jmp botreac64
treadb64: mov ebx,[ebp+1008]
 sub ebx,8192
 mov edx,[ebx+fl06]
 sub edx,[ebx+fp04]
 cmp edx,[ebp+812]
 js reatl64
 mov edx,[ebp+816]
reatl64: mov [ebp+852],edx
 cmp edx,[ebp+968]
 js notreab16
 mov ecx,[ebx+a80w]
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 push edx
 push ecx
 call nampy
 lea esi,[ebx+crz0160]
 add esi,eax
 sub esi,8192
 mov [ebp+884],esi
 mov ecx,[ebp+928]
 mov edi,[ebp+1008]
 push ecx
 push edi
 call clearline
 mov ecx,[ebp+972]
 mov edx,[ebp+956]
 mov [ebp+916],ecx
 mov [ebp+868],edx
realop64: mov edi,[ebp+1008]
 push edi
 call gtabase64c
 mov [ebp+836],eax
 xor edx,edx
 mov ecx,[ebp+956]
 mov esi,[ebp+972]
 mov edi,[ebp+884]
 add edi,[ebp+868]
 mov eax,[ebp+968]
rejlop64: mov dl,[ebp+esi*1+836]
 mov [edi+8192],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz rejlop64
 mov edx,[ebp+956]
 add [ebp+868],edx
 mov ecx,[ebp+916]
 add ecx,[ebp+960]
 mov [ebp+916],ecx
 cmp ecx,[ebp+852]
 jns reais64
 clc
 xor edx,edx
 jz realop64
reais64: mov ecx,[ebp+928]
 mov edx,[ebp+1008]
 push ecx
 push edx
 call aptinsert
botreac64: mov esi,[ebp+1004]
 mov edi,[ebp+976]
 mov [ebp+1008],edi
 mov [ebp+1012],esi
 add esp,[ebp+820]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of readb64
; bottom of base 64 subroutines
; *************************************************************
; change readhex from one argument to two arguments line 10567
; void readhex(lnes* rhes,int basevaluerh)
; 1000 ebp    1004 retad    1008 *rhes   1012 basevaluerh
; 988 ebx    992 esi    996 edi
; 972 0    976 eax    980 ecx    984 edx
; 956 4    960 3    964 2    968 1
; 940 8    944 7    948 6    952 5
; 924 12    928 11    932 10    936 9
; 908 16    912 15    916 fixesp    920 13
; 892 20    896 19    900 11where   904
; 876 24    880 23    884    888 hexeightctr
; 860 28    864 27    868    872 hextchr
; 844 32    848 31    852 cst92    856 sectctr_DEL
; 828 36    832 35    836 34    840 33
; 812 40    816 39    820 38   824
; 796 44    800 43    804 42    808 rheof
; 780 48    784 47    788 46    792 45
; 764 52    768 51    772 50    776 49
; 748 56    752 55    756 54    760 53
; 732 60    736 59    740 58    744 57
; 716 64    720 63    724 62    728 61
; 700 68    704 67    708 66    712 65
; 684 72    688 71    692 70    696 69
; 668 76    672 75    676 74    680 73
; 652 80    656 79    660 78    664 77
; 636 84    640 83    644 82    648 81
; 620 88    624 87    628 86    632 85
; 604 92    608 91    612 90    616 89
; 588 96    592 95    596 94    600 93
; 572 100   576 99    580 98    584 97
; 556 104   560 103   564 102   568 101
; 540 108   544 107   548 106   552 105
; 524 112   528 111   532 110   536 109
; 508 116   512 115   516 114   520 113
; 492 120   496 119   500 118   504 117
; 476 124   480 123   484 122   488 121
readhex: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 xor esi,esi
; add esi,1049
 add esi,1125
 mov edx,esi
; sub edx,1048
 sub edx,1124
 mov ecx,esi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
readhexu: push edi
 add edi,edx
 sub ecx,edx
 jnz readhexu
 mov [ebp+916],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 xor edx,edx
; mov [ebp+856],edx
; rem mov [ebx+sfgcount],edx
 mov [ebp+808],edx
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 lea ecx,[ebx+crz0160]
 add ecx,eax
 mov [ebp+900],ecx
; ----------------
 mov edx,[ebp+1012]
 cmp edx,[ebp+908]
 jnz rh10650
 mov ecx,[ebx+fp04]
 mov esi,ecx
 and esi,511
 jz rhnon511
rh10650: jmp skipdbg7126
rhnon511: mov esi,[ebp+928]
 mov eax,[ebp+1008]
 push esi
 push eax
 call clearline
; rem add esp,[ebp+940]
 mov edx,[ebp+972]
 sub edx,[ebp+968]
 mov [ebx+sfgshow02],edx
 mov eax,[ebx+sfgcur]
 cmp eax,[ebp+964]
 js rhskipshw2
 mov edx,[ebp+1008]
 push eax
 push edx
 call threenib
 mov [ebx+sfgshow02],eax
rhskipshw2: mov edi,[ebp+900]
 sub edi,3000
 mov edx,[ebp+736]
 mov [edi+3000],dl
 xor edx,edx
 add edx,03846H
 mov [ebp+852],edx
 lea eax,[ebp+852]
 mov edx,[ebp+960]
 mov esi,[ebp+900]
 push eax
 push ecx
 push edx
 push esi
 call chnvalue
 mov edx,[ebp+684]
 mov [edi+3010],dl
 lea eax,[ebp+852]
 mov ecx,[ebx+fl06]
 mov edx,[ebp+920]
 mov esi,[ebp+900]
 push eax
 push ecx
 push edx
 push esi
 call chnvalue
 mov edx,[ebp+684]
 mov [edi+3020],dl
 lea eax,[ebp+852]
 mov ecx,[ebx+edhanb]
 mov edx,[ebp+880]
 mov esi,[ebp+900]
 push eax
 push ecx
 push edx
 push esi
 call chnvalue
 mov edx,[ebp+684]
 mov [edi+3030],dl
 xor ecx,ecx
 add ecx,03439h
 mov [ebp+852],ecx
 lea eax,[ebp+852]
; rem mov ecx,[ebp+968]
; mov ecx,[ebp+856]
; add ecx,[ebp+968]
; mov [ebp+856],ecx
 mov ecx,[ebx+sfgcount]
 add ecx,[ebp+968]
 mov [ebx+sfgcount],ecx
 mov edx,[ebp+840]
 mov esi,[ebp+900]
 push eax
 push ecx
 push edx
 push esi
 call chnvalue
; mov edx,[ebp+684]
; mov [edi+3036],dl
 lea eax,[ebp+852]
; mov ecx,[ebp+964]
 mov ecx,[ebx+sfgshow02]
 mov edx,[ebp+820]
 mov esi,[ebp+900]
 push eax
 push ecx
 push edx
 push esi
 call chnvalue
; mov edx,[ebp+684]
; mov [edi+3041],dl
; bottom of regular here.
; ---------------------------
 mov ecx,[ebx+nzfileg]
 cmp ecx,[ebp+964]
 jz rhadd03
 jmp rhregutwo
; top of added three
rhadd03: xor ecx,ecx
 add ecx,03446h
 mov [ebp+852],ecx
 lea eax,[ebp+852]
; mov ecx,[ebp+968]
 mov ecx,[ebx+sfgprv]
 mov edx,[ebp+800]
 mov esi,[ebp+900]
 push eax
 push ecx
 push edx
 push esi
 call chnvalue
; mov edx,[ebp+684]
; mov [edi+3046],dl
 lea eax,[ebp+852]
; mov ecx,[ebp+964]
 mov ecx,[ebx+sfgshow02]
 mov edx,[ebp+780]
 mov esi,[ebp+900]
 push eax
 push ecx
 push edx
 push esi
 call chnvalue
; mov edx,[ebp+684]
; mov [edi+3051],dl
 lea eax,[ebp+852]
; mov ecx,[ebp+960]
 mov ecx,[ebx+sfgcur]
 mov edx,[ebp+760]
 mov esi,[ebp+900]
 push eax
 push ecx
 push edx
 push esi
 call chnvalue
; mov edx,[ebp+684]
; mov [edi+3056],dl
 xor ecx,ecx
 add ecx,03439h
 mov [ebp+852],ecx
 lea eax,[ebp+852]
; mov ecx,[ebp+968]
 mov ecx,[ebx+sfgcur]
 mov edx,[ebp+740]
 mov esi,[ebp+900]
 push eax
 push ecx
 push edx
 push esi
 call chnvalue
; mov edx,[ebp+684]
; mov [edi+3061],dl
; bottom of added three
; -----------------------
rhregutwo: mov ecx,[ebp+928]
 mov esi,[ebp+1008]
 push ecx
 push esi
 call aptinsert
; ----------------
skipdbg7126: mov esi,[ebp+928]
 mov edx,[ebp+1008]
 push esi
 push edx
 call clearline
; rem add esp,[ebp+940]
; ---
; rem xor edi,edi
; rem add edi,3892322
; mov [ebp+852],edi
 mov edi,[ebp+900]
 sub edi,3000
; -----------
 xor eax,eax
; xor edx,edx
; add edx,1059
; sub edx,1000
 mov edx,[ebp+736]
 cmp eax,[ebx+eofi]
 jz skiprem7110
 mov [edi+3000],dl
; ---------------------------
; skiprem7110: mov al,[ebp+852]
skiprem7110: mov al,[ebp+580]
; mov dl,[ebp+853]
 mov dl,[ebp+572]
 mov [edi+3001],dl
 mov [edi+3002],al
; mov al,[ebp+854]
 mov al,[ebp+736]
 mov [edi+3056],al
 mov edi,[ebp+972]
 mov [ebp+888],edi
readhexol: mov ecx,[ebp+888]
 cmp ecx,[ebp+940]
 js readh014
 jmp readhex916
; -------------------
readh014: xor esi,esi
 mov [ebp+808],esi
 mov [ebp+872],esi
 cmp esi,[ebx+eofi]
 jnz readh020
; eofi skips riadone
; -------------------
 mov edx,[ebp+968]
 mov [ebp+808],edx
 mov edi,[ebp+1008]
 push edi
 call riadone
; rem add esp,[ebp+956]
 xor edx,edx
 mov dl,[ebx+one2]
 mov [ebp+872],edx
readh020: xor ecx,ecx
 add ecx,742929222
 mov [ebp+852],ecx
 lea edi,[ebp+852]
 mov esi,[ebp+872]
 mov edx,[ebp+888]
 mov ecx,[ebp+948]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 add eax,[ebp+944]
 add eax,[ebp+972]
 mov edx,[ebp+900]
; -----------------
 xor ecx,ecx
; rem may change too soon.  cmp ecx,[ebx+eofi]
 cmp ecx,[ebp+808]
; phase was inverted.  jnz skchn7156
 jz skchn7156
; -----------------
 push edi
 push esi
 push eax
 push edx
 call chnvalue
; rem add esp,[ebp+908]
skchn7156: mov edi,edx
 add edi,eax
 add edi,[ebp+964]
 sub edi,3000
; -----------
 xor ecx,ecx
 cmp ecx,[ebp+808]
 jz rhex6741
; ---------------
 mov dl,[ebp+854]
 mov [edi+3000],dl
; ----------------
 xor ecx,ecx
 cmp ecx,[ebx+eofi]
 jnz rhex6741
; ----------------
 mov dl,[ebp+855]
 mov ecx,[ebp+948]
 cmp ecx,[ebp+888]
 js rhex6741
 mov [edi+3001],dl
rhex6741: mov ecx,[ebp+972]
 add ecx,[ebp+788]
 mov edi,[ebp+872]
 mov edx,[ebp+968]
 add edx,[ebp+844]
 cmp edi,edx
 js readh030
 mov edx,[ebp+968]
 add edx,[ebp+892]
 add edx,[ebp+832]
 add edx,[ebp+832]
 add edx,[ebp+832]
 cmp edx,edi
 js readh030
 mov ecx,[ebp+872]
readh030: mov edx,ecx
 mov edi,[ebp+888]
 add edi,[ebp+900]
 add edi,[ebp+844]
 add edi,[ebp+832]
 sub edi,512
 mov [edi+512],dl
 mov esi,[ebp+888]
 add esi,[ebp+968]
 mov [ebp+888],esi
 jmp readhexol
readhex916: xor esi,esi
 xor esi,esi
 cmp esi,[ebp+808]
; jz readhex917
 mov ecx,[ebp+928]
 mov esi,[ebp+1008]
 push ecx
 push esi
 call aptinsert
; rem add esp,[ebp+956]
readhex917: mov esi,[ebp+1004]
 mov ecx,[ebp+976]
 mov [ebp+1012],esi
 mov [ebp+1008],ecx
 add esp,[ebp+916]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 ret
; bottom of readhex  change espaddend from 04.08 to 00
; int readol(lnes* rolfes,int rolfnwhere,int nzhex)
; 1008 *rolfes    1012 rolfnwhere    1016 nzhex
; 992 esi    996 edi    1000 ebp    1004 retad
; 976 eax    980 ecx     984 edx    988 ebx
; 960 2    964 1    968 0    972 -1
; 944 6    948 5    952 4    956 3
; 928 10    932 9    936 8    940 7
; 912 14    916 13    920 12    924 readolres
; 896 18    900 wherecode    904 16    908 elevwhere
; 880 22    884 fixesp    888 20    892 readolallow
; 864 26    868 25      872 24      876 old_FP04
; 764 - 863    25 number buffer
readol: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1028
 mov edx,esi
 sub edx,1027
 mov ecx,esi
 sub ecx,1000
 mov edi,esi
 sub edi,1029
 mov eax,ecx
 add eax,eax
 add eax,eax
readou: push edi
 add edi,edx
 sub ecx,edx
 jnz readou
 xor edi,edi
 mov ecx,esi
 sub ecx,1003
readzu: push edi
 sub ecx,edx
 jnz readzu
 mov ecx,esi
 sub ecx,928
 add eax,ecx
 mov [ebp+884],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 xor edi,edi
 push edi
 call getreala
; rem add esp,[ebp+952]
 mov [ebp+900],eax
 mov edx,[ebp+920]
 sub edx,[ebp+960]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+936]
 lea esi,[ebx+crz0160]
 add esi,eax
 sub esi,2048
 mov [ebp+908],esi
 mov esi,[ebp+964]
 mov [ebx+sfgprv],esi
 mov [ebx+sfgcur],esi
 xor edi,edi
 mov [ebp+924],edi
 mov [ebp+892],edi
 mov [ebx+fp04],edi
 mov [ebx+fl06],edi
 mov [ebx+eofi],edi
 mov [ebx+eofdelay],edi
 mov [ebx+rep0],edi
 mov [ebx+sfgcount],edi
 mov [ebx+sfgshow02],edi
; mov esi,[ebp+904]
 xor esi,esi
 add esi,512
 mov [ebx+hiskwid],esi
 add esi,[ebp+960]
 mov [ebx+pose],esi
 mov edi,[ebp+964]
 mov [ebx+nzfileg],edi
 mov esi,[ebp+1008]
 mov edi,[ebp+1012]
 push edi
 push esi
 call isredonetwo
 mov [ebx+nzfileg],eax
 mov edi,[ebx+nzfileg]
 cmp edi,[ebp+964]
 jz teedol10247
 cmp edi,[ebp+960]
 jz teedolpreb
 jmp notreadol
teedolpreb: mov eax,[ebx+fl06]
 add eax,[ebp+968]
 jmp readl040
teedol10247: mov edi,[ebp+1012]
 add edi,[ebp+972]
 mov esi,[ebx+a80w]
 push edi
 push esi
 call nampy
; rem add esp,[ebp+936]
 lea esi,[ebx+crz0160]
 add esi,eax
 mov edx,[ebp+1012]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
; rem add esp,[ebp+936]
 xor edi,edi
 sub esi,1024
 mov ecx,[ebp+964]
 cmp eax,ecx
 js readj026
readl017: xor edx,edx
 mov dl,[esi+1024]
 mov [ebp+edi*1+764],dl
 add esi,ecx
 add edi,ecx
 sub eax,ecx
 jnz readl017
 xor eax,eax
 jz readl026
readj026: jmp notreadol
readl026: xor edi,edi
 mov esi,[ebp+956]
 mov edx,[ebp+964]
 xor ecx,ecx
 add ecx,40000000h
 add ecx,40000000h
 lea edx,[ebp+764]
 xor ecx,ecx
 add ecx,1493
 sub ecx,1000
 mov eax,[ebp+948]
 push edi
 push ecx
 push edi
 push edx
 push eax
 call twioswitch
; call uekopen
; rem windows rem add esp,[ebp+888]
; rem add esp,[ebp+952]
; rem windows rem add esp,[ebp+968]
; rem add esp,[ebp+904]
; push edi
; push edi
; push esi
; push edi
; push edx
; push ecx
; push eax
; mov edi,[ebp+900]
; lea edx,[edi+readl040]
; add edi,00900000h
; mov ecx,[edi+wiocrn85]
; push edx
; push ecx
; ret
readl040: mov [ebx+edhanb],eax
 or eax,eax
 jnz readl042
readl041: jmp notreadol
readl042: cmp eax,[ebp+964]
 js readl041
 mov eax,[ebp+964]
 cmp eax,[ebx+nzfileg]
 jz readol10331
 xor edi,edi
 jz readl061
readol10331: mov edi,[ebp+900]
 xor eax,eax
 mov esi,[ebx+edhanb]
 mov eax,[ebp+928]
 add eax,[ebp+932]
 xor edi,edi
 mov edx,[ebp+960]
 push edi
 push edx
 push edi
 push esi
 push eax
 call twioswitch
; call ueklseek
; rem windows rem add esp,[ebp+888]
; rem add esp,[ebp+952]
; rem windows rem add esp,[ebp+968]
; rem add esp,[ebp+904]
; lea edx,[edi+readl050]
; add edi,00900000h
; mov ecx,[edi+wiosfp19]
; mov edi,[ebp+960]
; push edi
; push eax
; push eax
; push esi
; push edx
; push ecx
; ret
readl050: mov [ebx+fl06],eax
 mov edi,[ebp+900]
 mov esi,[ebx+edhanb]
 mov eax,[ebp+928]
 add eax,[ebp+932]
 xor edi,edi
 mov edx,[ebp+968]
 push edi
 push edx
 push edi
 push esi
 push eax
 call twioswitch
; call ueklseek
; rem windows rem add esp,[ebp+888]
; rem add esp,[ebp+952]
; rem windows rem add esp,[ebp+968]
; rem add esp,[ebp+904]
; lea edx,[edi+readl061]
; add edi,00900000h
; mov ecx,[edi+wiosfp19]
; xor edi,edi
; push edi
; push edi
; push edi
; push esi
; push edx
; push ecx
; ret
readl061: xor edi,edi
 mov [ebp+876],edi
 cmp edi,[ebx+fl06]
 jns readl063
 mov edx,[ebp+964]
 mov [ebp+892],edx
readl063: mov ecx,[ebp+940]
 cmp ecx,[ebp+1012]
 jns readl070wh
 mov esi,[ebx+afilelen]
 add esi,[ebp+964]
 mov [ebx+y],esi
readl070wh: mov ecx,[ebx+rep0]
 cmp ecx,[ebp+968]
 jnz read11814
 mov edx,[ebx+fp04]
 mov [ebp+876],edx
read11814: mov ecx,[ebp+892]
 cmp ecx,[ebp+968]
 jz readl075wb
 mov edx,[ebx+eofdelay]
 cmp edx,[ebp+968]
 jz readl076
readl075wb: jmp readl101wb
readl076: mov eax,[ebx+eofi]
 mov [ebx+eofdelay],eax
 mov ecx,[ebp+968]
 cmp ecx,[ebp+1016]
 jnz readl083
readl077: mov ecx,[ebp+1008]
 push ecx
 call riedline
; rem add esp,[ebp+952]
 xor edx,edx
 cmp edx,[ebx+rep0]
 jnz readl079
 mov edi,[ebx+eofi]
 mov [ebx+eofdelay],edi
readl079: mov ecx,[ebx+a80w]
 lea esi,[ebx+evrd]
 sub esi,512
 mov edi,[ebp+908]
 mov eax,[ebp+964]
readl080: xor edx,edx
 mov dl,[esi+512]
 mov [edi+2048],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz readl080
 xor edx,edx
 jz readl090
readl083: mov ecx,[ebp+1008]
 mov edx,[ebp+1016]
 push edx
 push ecx
 call readb64
; rem add esp,[ebp+952]
readl090: mov edx,[ebp+920]
 add edx,[ebp+972]
 mov ecx,[ebp+1008]
 mov eax,[ebp+968]
 cmp eax,[ebp+1016]
 jnz readlinh
 mov eax,[ebp+876]
 cmp eax,[ebx+fl06]
 jns readlinh
 push edx
 push ecx
 call aptinsert
; rem add esp,[ebp+936]
readlinh: mov eax,[ebp+964]
 mov [ebp+924],eax
 jmp readl070wh
readl101wb: mov esi,[ebx+edhanb]
 mov edi,[ebp+900]
 mov eax,[ebp+944]
 mov ecx,[ebp+964]
 cmp ecx,[ebx+nzfileg]
 jnz readl150
 xor edi,edi
 push edi
 push edi
 push edi
 push esi
 push eax
 call twioswitch
; call uekclose
; rem windows rem add esp,[ebp+888]
; rem add esp,[ebp+952]
; rem windows rem add esp,[ebp+968]
; rem add esp,[ebp+904]
; lea edx,[edi+readl150]
; add edi,00900000h
; mov ecx,[edi+wiocls06]
; push esi
; push edx
; push ecx
; ret
readl150: mov ecx,[ebp+1012]
 cmp ecx,[ebp+936]
 js readl155
 mov edx,[ebp+1016]
 cmp edx,[ebp+968]
 jz readl158
readl155: mov esi,[ebp+1008]
 push ecx
 push esi
 call clearline
; rem add esp,[ebp+936]
readl158: mov esi,[ebp+1012]
 cmp esi,[ebp+940]
 js notreadol
 cmp esi,[ebp+932]
 jns notreadol
 xor edi,edi
 add edi,1084
 mov ecx,[ebp+1008]
 push edi
 push ecx
 call udregkey2176
; rem add esp,[ebp+936]
notreadol: mov esi,[ebp+924]
 mov [ebp+1012],esi
 mov edi,[ebp+1004]
 mov [ebp+1016],edi
 add esp,[ebp+884]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 ret
; bottom of readol
; void eightsaveas(lnes* eisavls)
; 1000 ebp    1004 retad     1008 *eisavls
; 984 edx    988 ebx    992 esi    996 edi
; 968 1    972 0    976 eax    980 ecx
; 952 5    956 4    960 3    964 2
; 936 9    940 8    944 7    948 6
; 920 13    924 12    928 11    932 10
; 904 17    908 16    912 15    916 14
; 888 21    892 20    896 19    900 18
; 872 25    876 24    880 23    884 wrone
; 856 29    860 28    864 27    868 savedhr
; 840 33    844 32    848 shan    852 savewid
; 824 37    828 36    832 prdex    836 saveinner
; 808 41    812 40    816 codeloc    820 saveasctr
;    800 fixesp    804 5where
; 792 outrashl    796 outrashh
; 776 49    780 48      784 47 /  788 46 .
; ------------------------------------------------
; 760 53    764 52    768 51    772
; 744 57    748 56    752 55    756 awlendel
; 728 61    732 60    736 59 ;  740 58 :
; 712 65    716 64    720 63    724 8where3
; 696 69    700 68    704 67    708 66 B
; 680 73    684 72    688 71    692 70
; 664 77    668 76    672 75    676
; 648 81    652 80    656 fnlen2      660 8where2
; ------------------------------------------------
; 676.484 - 775.647    width 100.163    fn    676.484
; 576.320 - 675.483    width 100.163    obuffer 576.320
eightsaveas: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1082
 mov edx,esi
 sub edx,1081
 mov ecx,esi
 sub ecx,1000
 mov ebx,ecx
 mov eax,ebx
 add eax,eax
 xor edi,edi
 add eax,eax
 add eax,eax
eightsaveru: push edi
 add edi,edx
 sub ecx,edx
 jnz eightsaveru
 xor edi,edi
eightsavepu: push edi
 sub ebx,edx
 jnz eightsavepu
 mov [ebp+800],eax
 xor edi,edi
 push edi
 call getreala
; rem add esp,[ebp+956]
 mov [ebp+816],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov edx,[ebp+940]
 sub edx,[ebp+968]
 mov edi,[ebx+a80w]
 push edx
 push edi
 call nampy
; rem add esp,[ebp+940]
 mov [ebp+660],eax
 mov [ebp+724],eax
 mov ecx,[ebp+952]
 mov [ebp+832],ecx
 mov edx,[ebp+832]
 sub edx,[ebp+968]
 push edx
 push edi
 call nampy
; rem add esp,[ebp+940]
 mov [ebp+804],eax
 lea esi,[ebx+crz0160]
 add [ebp+660],esi
 add [ebp+804],esi
 mov edx,[ebp+940]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
; rem add esp,[ebp+940]
 mov [ebp+656],eax
 cmp eax,[ebp+968]
 jns eigsa016
eigsa015: jmp eightsavnot
eigsa016: xor edi,edi
 mov esi,[ebp+660]
 sub esi,1024
 mov ecx,[ebp+968]
eigsa017: xor edx,edx
 mov dl,[esi+1024]
 mov [ebp+edi*1+484],dl
 add esi,ecx
 add edi,ecx
 sub eax,ecx
 jnz eigsa017
 xor edi,edi
 cmp edi,[ebx+afilelen]
 jns eigsa015
; -------------------
 mov esi,[ebp+944]
 mov [ebx+wegmode],esi
 mov esi,[ebp+724]
 lea eax,[ebx+crz0160]
 push esi
 push eax
 call nftopperlm
 cmp eax,[ebp+708]
 jz eigsaisb
 mov ecx,[ebp+948]
 mov [ebx+wegmode],ecx
eigsaisb: xor edx,edx
 add esi,[ebp+968]
 mov dl,[ebx+esi*1+crz0160]
 cmp edx,[ebp+740]
 jz eigsaisc
 cmp edx,[ebp+736]
 jz eigsaisc
 mov ecx,[ebp+948]
 mov [ebx+wegmode],ecx
eigsaisc: xor edx,edx
 add esi,[ebp+968]
 mov dl,[ebx+esi*1+crz0160]
 mov eax,[ebp+784]
 cmp edx,eax
 jz eigsaisg
 add eax,[ebp+952]
 add eax,[ebp+812]
 cmp eax,edx
 jz eigsaisg
 mov ecx,[ebp+948]
 mov [ebx+wegmode],ecx
eigsaisg: mov eax,[ebp+944]
 cmp eax,[ebx+wegmode]
 jz eigsaisi
 jmp eigsa020
eigsaisi: mov esi,[ebp+972]
 mov [ebx+wegerr],esi
 mov [ebx+needclose],esi
 mov esi,[ebp+816]
 lea eax,[esi+flopstring]
 mov ecx,[ebp+1008]
 push eax
 push ecx
 call aread2880
 cmp eax,[ebp+972]
 jnz eightsavsb
 mov ecx,[ebp+968]
 mov [ebx+wegerr],ecx
 jmp eightsavnob
eightsavsb: mov eax,[ebp+724]
 add eax,[ebp+960]
 mov ecx,[ebp+1008]
 push eax
 push ecx
 call lengetsect
 mov eax,[ebx+fl06]
 mov ecx,[ebx+sfgcur]
 mov edx,[ebp+1008]
 push eax
 push ecx
 push edx
 call delsects
 mov [ebp+756],eax
 mov eax,[ebp+1008]
 push eax
 call maxchainsrt
 mov [ebx+wegcur],eax
 mov ecx,[ebp+756]
 cmp ecx,[ebp+972]
 jns eigsaisj
 mov eax,[ebp+1008]
 push eax
 call getfnwsub
 mov [ebx+sfnbase],eax
 mov ecx,[ebp+724]
 add ecx,[ebp+960]
 mov edx,[ebp+1008]
 push eax
 push ecx
 push edx
 call wrtnewfn
eigsaisj: lea esi,[ebx+fdimg2880]
 add esi,[ebx+sfnbase]
 add esi,[ebp+872]
 add esi,[ebp+968]
 mov eax,[ebx+wegcur]
 mov ecx,[ebp+964]
 push eax
 push ecx
 push esi
 call revuncram
 mov ecx,[ebp+968]
 add ecx,[ebx+hiskwid]
 mov [ebx+posw],ecx
 mov esi,[ebp+972]
 mov [ebx+wp04],esi
 mov [ebx+weginc],esi
 mov eax,esi
 clc
 xor ecx,ecx
 jz eigsa030
eigsa020: xor esi,esi
; add esi,1128
; sub esi,1000
; mov edx,[ebp+964]
; xor ecx,ecx
; add ecx,40000000h
 lea eax,[ebp+484]
 mov edi,[ebp+940]
 xor ecx,ecx
 add ecx,493
 push esi
 push esi
 push ecx
 push eax
 push edi
 call twioswitch
; push edi
; push esi
; push edx
; push edi
; push edi
; push ecx
; push eax
; mov edi,[ebp+816]
; lea edx,[edi+eigsa030]
; mov ecx,[edi+ramsize18]
; add edi,ecx
; mov ecx,[edi+wiocrn85]
; push edx
; push ecx
; ret
eigsa030: mov [ebp+848],eax
 xor edi,edi
 mov [ebp+820],edi
eigsaolop: mov edx,[ebp+820]
 cmp edx,[ebx+afilelen]
 js eigsa033
; jmp eightsavecb
 jmp eightsavecb
eigsa033: add edx,[ebp+968]
 mov [ebp+820],edx
 mov edi,[ebp+820]
 mov esi,[ebp+832]
 mov edx,[ebp+952]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call rw8056
; rem add esp,[ebp+908]
 mov edx,[ebp+832]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
; rem add esp,[ebp+940]
 mov [ebp+852],eax
 xor edi,edi
 mov ecx,[ebp+968]
 mov esi,[ebp+804]
 sub esi,4096
eigsa038: cmp edi,[ebp+852]
 jns eigsa045
 mov dl,[esi+4096]
 mov [ebp+edi*1+320],dl
 add esi,ecx
 add edi,ecx
 xor edx,edx
 jz eigsa038
eigsa045: mov eax,[ebp+920]
 mov edx,[ebp+932]
 mov [ebp+edi*1+320],al
 mov [ebp+edi*1+321],dl
 xor eax,eax
 mov [ebp+836],eax
 cmp eax,[ebx+nzsaveskipod]
 jz eigsailop
 mov [ebp+edi*1+320],dl
eigsailop: mov esi,[ebp+836]
 xor edx,edx
 mov dl,[ebp+esi*1+320]
 mov [ebp+884],edx
; xor edi,edi
; lea esi,[ebp+792]
; mov edx,[ebp+968]
; lea ecx,[ebp+884]
; mov eax,[ebp+848]
; push edi
; push esi
; push edx
; push ecx
; push eax
; mov edi,[ebp+816]
; lea edx,[edi+eigsa060]
; mov ecx,[edi+ramsize18]
; add edi,ecx
; mov ecx,[edi+wiowrt04]
; xor edi,edi
; push edx
; push ecx
; ret
; eigsa060: mov edx,[ebp+836]
 mov eax,[ebp+848]
 mov ecx,[ebp+884]
 mov edx,[ebp+1008]
 push eax
 push ecx
 push edx
 call writeonefd
; ----------------
 mov edx,[ebp+836]
 mov ecx,[ebp+964]
 sub ecx,[ebx+nzsaveskipod]
 add ecx,[ebp+852]
 add edx,[ebp+968]
 mov [ebp+836],edx
 cmp edx,ecx
 js eigsailop
eigsa070: jmp eigsaolop
;jmp eigsaolop
eightsavecb: mov eax,[ebp+944]
 cmp eax,[ebx+wegmode]
 jz eightsavece
 jmp eightsavclo
eightsavece: mov eax,[ebp+844]
 mov ecx,[ebp+968]
 lea esi,[ebx+fdimg2880]
 add esi,[ebx+sfnbase]
 add esi,[ebp+928]
 push eax
 push ecx
 push esi
 call revuncram
 mov eax,[ebx+wp04]
 mov ecx,[ebp+956]
 lea esi,[ebx+fdimg2880]
 add esi,[ebx+sfnbase]
 add esi,[ebp+860]
 push eax
 push ecx
 push esi
 call revuncram
; --------------
 mov esi,[ebp+972]
eightsavegc: mov eax,[ebp+848]
 mov ecx,[ebp+788]
 mov edx,[ebp+1008]
 push eax
 push ecx
 push edx
 call writeonefd
 add esi,[ebp+968]
 cmp esi,512
 js eightsavegc
; ------------------
 mov eax,[ebp+968]
 xor edx,edx
 xor esi,esi
 add esi,512
 xor ecx,ecx
 add ecx,4608
 xor edi,edi
 add edi,5120
eightsavech: mov dl,[ebx+esi*1+fdimg2880]
 mov [ebx+edi*1+fdimg2880],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz eightsavech
 mov ecx,[ebp+972]
 cmp ecx,[ebx+wegerr]
 jnz eightsavnob
 mov esi,[ebp+816]
 lea eax,[esi+flopstring]
 mov ecx,[ebp+1008]
 push eax
 push ecx
 call writeback28
eightsavnob: clc
 xor eax,eax
 jz eightsavrot
; ---------------
eightsavclo: mov edi,[ebp+816]
 mov esi,[ebp+848]
 mov edi,[ebp+948]
 mov eax,[ebp+972]
 push eax
 push eax
 push eax
 push esi
 push edi
 call twioswitch
; lea edx,[edi+eightsavrot]
; mov ecx,[edi+ramsize18]
; add edi,ecx
; mov ecx,[edi+wiocls06]
; push esi
; push edx
; push ecx
; ret
eightsavrot: mov edx,[ebp+832]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearline
; rem add esp,[ebp+940]
eightsavnot: xor esi,esi
 mov eax,[ebp+976]
 mov esi,[ebp+1004]
 mov [ebp+1008],esi
 mov [ebp+1004],eax
 add esp,[ebp+800]
; duplicate add esp,[ebp+800]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 ret
; bottom of eightsaveas  change espaddend from 04 to 00
; attempting to fix findtwoeq on Aug 22, 2020
; boolean findtwoeq(lnes* ftqs, int isix11,
;            int 11skip, int zfa, int idiy)
; 1016 11skip    1020 zfa    1024 idiy
; 1004 retad    1008 *ftqs    1012 isix11
; 988 ebx    992 esi    996 edi    1000 ebp
; 972 0    976 eax    980 ecx    984 edx
; 956 4    960 3    964 2      968 1
; 940 8    944 7    948 6      952 5
; 924 12    928 11    932 10    936 9
; 908 16    912 15    916 14    920 13
; 892 20    896 19    900        904
; 876 24    880 23    884 olimit    888 bigsixskipzur
; 860 28    864 27    868    872 checkftw
; 844 32    848 31    852    856 checkfdw
; 828 36    832 35    836 fdilop    840 fdile
; 812 40    816 39    820 fdolop    824 fdices
; 796 44    800 43    804    808 six80wid
; 780 48    784 47    788 bisix    792 skipzur
; 764 52    768 51    772 6where    776 fdiri
; 748 56    752 55    756 3where    760 where160
; 732 60    736 59    740 fixesp    744 findonebr
findtwoeq: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 xor esi,esi
 push esi
 add esi,1061
 mov edx,esi
 sub edx,1060
 mov ecx,esi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
 xor edi,edi
findtwopu: push edi
 add edi,edx
 sub ecx,edx
 jnz findtwopu
 mov [ebp+740],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 lea esi,[ebx+crz0160]
 xor edi,edi
 mov edx,[ebp+928]
 cmp edx,[ebp+1012]
 jnz findne009
 mov edi,[ebp+1016]
findne009: mov [ebp+888],edi
 mov edx,[ebp+1012]
 mov edi,[ebp+1008]
 push edx
 push edi
 call dlenval
; rem add esp,[ebp+940]
 sub eax,[ebp+888]
 mov [ebp+856],eax
;         length of line isix11
; ------------------------------
 mov eax,[ebp+1024]
 mov ecx,[ebp+960]
 mov esi,[ebp+952]
 push eax
 push ecx
 push esi
 push edi
 call rw8056
; rem add esp,[ebp+908]
 push ecx
 push edi
 call dlenval
; rem add esp,[ebp+940]
 sub eax,[ebp+888]
;    eax is length of line 3_[idiy]
; wrong  mov [ebp+856],eax
 cmp [ebp+856],eax
; unused. eax should be > [ebp+856] - 1
 xor esi,esi
 cmp esi,[ebp+1020]
 jnz findnefast
 mov eax,[ebp+968]
findnefast: mov [ebp+884],eax
 mov esi,[ebp+968]
 sub edx,esi
 sub ecx,esi
 mov edi,[ebx+a80w]
 lea esi,[ebx+crz0160]
 push edx
 push edi
 call nampy
; rem add esp,[ebp+940]
 mov edx,eax
 add edx,esi
 add edx,[ebp+888]
 sub edx,4096
 mov [ebp+772],edx
 push ecx
 push edi
 call nampy
; rem add esp,[ebp+940]
 add esi,eax
 sub esi,4096
 mov [ebp+756],esi
 xor edi,edi
 cmp edi,[ebp+884]
 js findne005
findfail71: xor edi,edi
 jz findfail72
findne005: cmp edi,[ebp+856]
 jns findfail71
; free ebx from data addressing
 xor ebx,ebx
findtwjolop: mov esi,[ebp+756]
 mov edi,[ebp+772]
 mov eax,[ebp+968]
 cmp ebx,[ebp+884]
 jns findfail71
 xor ecx,ecx
findtwjilop: mov dl,[edi+4096]
 cmp dl,[ebx+esi*1+4096]
 jz findtwxcand
 cmp dl,[ebp+844]
 jz findtwxcand
 add ebx,eax
 xor edi,edi
 jz findtwjolop
findtwxcand: add edi,eax
 add esi,eax
 add ecx,eax
 cmp ecx,[ebp+856]
 js findtwjilop
 mov [ebp+976],eax
findfail72: mov esi,[ebp+1004]
 mov eax,[ebp+976]
 mov [ebp+1024],esi
 mov [ebp+1020],eax
 add esp,[ebp+740]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 pop eax
 pop eax
 ret
; bottom of findtwoeq
; void john2880(lnes* wy2880, int aysrc,
;                int aydest, int aywidth)
; 1012 aysrc    1016 aydest    1020 aywidth
; 1000 ebp    1004 retad    1008 *wy2880
; 984 edx    988 ebx    992 esi    996 edi
; 968 1    972 0    976 eax    980 ecx
; 952 5    956 4    960 3    964 2
; 936 9    940 8    944 7    948 6
; 920 13    924 12    928 11    932 10
; 904 17    908 16    912 15    916
; 888 21    892 20    896 19    900
; 872 25    876 24    880 23    884
; 856 29    860 28    864 27    868
; 840 33    844 32    848 31    852 hxctr
; 824 37    828 36    832 35    836 hxright
; 808 41    812 40    816 39    820 hqsuba
; 792 45    796 44    800 43    804 one2880
; 776 49    780 48    784 47    788 fixesp
; 576 - 772    576 rindtemp
john2880: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1050
 mov edx,esi
 sub edx,1049
 mov ecx,esi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
 add eax,eax
 xor edi,edi
john288pu: push edi
 add edi,edx
 sub ecx,edx
 jnz john288pu
 mov [ebp+788],eax
 mov ecx,esi
 sub ecx,1046
 mov edi,esi
 sub edi,794
 xor eax,eax
john288tu: push edi
 push eax
 call nampy
; rem add esp,[ebp+940]
 add eax,[ebp+844]
 sub ecx,edx
 jnz john288tu
 mov ecx,esi
 sub ecx,1000
john288ru: push eax
 sub ecx,edx
 jnz john288ru
 mov ebx,[ebp+1008]
 sub ebx,8192
 lea ecx,[ebx+crz0160]
 mov [ebp+804],ecx
 mov edx,[ebp+968]
 mov [ebx+alsel],edx
 mov edi,[ebp+1012]
 mov esi,[ebx+alsel]
 mov edx,[ebp+952]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call rw8056
; rem add esp,[ebp+908]
 xor edi,edi
 mov [ebp+852],edi
john2815: mov edi,[ebp+852]
 cmp edi,[ebp+1020]
 jns john2820
 mov esi,[ebp+852]
 add esi,[ebx+lowleftx]
 sub esi,[ebp+968]
 add esi,[ebp+804]
 sub esi,512
 xor edx,edx
 mov dl,[esi+512]
 mov [ebp+edi*1+576],dl
 mov ecx,[ebp+852]
 add ecx,[ebp+968]
 mov [ebp+852],ecx
 xor edi,edi
 jz john2815
john2820: mov edi,[ebp+1016]
 mov esi,[ebx+alsel]
 mov edx,[ebp+952]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call rw8056
; rem add esp,[ebp+908]
 xor esi,esi
 mov [ebp+852],esi
john2823: mov esi,[ebp+852]
 cmp esi,[ebp+1020]
 jns john2830
 mov edi,[ebp+852]
 add edi,[ebx+lowleftb]
 sub edi,[ebp+968]
 add edi,[ebp+804]
 sub edi,512
 xor edx,edx
 mov dl,[ebp+esi*1+576]
 mov [edi+512],dl
 mov ecx,[ebp+852]
 add ecx,[ebp+968]
 mov [ebp+852],ecx
 xor esi,esi
 jz john2823
john2830: mov edi,[ebp+1016]
 mov esi,[ebx+alsel]
 mov edx,[ebp+948]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call rw8056
; rem add esp,[ebp+908]
 mov eax,[ebp+976]
 mov esi,[ebp+1004]
 mov [ebp+1020],esi
 mov [ebp+1016],eax
 add esp,[ebp+788]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 pop eax
 ret
; bottom of john2880
; john2938(lnes* xy2938)
; 1000 ebp          1004 retad     1008 *xy2938
; 988 ebx           992 esi        996 edi
; 972 0    976 eax     980 ecx       984 edx
; 956 4    960 3    964 2    968 1
; 940 8    944 7    948 6    952 5
; 924 12    928 11    932       936 nextcalen
; 908 16    912 15    916 fixesp    920 johnjump
john2938: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,3017
 mov edx,esi
 sub edx,3016
 mov ecx,esi
 sub ecx,3000
 mov eax,ecx
 add eax,eax
 add eax,eax
 xor edi,edi
john293pu: push edi
 add edi,edx
 sub ecx,edx
 jnz john293pu
 mov [ebp+916],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 xor edi,edi
 add edi,[ebx+uprightx]
 sub edi,[ebx+lowleftx]
 mov [ebx+jxwidth],edi
 mov edx,[ebx+afilelen]
 mov [ebp+936],edx
 mov edx,[ebx+y]
 mov [ebx+lowleftc],edx
 xor edi,edi
 add edi,[ebx+uprighty]
 sub edi,[ebx+lowlefty]
 mov [ebx+jyheight],edi
 mov edx,[ebx+lowleftc]
 add edx,[ebx+jyheight]
 mov [ebx+jynext],edx
 mov edx,[ebx+lowleftc]
 sub edx,[ebx+lowlefty]
 mov [ebx+jydiff],edx
; 2943 rem if jydiff < 0 then start small decrease
; rem if jydiff >= 0 then start big increase
; copy animation rectangle
 mov edx,[ebx+x]
 mov [ebx+lowleftb],edx
 mov edx,[ebx+lowleftb]
 sub edx,[ebx+lowleftx]
 mov [ebx+jxdiff],edx
 xor edx,edx
 add edx,2953
 mov [ebp+920],edx
 mov ecx,[ebx+jyheight]
 mov edx,[ebx+jyheight]
 cmp ecx,[ebp+972]
 js john29fai
 cmp edx,[ebp+972]
 jns john29sta
john29fai: xor edi,edi
 add edi,2984
 mov [ebp+920],edi
john29sta: mov ecx,[ebp+920]
 cmp ecx,2953
 jnz john29r21
 mov edx,[ebx+jxwidth]
 add edx,[ebp+968]
 mov [ebx+jxwidth],edx
 xor edx,edx
 add edx,2956
 mov [ebp+920],edx
 mov edx,[ebx+jyheight]
 add edx,[ebp+968]
 mov [ebx+jyheight],edx
 mov ecx,[ebx+jydiff]
 cmp ecx,[ebp+972]
 jns john29r21
 xor ecx,ecx
 add ecx,2972
 mov [ebp+920],ecx
john29r21: mov ecx,[ebp+920]
 cmp ecx,2956
 jnz john29r32
 mov edx,[ebx+uprighty]
 mov [ebx+jysrc],edx
 xor ecx,ecx
 sub ecx,[ebp+968]
 mov [ebx+yjn],ecx
 mov edx,[ebx+jynext]
 mov [ebx+jydest],edx
 xor ecx,ecx
 add ecx,2976
 mov [ebp+920],ecx
john29r32: mov edx,[ebp+920]
 cmp edx,2972
 jnz john29r40
 mov edx,[ebx+lowlefty]
 mov [ebx+jysrc],edx
 mov edx,[ebp+968]
 mov [ebx+yjn],edx
 mov edx,[ebx+lowleftc]
 mov [ebx+jydest],edx
 xor edx,edx
 add edx,2976
 mov [ebp+920],edx
john29r40: mov edi,[ebp+920]
 cmp edi,2976
 jz john29r42
 jmp john29r60
john29r42: mov edi,[ebp+972]
 mov [ebx+jyctr],edi
john29r43: mov edi,[ebx+jyctr]
 cmp edi,[ebx+jyheight]
 jns john29r57
john29r45: add edi,[ebp+968]
 mov [ebx+jyctr],edi
 mov edi,[ebx+jxwidth]
 mov esi,[ebx+jydest]
 mov edx,[ebx+jysrc]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call john2880
; rem add esp,[ebp+908]
 mov ecx,[ebp+936]
 cmp ecx,[ebx+jydest]
 jns john29r49
 mov edx,[ebx+jydest]
 mov [ebp+936],edx
john29r49: mov ecx,[ebx+jysrc]
 add ecx,[ebx+yjn]
 mov [ebx+jysrc],ecx
 mov edx,[ebx+jydest]
 add edx,[ebx+yjn]
 mov [ebx+jydest],edx
; jmp john29r43
 xor edi,edi
 jz john29r43
john29r57: xor ecx,ecx
 add ecx,2984
 mov [ebp+920],ecx
john29r60: mov ecx,[ebp+920]
 cmp ecx,2984
 jnz john29r63
 mov edi,[ebp+936]
 mov [ebx+afilelen],edi
john29r63: xor edi,edi
 mov esi,[ebp+1004]
 mov edi,[ebp+976]
 mov [ebp+1008],esi
 mov [ebp+1004],edi
 add esp,[ebp+916]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 ret
; bottom of john2938
; int iscommandarg(lnes* cmavn)
; 1000 ebp      1004 retad      1008 *cmavn
; 984 edx      988 ebx     992 esi     996 edi
; 968 1        972 0       976 eax     980 ecx
; 952 5        956 4       960 3       964 2
; 936 9        940 8       944 7       948 6
; 920 13    924 12    928 11    932 10
; 904 17    908 16    912        916 iscgjmp
; 888 21    892 20    896 iscgctr    900 iscgtiny
; 872 25    876 24    880 11where    884 iscgboores
; 856 29    860 28    864 iscgbig    868 iscgdiff
; 840 33    844 32    848 fixesp    852 newleng
iscommandarg: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,2034
 mov ecx,esi
 xor edi,edi
 sub ecx,2000
 mov edx,esi
 sub edx,2033
 mov eax,ecx
 add eax,eax
 add eax,eax
iscommandpua: push edi
 add edi,edx
 sub ecx,edx
 jnz iscommandpua
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov [ebp+848],eax
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 lea edi,[ebx+crz0160]
 add edi,eax
 mov [ebp+880],edi
 mov ecx,[ebp+972]
 mov [ebp+868],ecx
 xor edx,edx
 add edx,11019
 mov [ebp+916],edx
 mov [ebp+884],ecx
 mov edi,[ebp+928]
 mov esi,[ebp+1008]
 push edi
 push esi
 call dlenval
; rem add esp,[ebp+940]
 mov [ebp+864],eax
 push edi
 push esi
 call tinylenval
; rem add esp,[ebp+940]
 mov [ebp+900],eax
 xor ecx,ecx
 cmp ecx,[ebp+900]
 jns iscg014
 mov edx,[ebp+864]
 sub edx,[ebp+900]
 sub edx,[ebp+968]
 mov [ebp+868],edx
iscg014: mov edi,[ebp+972]
 cmp edi,[ebp+868]
 jns iscg018
 mov ecx,[ebp+900]
 add ecx,[ebp+968]
 cmp ecx,[ebp+864]
 jns iscg018
 xor edx,edx
 add edx,2047
 mov [ebp+916],edx
iscg018: mov ecx,[ebp+916]
 cmp ecx,2047
 jz iscg020
 jmp iscg098
iscg020: mov ecx,[ebp+864]
 sub ecx,[ebp+868]
 mov [ebp+852],ecx
 mov ecx,[ebp+968]
 mov [ebp+896],ecx
iscg023: mov edx,[ebp+968]
 add edx,[ebp+868]
 mov ecx,[ebp+896]
 cmp ecx,edx
 jns iscg030
 mov edi,[ebp+880]
 sub edi,4096
 add edi,[ebp+896]
 sub edi,[ebp+968]
 mov esi,edi
 add esi,[ebp+852]
 xor edx,edx
 mov dl,[esi+4096]
 mov [edi+4096],dl
 mov edx,[ebp+896]
 add edx,[ebp+968]
 mov [ebp+896],edx
 xor edx,edx
 jz iscg023
iscg030: mov edx,[ebp+968]
 add edx,[ebp+868]
 mov [ebp+896],edx
iscg033: mov edx,[ebx+a80w]
 add edx,[ebp+968]
 mov ecx,[ebp+896]
 cmp ecx,edx
 jns iscg039
 mov edi,[ebp+880]
 add edi,[ebp+896]
 sub edi,[ebp+968]
 mov edx,[ebp+844]
 sub edi,2048
 mov [edi+2048],dl
 mov edx,[ebp+896]
 add edx,[ebp+968]
 mov [ebp+896],edx
 xor edx,edx
 jz iscg033
iscg039: mov ecx,[ebp+968]
 mov [ebp+884],ecx
iscg098: mov ecx,[ebp+884]
 mov esi,[ebp+1004]
 mov [ebp+1004],ecx
 mov [ebp+1008],esi
 add esp,[ebp+848]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 ret
; bottom of iscommandarg
; printconst(lnes* firstponst, int firstconst,
;                            int howmanyconst)
; 1008 *firstponst    1012 firstconst    1016 howmanyconst
; 996 edi        1000 ebp        1004 retad
; 980 ecx    984 edx    988 ebx    992 esi
; 964 2    968 1    972 0        976 eax
; 948 codeaddr    952 fixesp   956 4        960 3
; 932 10    936 rconstpos   940 8    944 7
; 916 ll    920 hconstctr   924 12    928 11
printconst: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,915
 xor edi,edi
 mov edx,esi
 sub edx,914
 mov ecx,esi
 sub ecx,900
 mov eax,ecx
 add eax,eax
 add eax,eax
printconstpu: push edi
 add edi,edx
 sub ecx,edx
 jnz printconstpu
 mov [ebp+952],eax
 xor ecx,ecx
 push ecx
 call getreala
; rem add esp,[ebp+956]
 mov [ebp+948],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov eax,[ebx+a80w]
 mov ecx,[ebx+afilelen]
 add ecx,[ebp+972]
;         margin
 push eax
 push ecx
 call nampy
; rem add esp,[ebp+940]
 mov ecx,[ebx+a80w]
 add ecx,ecx
 add eax,ecx
 mov edi,[ebp+948]
 lea ecx,[edi+lastdword]
 add ecx,[ebp+956]
 lea edx,[edi+sandoval]
 sub edx,ecx
 mov ecx,[edi+ramsizech]
 sub ecx,edx
; lea ecx,[ebx+00600000h]
; lea edx,[ebx+sandoval]
; sub ecx,edx
 sub ecx,8192
 sub ecx,eax
 mov eax,[ebx+a80w]
 push eax
 push ecx
 call smposdiv
; rem add esp,[ebp+940]
 mov [ebp+916],eax
 xor ecx,ecx
 mov edx,[ebp+1012]
 mov [ebp+936],edx
 mov [ebp+920],ecx
printc07: mov edi,[ebp+920]
 cmp edi,[ebp+1016]
 jns printc18
 mov edx,[ebp+936]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call litrlsput
; rem add esp,[ebp+940]
 xor ecx,ecx
 jz printc16
printc16: mov edi,[ebp+968]
 add [ebp+920],edi
 add [ebp+936],edi
 xor edi,edi
 jz printc07
printc18: mov edi,[ebp+1016]
 cmp edi,[ebp+940]
 jns printc19
 xor edi,edi
 jz printc20
printc19: mov ebx,[ebp+1008]
 sub ebx,8192
 xor edi,edi
 add edi,14649
 mov [ebp+920],edi
 mov edx,[ebp+932]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 lea ecx,[ebx+crz0160]
 add ecx,eax
 lea edi,[ebp+920]
; printconst debugger 7948 916 ll
 mov esi,[ebp+916]
 mov edx,[ebp+964]
 push edi
 push esi
 push edx
 push ecx
 call chnvalue
; rem mov edx,[ebp+940]
; rem add edx,edx
; rem add esp,edx
 xor edx,edx
 sub edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call litrlsput
; rem add esp,[ebp+940]
printc20: xor edi,edi
 mov esi,[ebp+1004]
 mov eax,[ebp+976]
 mov [ebp+1016],esi
 mov [ebp+1012],eax
 add esp,[ebp+952]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 ret
; bottom of printconst
; int nzendkeyline(lnes* ceeeln, int cdeeln,
;                 int ddkey, int kdinitreqnz)
; 1012 cdeeln   1016 kkdey   1020 kdinitreqnz
; 1000 ebp   1004 retad   1008 *ceeeln
; 984 edx   988 ebx   992 esi   996 edi
; 968 1     972 0     976 eax   980 ecx
; 952 5     956 4     960 3     964 2
; 936 9     940 8     944 7     948 6
; 920 13    924 12    928 11    932 10
; 904 17    908 16    912 a80wpl1   916 14
; 888 21    892 20    896 19    900 nzendkres
; 872 25    876 24    880 23    884 dckey
; 856 29    860 28    864 27    868 dtkey
; 840 33    844 32    848 31    852 dfkey
; 824 37    828 36    832 35    836 dfallow
; 808 41    812 40    816 whereELN    820
; 792 45    796 44    800 fixesp    804
; 776 49    780 48    784 47    788
; 760 53    764 52    768 51    772 50
; 744 57    748 56    752 55    756 54
; 728 61    732 60    736 59    740 58
; 712 65A    716 64    720 63    724 11where
; 696 69E    700 68D    704 67C    708 66B
; 680 73I    684 72H    688 71G    692 70F
; 664 77M    668 76L    672 75K    676 74J
; 648 81Q    652 80P    656 79O    660 78N
; 632 85U    636 84T    640 83S    644 82R
; 616 89Y    620 88X    624 87W    628 86V
; 600 93    604 92    608 91    612 90Z
nzendkeyline: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,994
 xor edi,edi
 mov edx,esi
 sub edx,993
 mov ecx,esi
 sub ecx,900
 mov eax,ecx
 add eax,eax
 add eax,eax
nzendkeylipu: push edi
 add edi,edx
 sub ecx,edx
 jnz nzendkeylipu
 mov [ebp+800],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov edi,[ebp+1012]
 sub edi,[ebp+968]
 mov esi,[ebx+a80w]
 mov edx,esi
 add edx,[ebp+968]
 mov [ebp+912],edx
 push edi
 push esi
 call nampy
; rem add esp,[ebp+940]
 lea edi,[ebx+crz0160]
 add eax,edi
 mov [ebp+816],eax
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 push edx
 push esi
 call nampy
; rem add esp,[ebp+940]
 add eax,edi
 mov [ebp+724],eax
 mov ecx,[ebp+1012]
 mov [ebx+alsel],ecx
 xor edx,edx
 mov [ebp+900],edx
 xor edx,edx
 cmp edx,[ebp+1020]
 jz nzendk020
 mov ecx,[ebp+968]
 mov [ebx+cmdkeyxctr],ecx
 mov ecx,[ebp+1012]
 cmp ecx,[ebp+940]
 jz nzend014
 mov esi,[ebp+1008]
 push ecx
 push esi
 call clearline
; rem add esp,[ebp+940]
 xor edx,edx
 jz nzendk020
nzend014: mov edx,[ebp+1008]
 push ecx
 push edx
 call dlenval
; rem add esp,[ebp+940]
 add eax,[ebp+968]
 mov [ebx+cmdkeyxctr],eax
nzendk020: xor edi,edi
 add edi,1255
 sub edi,1000
 and edi,[ebp+1016]
 mov [ebp+884],edi
 xor edi,edi
 add edi,1512
 sub edi,1000
 mov edx,[ebp+1016]
 push edi
 push edx
 call smposdiv
; rem add esp,[ebp+940]
 mov [ebp+868],eax
 mov ecx,[ebp+928]
 cmp ecx,[ebp+1012]
 jnz nzendk025
 mov edx,[ebp+968]
 mov [ebp+868],edx
nzendk025: mov ecx,[ebp+844]
 mov [ebp+852],ecx
 mov edx,[ebp+884]
 cmp edx,[ebp+844]
 js nzend029
 xor ecx,ecx
 add ecx,1126
 sub ecx,1000
 cmp ecx,edx
 js nzend029
 mov [ebp+852],edx
nzend029: xor ecx,ecx
 mov [ebp+836],ecx
 mov edx,[ebp+868]
 mov ecx,[ebp+1012]
 cmp edx,[ebp+964]
 jns nzend031
 cmp ecx,[ebp+928]
 jnz nzend031
 mov edx,[ebp+968]
 mov [ebp+836],edx
nzend031: xor edi,edi
 cmp edi,[ebp+836]
 jnz nzend033
 jmp nzend040
nzend033: mov ecx,[ebp+884]
 cmp ecx,[ebp+940]
 jnz nzend035
 xor edi,edi
 mov [ebp+836],edi
 mov edx,[ebx+cmdkeyxctr]
 cmp edx,[ebp+964]
 js nzend035
 cmp edx,[ebp+912]
 jns nzend035
 sub edx,[ebp+968]
 mov [ebx+cmdkeyxctr],edx
 sub edx,[ebp+968]
 mov edi,[ebp+816]
 add edi,edx
 sub edi,512
 mov edx,[ebp+844]
 mov [edi+512],dl
nzend035: mov ecx,[ebp+884]
 cmp ecx,[ebp+920]
 jz nzend038
 cmp ecx,[ebp+932]
 jnz nzend040
nzend038: xor edi,edi
 mov [ebp+836],edi
 mov ecx,[ebp+968]
 mov [ebp+900],ecx
nzend040: xor edi,edi
 cmp edi,[ebp+836]
 jz nzend046
 mov esi,[ebx+cmdkeyxctr]
 cmp esi,[ebp+968]
 js nzend046
 cmp esi,[ebp+912]
 jns nzend046
 xor ecx,ecx
 mov [ebp+836],ecx
 mov edi,esi
 sub edi,[ebp+968]
 add edi,[ebp+816]
 sub edi,4096
 mov edx,[ebp+852]
 mov [edi+4096],dl
 add esi,[ebp+968]
 mov [ebx+cmdkeyxctr],esi
 cmp esi,[ebp+912]
 js nzend046
 mov ecx,[ebp+968]
 mov [ebp+900],ecx
nzend046: mov ecx,[ebp+1012]
 mov edx,[ebp+868]
 cmp ecx,[ebp+928]
 jns nzend049
 cmp edx,[ebp+960]
 jns nzend049
 mov esi,[ebp+968]
 mov [ebp+836],esi
nzend049: mov edi,[ebp+972]
 cmp edi,[ebp+836]
 jnz nzend048
nzend0c9: jmp nzend059
nzend048: mov esi,[ebp+884]
 cmp esi,[ebp+940]
 jnz nzend054
 xor edi,edi
 mov [ebp+836],edi
 mov edx,[ebx+cmdkeyxctr]
 cmp edx,[ebp+964]
 js nzend054
 cmp edx,[ebp+912]
 jns nzend054
 mov [ebx+x],edx
 mov edi,[ebp+940]
 mov esi,[ebp+1008]
 push edi
 push esi
 call dkx2050
; rem add esp,[ebp+940]
 mov esi,[ebx+x]
 mov [ebx+cmdkeyxctr],esi
; xxxxxxxxxxxx
 sub esi,[ebp+968]
 mov edx,[ebp+844]
 sub esi,4096
 add esi,[ebp+816]
 mov [esi+4096],dl
; 30=6*5
nzend054: mov edi,[ebp+884]
 cmp edi,[ebp+920]
 jz nzend057
 cmp edi,[ebp+932]
 jnz nzend059
nzend057: xor esi,esi
 mov [ebp+836],esi
 mov ecx,[ebp+968]
 mov [ebp+900],ecx
 mov [ebx+x],ecx
nzend059: xor edi,edi
 cmp edi,[ebp+836]
 jnz zzend062
zzend061: xor ecx,ecx
 jz nzend063
zzend062: mov esi,[ebx+cmdkeyxctr]
 cmp esi,[ebp+968]
 js zzend061
 cmp esi,[ebp+912]
 jns zzend061
 mov [ebx+x],esi
 mov edx,[ebp+868]
 cmp edx,[ebp+964]
 jns zzend061
 mov edx,[ebp+1012]
 mov ecx,[ebp+852]
 mov eax,[ebp+1008]
 push edx
 push ecx
 push eax
 call ikx1864
; rem add esp,[ebp+924]
 mov edx,[ebx+x]
 mov [ebx+cmdkeyxctr],edx
 xor edi,edi
 mov [ebp+836],edi
 cmp edx,[ebp+912]
 js nzend063
 mov ecx,[ebp+968]
 mov [ebp+900],ecx
nzend063: mov ecx,[ebp+1012]
 mov edx,[ebp+868]
 cmp ecx,[ebp+928]
 jns nzend067
 cmp edx,[ebp+964]
 jnz nzend067
nzend064: mov edi,[ebp+968]
 mov [ebp+836],edi
nzend067: xor edi,edi
 cmp edi,[ebp+836]
 jnz nzend069
 jmp nzend081
nzend069: mov esi,[ebp+884]
 cmp esi,[ebp+648]
 jnz nzend071
 mov edi,[ebp+968]
 mov [ebx+cmdkeyxctr],edi
 mov ecx,[ebp+972]
 mov [ebp+836],ecx
nzend071: cmp esi,[ebp+672]
 jnz nzend073
 mov ecx,[ebx+cmdkeyxctr]
 cmp ecx,[ebp+964]
 js nzend073
 sub ecx,[ebp+968]
 mov [ebx+cmdkeyxctr],ecx
 xor edx,edx
 mov [ebp+836],edx
nzend073: cmp esi,[ebp+664]
 jnz nzend077
 mov edx,[ebx+cmdkeyxctr]
 cmp edx,[ebx+a80w]
 jns nzend077
 add edx,[ebp+968]
 mov [ebx+cmdkeyxctr],edx
 xor edi,edi
 mov [ebp+836],edi
nzend077: cmp esi,[ebp+644]
 jnz nzend079
 mov ecx,[ebp+968]
 sub ecx,[ebx+insertype]
 mov [ebx+insertype],ecx
 xor edi,edi
 mov [ebp+836],edi
nzend079: cmp esi,[ebp+640]
 jnz nzend081
 xor edi,edi
 mov [ebp+836],edi
 mov edx,[ebx+cmdkeyxctr]
 cmp edx,[ebp+968]
 js nzend081
 cmp edx,[ebp+912]
 jns nzend081
 mov [ebx+x],edx
 mov ecx,[ebp+956]
 mov eax,[ebp+1008]
 push ecx
 push eax
 call dkx2050
; rem add esp,[ebp+940]
 mov ecx,[ebx+x]
 mov [ebx+cmdkeyxctr],ecx
nzend081: xor edi,edi
 mov [ebx+twocurwozy],edi
 mov [ebx+twocurwozx],edi
 mov ecx,[ebx+ypheight]
 sub ecx,[ebx+nznormalend]
 mov [ebx+onecurwozy],ecx
 mov edx,[ebx+cmdheight]
 cmp ecx,edx
 jns nzend084
 mov [ebx+onecurwozy],edx
nzend084: mov ecx,[ebp+968]
 add [ebx+onecurwozy],ecx
 mov edx,[ebx+cmdkeyxctr]
 mov [ebx+onecurwozx],edx
 xor edi,edi
 cmp edi,[ebp+900]
 jz nzend087
 mov [ebx+onecurwozx],edi
nzend087: mov ecx,[ebp+1012]
 cmp ecx,[ebp+928]
 jz nzend091
 mov ecx,[ebx+a80w]
 mov esi,[ebp+816]
 mov edi,[ebp+724]
 sub edi,512
 sub esi,512
 mov edx,[ebp+968]
nzend089: mov al,[esi+512]
 mov [edi+512],al
 add esi,edx
 add edi,edx
 sub ecx,edx
 jnz nzend089
nzend091: mov edx,[ebx+ypheight]
 sub edx,[ebx+nznormalend]
 sub edx,[ebp+972]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 lea edi,[ebx+evwr]
 add edi,eax
 sub edi,4096
 mov esi,[ebp+724]
 sub esi,2048
 mov eax,[ebp+968]
 xor edx,edx
nzend092: mov dl,[esi+2048]
 mov [edi+4096],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz nzend092
nzend093: mov edx,[ebp+900]
 mov [ebp+1016],edx
 mov esi,[ebp+1004]
 mov [ebp+1020],esi
 add esp,[ebp+800]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 pop eax
 ret
; bottom of nzendkeyline
; void udgetcoml(lnes* dgcttn, int dgctln,
;                int ndjmp, int lopjmp)
; 1012 dgctln    1016 ndjmp    1020 lopjmp
; 1000 ebp    1004 retad    1008 *dgcttn
; 894 edx    988 ebx    992 esi    996 edi
; 968 1    972 0    976 eax
; 952 5    956 4    960 3    980 ecx
; 936 9    940 8    944 7    964 2
; 920 13    924 12    928 11    948 6
; 904 17    908 16    912 15    916 fixesp
udgetcoml: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,2018
 mov edx,esi
 sub edx,2017
 mov ecx,esi
 sub ecx,2000
 mov eax,ecx
 add eax,eax
 add eax,eax
 xor edi,edi
udgetpuml: push edi
 add edi,edx
 sub ecx,edx
 jnz udgetpuml
 mov [ebp+916],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov ecx,[ebp+1020]
 cmp ecx,[ebx+dagrajmpnow]
 jz udg8119
 xor edi,edi
 jz udgetnotl
; jmp udgetnotl
udg8119: xor edi,edi
 add edi,53098
 mov [ebx+dagrajmpnow],edi
 mov [ebx+freddynext],ecx
 xor edi,edi
 cmp edi,[ebx+keyclineinit]
 jz udg8126
 mov ecx,[ebp+1008]
 push edi
 push ecx
 call litrlsput
; rem add esp,[ebp+940]
 mov ecx,[ebp+968]
 mov [ebx+cmdkeyxctr],ecx
udg8126: mov edi,[ebx+keyclineinit]
 mov esi,[ebx+dagranewkey]
 mov edx,[ebp+1012]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call nzendkeyline
; rem add esp,[ebp+908]
 mov [ebp+932],eax
 xor edi,edi
 mov [ebx+keyclineinit],edi
 cmp edi,[ebp+932]
 jz udgetnotl
 mov ecx,[ebp+1016]
 mov [ebx+dagrajmpnow],ecx
udgetnotl: mov edi,[ebp+916]
 mov eax,[ebp+976]
 mov ecx,[ebp+1004]
 mov [ebp+1020],ecx
 mov [ebp+1016],eax
 add esp,edi
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 pop eax
 ret
; bottom of udgetcoml
; void tinypcl(lnes* neeeta, int nexsta,
;      int prwih, int gtonec, int actma)
; 1016 prwih    1020 gtonec    1024 actma
; 1004 retad    1008 *neeeta    1012 nexsta
; 988 ebx    992 esi    996 edi    1000 ebp
; 972 0    976 eax    980 ecx    984 edx
; 956 4    960 3    964 2    968 1
; 940 8    944 7    948 6    952 5
; 924 12    928 11    932 10    936 fixesp
; 908 16    912 15    916 14    920 13
tinypcl: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,3017
 mov ecx,esi
 sub ecx,3000
 mov edx,esi
 sub edx,3016
 xor edi,edi
 mov eax,ecx
 add eax,eax
 add eax,eax
tinypul: push edi
 add edi,edx
 sub ecx,edx
 jnz tinypul
 mov [ebp+936],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov edi,[ebp+1024]
 cmp edi,[ebx+dagrajmpnow]
 jz tinypbl
 xor ecx,ecx
 jz tinysetl
tinypbl: mov ecx,[ebp+968]
 cmp ecx,[ebp+1020]
 jns tinypel
 mov eax,[ebp+1008]
 push ecx
 push eax
 call clearpage
; rem add esp,[ebp+940]
tinypel: mov edx,[ebp+1016]
 mov eax,[ebp+1008]
 push ecx
 push edx
 push eax
 call printconst
; rem add esp,[ebp+924]
 mov edx,[ebp+968]
 mov [ebx+keyclineinit],edx
 xor esi,esi
 mov ecx,[ebp+1008]
 push esi
 push ecx
 call litrlsput
; rem add esp,[ebp+940]
tinypgl: mov edx,[ebp+1012]
 mov [ebx+freddynext],edx
 xor ecx,ecx
 add ecx,53098
 mov [ebx+dagrajmpnow],ecx
tinysetl: mov ecx,[ebp+1020]
 cmp ecx,[ebp+968]
 jns tinyseel
 mov edx,[ebx+freddynext]
 mov [ebx+dagrajmpnow],edx
tinyseel: mov edi,[ebp+936]
 mov esi,[ebp+1004]
 mov edx,[ebp+976]
 mov [ebp+1024],esi
 mov [ebp+1020],edx
 add esp,edi
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 pop eax
 pop eax
 ret
; bottom of tinypcl
; void new2608(lnes* lsnew)
; 1000 ebp    1004 retad    1008 *lsnew
; 984 edx    988 988    992 esi    996 edi
; 968 1    972 0    976 eax    980 ecx
; 952 5    956 4    960 3    964 2
; 936 9    940 8    944 7    948 6
; 920 13    924 12    928 11    932 10
; 904 17    908 16    912 15    916 14
; 888 21    892 20    896 19    900 fixesp
new2608: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ecx,ecx
 add ecx,922
 sub ecx,900
 xor edx,edx
 add edx,902
 sub edx,901
 mov eax,ecx
 add eax,eax
 add eax,eax
 xor ebx,ebx
new26pu: push ebx
 add ebx,edx
 sub ecx,edx
 jnz new26pu
 mov [ebp+900],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
; ------------
; hiskwid needs to be initialized to 512
 xor ecx,ecx
 xor ecx,ecx
 add ecx,512
 mov [ebx+hiskwid],ecx
; --------------------
 xor esi,esi
 mov edi,[ebp+968]
 mov ecx,[ebp+924]
 add ecx,ecx
 sub ecx,[ebp+964]
 mov [ebx+ypheight],ecx
 mov edx,[ebp+944]
 xor ecx,ecx
 xor ecx,ecx
 add ecx,480
 sub ecx,400
 mov [ebx+a80w],ecx
 mov edx,[ebp+936]
 mov [ebx+cmdheight],edx
 mov [ebx+keysdebugger],esi
 mov [ebx+virtscrn],esi
 mov [ebx+nzalways0d0a],esi
 mov [ebx+nzfileg],edi
 mov [ebx+leftdebugger],esi
 mov [ebx+nznormalend],esi
 mov [ebx+nzshift],esi
 mov [ebx+x],edi
 mov [ebx+y],edi
 mov [ebx+sfgcur],edi
 mov [ebx+sfgshow02],edi
 mov [ebx+sfgprv],edi
 mov [ebx+repceedag],esi
 mov [ebx+nzsaveskipod],esi
 mov [ebx+prindiff],esi
 mov [ebx+prinjill],esi
 mov [ebx+nzerror],esi
 mov [ebx+afilelen],esi
 mov [ebx+chnext],esi
 mov [ebx+chdoc],esi
 mov [ebx+chzerv],esi
 mov [ebx+insertype],edi
 mov [ebx+inspg],esi
 mov [ebx+marginselect],edi
 mov [ebx+prindiffprv],esi
 mov [ebx+uprighty],esi
 mov [ebx+lowlefty],edi
 mov [ebx+mouallocal],esi
 mov [ebx+moualglobal],esi
 mov [ebx+yre],edi
 mov [ebx+xe],edi
 mov [ebx+uprightx],esi
 mov [ebx+lowleftx],edi
 mov edx,[ebp+908]
 add edx,edx
 mov [ebx+bkgnd],edx
 mov [ebx+uppercase],esi
 mov [ebx+evdk],esi
 mov [ebx+rep0],esi
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 lea ecx,[ebx+crz0160]
 add ecx,eax
 mov [ebx+elevrd],ecx
 mov edx,[ebp+968]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearpage
; rem add esp,[ebp+940]
 mov edx,[ebp+940]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearline
; rem add esp,[ebp+940]
 mov [ebx+eofi],esi
 mov [ebx+onecurwozx],esi
 mov [ebx+onecurwozy],esi
 mov ecx,[ebp+908]
 add ecx,ecx
 mov [ebx+dagraprvkey],ecx
 xor edx,edx
 add edx,927
 sub edx,900
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call litrlsput
; rem add esp,[ebp+940]
 mov esi,[ebp+1004]
 mov edi,[ebp+976]
 mov [ebp+1008],esi
 mov [ebp+1004],edi
 add esp,[ebp+900]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 ret
; end of new2608
; void cdgetcoml(lnes* cgcttn,int cgctln,int ncjmp,
;                    int lopcjmp);
; 1012 cgctln    1016 ncjmp    1020 lopcjmp
; 1000 ebp        1004 retad    1008 *cgcttn
; 984 edx    988 ebx    992 esi    996 edi
; 968 1    972 0    976 eax    980 ecx
; 952 5    956 4    960 3    964 2
; 936 9    940 8    944 7    948 6
; 920 13    924 12    928 11    932 10
; 904 17    908 16    912 15    916 fixesp
; 888 21    892 20    896 19    900
; 872 25    876 24    880 23    884
; 856 29    860 28    864 27    868
; 840 33    844 32    848 31    852 gclnc
; 824 37    828 36    832 35    836 cgctla
; 808 41    812 40    816 39    820 cfiltkey
; 792 45    796 44    800 43    804
; 776 49    780 48    784 47    788
; 760 53    764 52    768 51    772 50
; 744 57    748 56    752 55    756 54
; 728 61    732 60    736 59    740 58
; 712 65 A    716 64    720 63    724
; 696 69 E    700 68 D    704 67 C     708 66 B
; 680 73 I    684 72 H    688 71 G     692 70 F
; 664 77 M    668 76 L    672 75 K     676 74 J
; 648 81 Q    652 80 P    656 79 O     660 78 N
; 632 85 U    636 84 T    640 83 S     644 82 R
; 616 89 Y    620 88 X    624 87 W     628 86 V
; 600 93    604 92    608 91    612 90 Z
; 584 97 a    588 96    592 95    596
; 568 101 e    572 100 d    576 99 c    580 98 b
; 552 105 i    556 104 h    560 103 g    564 102 f
; 536 109 m    540 108 l    544 107 k    548 106 j
; 520 113 q    524 112 p    528 111 o    532 110 n
; 504 117 u    508 116 t    512 115 s    516 114 r
; 488 121 y    492 120 x    496 119 w    500 118 v
; 472 125    476 124    480 123    484 122 z
; 456 129    460 128    464 127    468 126
; 440 133    444 132    448 131    452 130
cdgetcoml: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor esi,esi
 add esi,1134
 mov edx,esi
 sub edx,1133
 mov ecx,esi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
 xor edi,edi
cdgetcopu: push edi
 add edi,edx
 sub ecx,edx
 jnz cdgetcopu
 mov [ebp+916],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 mov ecx,[ebp+1020]
 cmp ecx,[ebx+dagrajmpnow]
 jz cdgetstart
 jmp cdgetnotl
cdgetstart: xor edi,edi
 add edi,53098
 mov [ebx+dagrajmpnow],edi
 mov [ebx+freddynext],ecx
 mov edx,[ebp+1012]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 lea edi,[ebx+crz0160]
 add edi,eax
 mov [ebp+836],edi
 mov edx,[ebp+972]
 cmp edx,[ebx+keyclineinit]
 jz cdnoninit
 mov edx,[ebp+1012]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearline
; rem add esp,[ebp+940]
 mov ecx,[ebp+968]
 mov [ebx+cmdkeyxctr],ecx
cdnoninit: xor edi,edi
 mov [ebx+keyclineinit],edi
 mov [ebp+852],edi
 mov edx,[ebx+dagranewkey]
 mov ecx,[ebp+464]
 add ecx,[ebp+460]
 and edx,ecx
 mov [ebp+820],edx
 cmp edx,[ebp+940]
 jnz cdnonback
 mov esi,[ebx+cmdkeyxctr]
 sub esi,[ebp+968]
 cmp esi,[ebp+968]
 js cdnonback
 mov [ebx+cmdkeyxctr],esi
 sub esi,[ebp+968]
 add esi,[ebp+836]
 mov edx,[ebp+844]
 sub esi,512
 mov [esi+512],dl
cdnonback: mov edx,[ebx+dagranewkey]
 cmp edx,[ebp+844]
 js cdnondkey
 cmp edx,[ebp+464]
 jns cdnondkey
 mov edi,[ebx+cmdkeyxctr]
 sub edi,[ebp+968]
 js cdnondkey
 cmp edi,[ebx+a80w]
 jns cdnondkey
 mov esi,edi
 add edi,[ebp+836]
 sub edi,2048
 mov [edi+2048],dl
 add esi,[ebp+964]
 mov [ebx+cmdkeyxctr],esi
 cmp esi,[ebx+a80w]
 js cdnondkey
 mov ecx,[ebp+968]
 mov [ebp+852],ecx
 mov edx,[ebx+a80w]
 mov [ebx+cmdkeyxctr],edx
cdnondkey: mov edx,[ebx+dagranewkey]
 cmp edx,[ebp+932]
 jz cdisda
 cmp edx,[ebp+920]
 jnz cdnotda
cdisda: mov ecx,[ebp+968]
 mov [ebp+852],ecx
cdnotda: xor edi,edi
 cmp edi,[ebp+852]
 jz cdnotchg
 mov ecx,[ebp+1016]
 mov [ebx+dagrajmpnow],ecx
cdnotchg: mov edx,[ebx+ypheight]
 sub edx,[ebx+nznormalend]
 sub edx,[ebp+968]
 add edx,[ebp+460]
 sub edx,[ebp+464]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 lea edi,[ebx+evwr]
 add edi,eax
 mov esi,[ebp+836]
 sub esi,2048
 sub edi,1024
 mov eax,[ebp+968]
cdgetpr: mov dl,[esi+2048]
 mov [edi+1024],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz cdgetpr
cdgetnotl: mov edi,[ebp+916]
 mov eax,[ebp+976]
 mov ecx,[ebp+1004]
 mov [ebp+1020],ecx
 mov [ebp+1016],eax
 add esp,edi
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 pop eax
 ret
; bottom of replacement cdgetcoml
; line 13523
; void ron52640(lnes* lnron)
; implied argument is (*(lnron)).dagranewkey
; 1000 ebp   1004 retad   1008 *lnron
; 984 edx   988 ebx   992 esi   996 edi
; 968 1     972 0     976 eax   980 ecx
; 952 5     956 4     960 3     964 2
; 936 9     940 8     944 7     948 6
; 920 13    924 12    928 11    932 10
; 904 17    908 16    912 15    916 14
; 888 21    892 20    896 19    900 18
; 872 25    876 24    880 23    884 22
; 856 29    860 28    864 27    868 26
; 840 33    844 32    848 31    852
; 824 37    828 36    832 35    836
; 808 41    812 40    816 39    820
; 792 45    796 44    800 43    804 42
; 776 49    780 48    784 47    788 46
; 760 53    764 52    768 51    772 50
; 744 57    748 56    752 55    756 54
; 728 61    732 60    736 59    740 58
; 712 65A    716 64    720 63    724 62
; 696 69E    700 68D    704 67C    708 66B
; 680 73I    684 72H    688 71G    692 70F
; 664 77M    668 76L    672 75K    676 74J
; 648 81Q    652 80P    656 79O    660 78N
; 632 85U    636 84T    640 83S    644 82R
; 616 89Y    620 88X    624 87W    628 86V
; 600 93    604 92    608 91    612 90Z
; 584 97    588 96    592 95    596 fixesp
; 568 101    572 100    576 99    580
; 552 105    556 104    560 103    564
; 536 109    540 108    544 107    548
; 520 113    524 112    528 111    532
; 504 117    508 116    512 115    516
; 488 121    492 120    496 119    500
; 472 125    476 124    480 123    484
; 456 129    460 128    464 127    468 126
ron52640: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 xor esi,esi
 add esi,1130
 mov edx,esi
 sub edx,1129
 mov ecx,esi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
ron526pu: push edi
 add edi,edx
 sub ecx,edx
 jnz ron526pu
 mov [ebp+596],eax
 mov ebx,[ebp+1008]
 sub ebx,8192
 xor edi,edi
 xor ecx,ecx
 add ecx,52640
 cmp ecx,[ebx+dagrajmpnow]
 jnz notrox52640
 mov edx,[ebp+968]
 mov [ebx+xe],edx
 mov [ebx+yre],edx
 mov [ebx+x],edx
 mov [ebx+y],edx
 xor ecx,ecx
 add ecx,52648
 mov [ebx+dagrajmpnow],ecx
notrox52640: xor ecx,ecx
 add ecx,52642
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron52642
 mov ecx,[ebx+xe]
 mov edx,[ebx+yre]
 mov [ebx+x],ecx
 mov [ebx+y],edx
 xor ecx,ecx
 add ecx,52645
 mov [ebx+dagrajmpnow],ecx
notron52642: xor ecx,ecx
 add ecx,52645
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron52645
 mov edx,[ebx+dagranewkey]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call udregkey2176
; rem add esp,[ebp+940]
notron52645: xor ecx,ecx
 add ecx,52646
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron52646
 mov ecx,[ebx+x]
 mov edx,[ebx+y]
 mov [ebx+xe],ecx
 mov [ebx+yre],edx
 xor ecx,ecx
 add ecx,52648
 mov [ebx+dagrajmpnow],ecx
notron52646: xor ecx,ecx
 add ecx,52648
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron52648
 mov edx,[ebp+968]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearpage
; rem add esp,[ebp+940]
 xor ecx,ecx
 add ecx,52661
 xor edx,edx
 add edx,53098
 mov [ebx+freddynext],ecx
 mov [ebx+dagrajmpnow],edx
 mov edx,[ebp+768]
 sub edx,[ebp+852]
 add edx,[ebp+968]
 mov ecx,[ebp+852]
 mov eax,[ebp+1008]
 push edx
 push ecx
 push eax
 call printconst
; rem add esp,[ebp+924]
notron52648: xor ecx,ecx
 add ecx,52661
 cmp ecx,[ebx+dagrajmpnow]
 jz isron52661
 jmp notron52661
isron52661: mov ecx,[ebp+460]
 add ecx,[ebp+464]
 mov edx,[ebx+dagranewkey]
 and edx,ecx
 mov [ebx+keychar5],edx
 mov esi,[ebp+844]
 cmp edx,[ebp+844]
 js roncmd32
 cmp edx,[ebp+464]
 jns roncmd32
 xor ecx,ecx
 add ecx,1023
 cmp ecx,[ebx+dagranewkey]
 js roncmd32
 mov esi,edx
 cmp edx,[ebp+584]
 js roncmd32
 cmp edx,[ebp+480]
 jns roncmd32
 sub esi,[ebp+844]
roncmd32: mov [ebx+keycmd5],esi
 xor ecx,ecx
 add ecx,52661
 xor edi,edi
 add edx,53098
 mov [ebx+freddynext],ecx
 mov [ebx+dagrajmpnow],edx
 mov ecx,[ebp+920]
 cmp ecx,[ebx+keychar5]
 jz ronisodoa
 mov ecx,[ebp+932]
 cmp ecx,[ebx+keychar5]
 jnz notronc10
ronisodoa: xor edx,edx
 add edx,52642
 mov [ebx+freddynext],edx
notronc10: xor ecx,ecx
 cmp ecx,[ebx+nznormalend]
 jnz notronc27
 mov ecx,[ebp+864]
 cmp ecx,[ebx+keychar5]
 jnz notronc27
 xor ecx,ecx
 add ecx,52800
 mov [ebx+dagrajmpnow],ecx
notronc27: mov ecx,[ebp+644]
 cmp ecx,[ebx+keycmd5]
 jnz notronr
 xor ecx,ecx
 add ecx,52642
 mov [ebx+freddynext],ecx
 xor ecx,ecx
 add ecx,53098
 mov [ebx+dagrajmpnow],ecx
notronr: mov ecx,[ebp+660]
 cmp ecx,[ebx+keycmd5]
 jnz notronn
 mov edx,[ebp+1008]
 push edx
 call new2608
; rem add esp,[ebp+956]
 xor edx,edx
 add edx,52642
 mov [ebx+freddynext],edx
 xor edx,edx
 add edx,53098
 mov [ebx+dagrajmpnow],edx
notronn: mov esi,[ebx+keycmd5]
 xor edx,edx
 cmp esi,[ebp+656]
 jnz notrono
 xor ecx,ecx
 add ecx,52733
 mov [ebx+dagrajmpnow],ecx
notrono: cmp esi,[ebp+652]
 jnz notronp
 xor ecx,ecx
 add ecx,52988
 mov [ebx+dagrajmpnow],ecx
notronp: cmp esi,[ebp+620]
 jnz notronx
 xor ecx,ecx
 add ecx,36155
 mov [ebx+dagrajmpnow],ecx
notronx: cmp esi,[ebp+668]
 jnz notronl
 xor ecx,ecx
 add ecx,52736
 mov [ebx+dagrajmpnow],ecx
notronl: cmp esi,[ebp+728]
 jnz notroneq
 xor ecx,ecx
 add ecx,36585
 mov [ebx+dagrajmpnow],ecx
notroneq: cmp esi,[ebp+716]
 jnz notroneqat
 xor ecx,ecx
 add ecx,36585
 mov [ebx+dagrajmpnow],ecx
notroneqat: cmp esi,[ebp+612]
 jnz notronz
 xor ecx,ecx
 add ecx,36156
 mov [ebx+dagrajmpnow],ecx
notronz: cmp esi,[ebp+712]
 jnz notrona
 xor ecx,ecx
 add ecx,52776
 mov [ebx+dagrajmpnow],ecx
notrona: cmp esi,[ebp+632]
 jnz notronu
 xor ecx,ecx
 add ecx,36154
 mov [ebx+dagrajmpnow],ecx
notronu: cmp esi,[ebp+696]
 jnz notrone
 xor ecx,ecx
 add ecx,52782
 mov [ebx+dagrajmpnow],ecx
notrone: cmp esi,[ebp+648]
 jnz notronq
 xor ecx,ecx
 add ecx,52800
 mov [ebx+dagrajmpnow],ecx
notronq: cmp esi,[ebp+692]
 jnz notronf
 xor ecx,ecx
 add ecx,52804
 mov [ebx+dagrajmpnow],ecx
notronf: cmp esi,[ebp+688]
 jnz notrong
 xor ecx,ecx
 add ecx,52814
 mov [ebx+dagrajmpnow],ecx
notrong: cmp esi,[ebp+704]
 jnz notronc
 xor edx,edx
 add edx,[ebp+968]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearpage
; rem add esp,[ebp+940]
 xor ecx,ecx
 add ecx,36170
 mov [ebx+dagrajmpnow],ecx
notronc: cmp esi,[ebp+664]
 jnz notronm
 xor ecx,ecx
 add ecx,53000
 mov [ebx+dagrajmpnow],ecx
notronm: cmp esi,[ebp+636]
 jnz notront
 xor ecx,ecx
 add ecx,52708
 mov [ebx+dagrajmpnow],ecx
notront: cmp esi,[ebp+708]
 jnz notronb
 xor ecx,ecx
 add ecx,52714
 mov [ebx+dagrajmpnow],ecx
notronb: cmp esi,[ebp+700]
 jnz notrond
 xor ecx,ecx
 add ecx,52720
 mov [ebx+dagrajmpnow],ecx
notrond: cmp esi,[ebp+672]
 jnz notronk
 xor ecx,ecx
 add ecx,52815
 mov [ebx+dagrajmpnow],ecx
notronk: cmp esi,[ebp+680]
 jnz notroni
 xor ecx,ecx
 add ecx,52860
 mov [ebx+dagrajmpnow],ecx
notroni: cmp esi,[ebp+628]
 jnz notronv
; mov ecx,[ebp+968]
; sub ecx,[ebx+virtscrn]
 mov ecx,[ebx+virtscrn]
 add ecx,[ebp+968]
 cmp ecx,[ebp+960]
 js notroniwz
 xor ecx,ecx
notroniwz: mov [ebx+virtscrn],ecx
 or ecx,ecx
 jnz notronivz
 mov ecx,[ebp+968]
 sub ecx,[ebx+nzalways0d0a]
 mov [ebx+nzalways0d0a],ecx
notronivz: xor ecx,ecx
 add ecx,52642
 mov [ebx+freddynext],ecx
 xor ecx,ecx
 add ecx,53098
 mov [ebx+dagrajmpnow],ecx
notronv: cmp esi,[ebp+616]
 jnz notrony
 xor ecx,ecx
 add ecx,53072
 mov [ebx+dagrajmpnow],ecx
notrony: cmp esi,[ebp+684]
 jnz notron52661
 xor ecx,ecx
 add ecx,53054
 mov [ebx+dagrajmpnow],ecx
notron52661: xor edx,edx
 add edx,52708
 cmp edx,[ebx+dagrajmpnow]
 jnz notron52708
 mov ecx,[ebp+968]
 mov [ebx+yre],ecx
 mov [ebx+xe],ecx
 xor ecx,ecx
 add ecx,52642
 xor edx,edx
 add edx,53098
 mov [ebx+freddynext],ecx
 mov [ebx+dagrajmpnow],edx
notron52708: xor ecx,ecx
 add ecx,52714
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron52714
 mov edx,[ebp+968]
 mov [ebx+xe],edx
 add edx,[ebx+afilelen]
 mov [ebx+yre],edx
 xor ecx,ecx
 add ecx,52642
 xor edx,edx
 add edx,53098
 mov [ebx+freddynext],ecx
 mov [ebx+dagrajmpnow],edx
notron52714: xor ecx,ecx
 add ecx,52720
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron52720
 mov edx,[ebp+844]
 mov [ebx+bkgnd],edx
 mov edx,[ebp+968]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearpage
; rem add esp,[ebp+940]
 mov edx,[ebp+968]
 mov ecx,[ebp+748]
 mov eax,[ebp+1008]
 push edx
 push ecx
 push eax
 call printconst
; rem add esp,[ebp+924]
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52731
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron52720: xor edx,edx
 add edx,52731
 cmp edx,[ebx+dagrajmpnow]
 jnz notron52731
 mov esi,[ebp+844]
 mov ecx,[ebp+460]
 add ecx,[ebp+464]
 and ecx,[ebx+dagranewkey]
 cmp ecx,esi
 js notroo52720
 cmp ecx,[ebp+464]
 jns notroo52720
 mov esi,ecx
notroo52720: mov [ebx+bkgnd],esi
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron52731: xor ecx,ecx
 add ecx,52733
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron52733
 mov edx,[ebp+964]
 mov [ebx+opendell],edx
 mov ecx,[ebx+afilelen]
 add ecx,[ebp+968]
 mov [ebx+y],ecx
 xor edi,edi
 add edi,52733
 mov esi,[ebp+972]
 mov edx,[ebp+744]
 xor ecx,ecx
 add ecx,52734
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
notron52733: xor ecx,ecx
 add ecx,52734
 cmp ecx,[ebx+dagrajmpnow]
 jz isr52734
 jmp not52734
isr52734: mov edx,[ebp+972]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call litrlsput
; rem add esp,[ebp+940]
 xor edx,edx
 push edx
 push ecx
 call litrlsput
; rem add esp,[ebp+940]
 mov edx,[ebp+948]
 add edx,[ebx+opendell]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 lea esi,[ebx+crz0160]
 mov edi,esi
 add esi,eax
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 add edi,eax
 sub esi,4096
 sub edi,2048
 mov eax,[ebp+968]
ron52734fnl: mov dl,[esi+4096]
 mov [edi+2048],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz ron52734fnl
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52742
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
 xor edi,edi
 mov [ebx+twocurwozy],edi
 mov [ebx+twocurwozx],edi
 mov ecx,[ebx+ypheight]
 sub ecx,[ebx+nznormalend]
 mov [ebx+onecurwozy],ecx
 cmp ecx,[ebx+cmdheight]
 jns ron52734cy
 mov edx,[ebx+cmdheight]
 mov [ebx+onecurwozy],edx
ron52734cy: mov ecx,[ebp+968]
 add [ebx+onecurwozy],ecx
 mov [ebx+onecurwozx],ecx
 mov edx,[ebp+964]
 cmp edx,[ebx+opendell]
 jnz not52734
 mov edx,[ebp+948]
 add edx,[ebx+opendell]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
; rem add esp,[ebp+940]
 add eax,[ebp+968]
 mov [ebx+onecurwozx],eax
not52734: xor ecx,ecx
 add ecx,52736
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron52736
 mov ecx,[ebp+968]
 mov [ebx+opendell],ecx
 xor edi,edi
 add edi,52736
 mov esi,[ebp+964]
 mov edx,[ebp+740]
 xor ecx,ecx
 add ecx,52742
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
notron52736: xor ecx,ecx
 add ecx,52742
 cmp ecx,[ebx+dagrajmpnow]
 jnz notror52742
 mov edi,ecx
 mov esi,edi
 add esi,[ebp+968]
 mov edx,[ebp+948]
 add edx,[ebx+opendell]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
; rem add esp,[ebp+908]
notror52742: xor ecx,ecx
 add ecx,52743
 cmp ecx,[ebx+dagrajmpnow]
 jz isr52743
 jmp notron52743
isr52743: mov edx,[ebp+948]
 add edx,[ebx+opendell]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
; rem add esp,[ebp+940]
 xor edi,edi
 cmp edi,eax
 jns ronsk52743
 xor edi,edi
 cmp edi,[ebx+afilelen]
 js isch52743
 cmp edi,[ebx+uppercase]
 jz isdh52743
isch52743: mov edx,[ebp+968]
 mov [ebx+chdoc],edx
isdh52743: xor edx,edx
 mov ecx,[ebp+948]
 add ecx,[ebx+opendell]
 mov eax,[ebp+1008]
 push edx
 push ecx
 push eax
 call readol
; rem add esp,[ebp+924]
ronsk52743: mov edx,[ebx+opendell]
 cmp edx,[ebp+964]
 jnz notyre52743
 mov ecx,[ebp+968]
 add ecx,[ebx+afilelen]
 mov [ebx+yre],ecx
 mov [ebx+y],ecx
notyre52743: xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron52743: xor ecx,ecx
 add ecx,36585
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron36585
 mov ecx,[ebp+968]
 mov [ebx+opendell],ecx
 xor edi,edi
 add edi,36585
 mov esi,[ebp+964]
 mov edx,[ebp+740]
 xor ecx,ecx
 add ecx,36587
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
notron36585: xor ecx,ecx
 add ecx,36587
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron36587
 mov edi,ecx
 mov esi,edi
 add esi,[ebp+968]
 mov edx,[ebp+948]
 add edx,[ebx+opendell]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
; rem add esp,[ebp+908]
notron36587: xor ecx,ecx
 add ecx,36588
 cmp ecx,[ebx+dagrajmpnow]
 jz isr36588
 jmp notron36588
isr36588: xor edi,edi
 mov edx,[ebp+948]
 add edx,[ebx+opendell]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
; rem add esp,[ebp+940]
 mov esi,[ebp+968]
 cmp esi,eax
 jns notrhe36588
 cmp edi,[ebx+afilelen]
 jns nochxr36588
 mov [ebx+chdoc],esi
nochxr36588: cmp edi,[ebx+uppercase]
 jz nochyr36588
 mov [ebx+chdoc],esi
nochyr36588: mov edx,[ebp+908]
 mov ecx,[ebp+716]
 cmp ecx,[ebx+keycmd5]
 jnz nochyr14330
 add edx,edx
 add edx,edx
nochyr14330: mov ecx,[ebp+948]
 add ecx,[ebx+opendell]
 mov eax,[ebp+1008]
 push edx
 push ecx
 push eax
 call readol
; rem add esp,[ebp+924]
notrhe36588: mov ecx,[ebp+964]
 cmp ecx,[ebx+opendell]
 jnz noyre36588
 mov edx,[ebp+968]
 add edx,[ebx+afilelen]
 mov [ebx+yre],edx
 mov [ebx+y],edx
noyre36588: xor ecx,ecx
 add ecx,52642
 xor edx,edx
 add edx,53098
 mov [ebx+freddynext],ecx
 mov [ebx+dagrajmpnow],edx
notron36588: xor ecx,ecx
 add ecx,52782
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron52782
 xor edi,edi
 cmp edi,[ebx+chdoc]
 jnz rondch52782
 xor ecx,ecx
 add ecx,52800
 mov [ebx+dagrajmpnow],ecx
 xor ecx,ecx
 jz notron52782
rondch52782: xor edi,edi
 add edi,52782
 mov esi,[ebp+964]
 mov edx,[ebp+752]
 xor ecx,ecx
 add ecx,52793
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
notron52782: xor ecx,ecx
 add ecx,52793
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron52793
 xor edx,edx
 add edx,53098
 xor ecx,ecx
 add ecx,52648
 mov [ebx+freddynext],ecx
 mov ecx,[ebp+460]
 add ecx,[ebp+464]
 and ecx,[ebx+dagranewkey]
 cmp ecx,[ebp+480]
 jns lcron52793
 cmp ecx,[ebp+584]
 js lcron52793
 sub ecx,[ebp+844]
lcron52793: cmp ecx,[ebp+660]
 jnz ronvn52793
 xor edx,edx
 add edx,52800
ronvn52793: cmp ecx,[ebp+616]
 jnz ronvy52793
 xor edx,edx
 add edx,52797
ronvy52793: mov [ebx+dagrajmpnow],edx
notron52793: xor edi,edi
 add edi,52797
 cmp edi,[ebx+dagrajmpnow]
 jnz notron52797
 xor esi,esi
 mov edx,[ebp+756]
 xor ecx,ecx
 add ecx,36583
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
notron52797: xor edi,edi
 add edi,36583
 cmp edi,[ebx+dagrajmpnow]
 jz isr36583
 jmp notron36583
isr36583: xor edx,edx
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call litrlsput
; rem add esp,[ebp+940]
 mov edx,[ebp+940]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 lea esi,[ebx+crz0160]
 sub esi,512
 mov edi,esi
 add esi,eax
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 add edi,eax
 xor edx,edx
 mov eax,[ebp+968]
lop36583r: mov dl,[esi+512]
 mov [edi+512],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz lop36583r
 xor edx,edx
 sub edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call litrlsput
; rem add esp,[ebp+940]
 xor edx,edx
 push edx
 push ecx
 call litrlsput
; rem add esp,[ebp+940]
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52798
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
 xor edi,edi
 mov [ebx+twocurwozy],edi
 mov [ebx+twocurwozx],edi
 mov esi,[ebx+ypheight]
 sub esi,[ebx+nznormalend]
 mov [ebx+onecurwozy],esi
 mov esi,[ebx+cmdheight]
 mov edx,[ebx+ypheight]
 sub edx,[ebx+nznormalend]
 cmp edx,esi
 jns notrco36583
 mov [ebx+onecurwozy],esi
notrco36583: mov edx,[ebp+968]
 add [ebx+onecurwozy],edx
 mov edx,[ebp+940]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
; rem add esp,[ebp+940]
 cmp eax,[ebp+972]
 jz notrco3658v3
 xor edi,edi
 mov [ebx+keyclineinit],edi
notrco3658v3: add eax,[ebp+968]
 mov [ebx+onecurwozx],eax
 mov [ebx+cmdkeyxctr],eax
notron36583: xor edi,edi
 add edi,52798
 cmp edi,[ebx+dagrajmpnow]
 jnz notron52798
 xor esi,esi
 add esi,52799
 mov edx,[ebp+940]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
; rem add esp,[ebp+908]
notron52798: xor edi,edi
 add edi,52799
 cmp edi,[ebx+dagrajmpnow]
 jnz notron52799
 mov ecx,[ebp+1008]
 push ecx
 call eightsaveas
; rem add esp,[ebp+956]
 xor edi,edi
 mov [ebx+chdoc],edi
 add edi,52800
 mov [ebx+dagrajmpnow],edi
notron52799: xor edi,edi
 add edi,52776
 cmp edi,[ebx+dagrajmpnow]
 jnz notron52776
 xor esi,esi
 mov edx,[ebp+760]
 xor ecx,ecx
 add ecx,36581
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
notron52776: xor edi,edi
 add edi,36581
 cmp edi,[ebx+dagrajmpnow]
 jz isr36581
 jmp notron36581
isr36581: mov edx,[ebp+972]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call litrlsput
; rem add esp,[ebp+940]
 mov edx,[ebp+940]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 lea esi,[ebx+crz0160]
 sub esi,512
 mov edi,esi
 add esi,eax
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 add edi,eax
 mov eax,[ebp+968]
lopr36581: mov dl,[esi+512]
 mov [edi+512],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz lopr36581
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52777
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
 xor edi,edi
 mov [ebx+twocurwozy],edi
 mov [ebx+twocurwozx],edi
 mov esi,[ebx+ypheight]
 sub esi,[ebx+nznormalend]
 mov [ebx+onecurwozy],esi
 mov edx,[ebx+cmdheight]
 cmp esi,edx
 jns cmdy36581
 mov [ebx+onecurwozy],edx
cmdy36581: mov ecx,[ebp+968]
 add [ebx+onecurwozy],ecx
 mov edx,[ebp+940]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
; rem add esp,[ebp+940]
 add eax,[ebp+968]
 mov [ebx+onecurwozx],eax
 mov edi,[ebp+972]
 sub edi,[ebp+928]
 mov esi,[ebp+1008]
 push edi
 push esi
 call litrlsput
; rem add esp,[ebp+940]
 xor edi,edi
 push edi
 push esi
 call litrlsput
; rem add esp,[ebp+940]
notron36581: xor edi,edi
 add edi,52777
 cmp edi,[ebx+dagrajmpnow]
 jnz notron52777
 mov esi,edi
 add esi,[ebp+968]
 mov edx,[ebp+940]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
; rem add esp,[ebp+908]
notron52777: xor edi,edi
 add edi,52778
 cmp edi,[ebx+dagrajmpnow]
 jnz notron52778
 mov ecx,[ebp+1008]
 push ecx
 call eightsaveas
; rem add esp,[ebp+956]
 xor edi,edi
 mov [ebx+chdoc],edi
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron52778: xor edi,edi
 add edi,52800
 cmp edi,[ebx+dagrajmpnow]
 jnz notron52800
 mov edx,[ebp+968]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearpage
; rem add esp,[ebp+940]
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,11019
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron52800: xor edi,edi
 add edi,52804
 cmp edi,[ebx+dagrajmpnow]
 jnz notron52804
 mov ecx,[ebx+xe]
 mov edx,[ebx+yre]
 mov [ebx+lowleftx],ecx
 mov [ebx+lowlefty],edx
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+freddynext],edx
 mov [ebx+dagrajmpnow],ecx
notron52804: xor ecx,ecx
 add ecx,52814
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron52814
 mov ecx,[ebx+xe]
 mov edx,[ebx+yre]
 mov [ebx+uprightx],ecx
 mov [ebx+uprighty],edx
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron52814: xor edi,edi
 add edi,52815
 cmp edi,[ebx+dagrajmpnow]
 jnz notron52815
 mov ecx,[ebp+968]
 sub ecx,[ebx+nznormalend]
 mov [ebx+nznormalend],ecx
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron52815: xor edi,edi
 add edi,52860
 cmp edi,[ebx+dagrajmpnow]
 jnz notron52860
 mov esi,[ebp+964]
 mov edx,[ebp+736]
 mov ecx,edi
 add ecx,[ebp+956]
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
notron52860: xor edi,edi
 add edi,52864
 cmp edi,[ebx+dagrajmpnow]
 jnz notron52864
 mov esi,edi
 add esi,[ebp+960]
 mov edx,[ebp+948]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
; rem add esp,[ebp+908]
notron52864: xor ecx,ecx
 add ecx,52867
 cmp ecx,[ebx+dagrajmpnow]
 jz isr52867
 jmp notron52867
isr52867: xor edi,edi
 xor edi,edi
 mov [ebx+lfdal],edi
 mov ecx,[ebx+dagraprvkey]
 cmp ecx,[ebp+844]
 jnz rnb52867
 mov edx,[ebp+968]
 mov [ebx+lfdal],edx
rnb52867: mov ecx,[ebx+yre]
 mov [ebx+rcmdctr],ecx
 mov edx,[ebp+968]
 mov [ebx+dagraprvkey],edx
 mov ecx,[ebp+948]
 mov eax,[ebp+1008]
 push ecx
 push eax
 call dlenval
; rem add esp,[ebp+940]
 xor ecx,ecx
 cmp eax,ecx
 jnz whtop52867
 cmp ecx,[ebx+nznormalend]
 jz whtop52867
 mov ecx,[ebp+968]
 add ecx,[ebx+afilelen]
 mov [ebx+rcmdctr],ecx
 xor ecx,ecx
 mov [ebx+dagraprvkey],ecx
 xor edi,edi
 jz wbt52867
whtop52867: mov ecx,[ebx+rcmdctr]
 sub ecx,[ebp+968]
 cmp ecx,[ebx+afilelen]
 jns wbt52867
 xor edi,edi
 cmp edi,[ebx+dagraprvkey]
 jz wbt52867
 mov edi,[ebx+rcmdctr]
 mov esi,[ebx+lfdal]
 mov edx,[ebp+972]
 mov ecx,[ebp+948]
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call findtwoeq
; rem add esp,[ebp+892]
 xor edi,edi
 cmp edi,eax
 jz fr52867
 mov [ebx+dagraprvkey],edi
fr52867: xor esi,esi
 cmp esi,[ebx+dagraprvkey]
 jz wbt52867
 mov ecx,[ebp+968]
 add [ebx+rcmdctr],ecx
 xor ecx,ecx
 jz whtop52867
wbt52867: mov ecx,[ebx+rcmdctr]
 mov [ebx+yre],ecx
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
 xor edi,edi
 cmp edi,[ebx+dagraprvkey]
 jz notron52867
 xor ecx,ecx
 add ecx,52648
 mov [ebx+freddynext],ecx
notron52867: xor ecx,ecx
 add ecx,52988
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron52988
 mov eax,[ebp+1008]
 push eax
 call john2938
; rem add esp,[ebp+956]
 mov edx,[ebp+968]
 mov [ebx+chdoc],edx
 mov ecx,[ebx+lowleftb]
 mov edx,[ebx+lowleftc]
 mov [ebx+lowleftx],ecx
 mov [ebx+lowlefty],edx
 mov ecx,[ebx+jydiff]
 add ecx,[ebx+uprighty]
 mov [ebx+uprighty],ecx
 mov edx,[ebx+jxdiff]
 add edx,[ebx+uprightx]
 mov [ebx+uprightx],edx
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron52988: xor ecx,ecx
 add ecx,53000
 cmp ecx,[ebx+dagrajmpnow]
 jz isr53000
 xor ecx,ecx
 jz djn53000
; jmp djn53000
isr53000: mov eax,[ebp+1008]
 push eax
 call john2938
; rem add esp,[ebp+956]
 mov ecx,[ebp+968]
 mov [ebx+chdoc],ecx
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
 mov ecx,[ebx+jxwidth]
 mov edx,[ebx+jyheight]
 mov esi,[ebx+lowleftx]
 sub esi,[ebx+lowleftb]
 mov edi,[ebx+lowlefty]
 sub edi,[ebx+lowleftc]
 cmp ecx,[ebp+968]
 js djn53000
 cmp edx,[ebp+968]
 js djn53000
 or esi,edi
 jz djn53000
 xor ecx,ecx
 add ecx,53008
 mov [ebx+dagrajmpnow],ecx
djn53000: xor ecx,ecx
 add ecx,53008
 cmp ecx,[ebx+dagrajmpnow]
 jz isr53008
 jmp notron53008
isr53008: mov esi,[ebx+uprightx]
 add esi,[ebx+jxdiff]
 mov edi,[ebx+uprighty]
 add edi,[ebx+jydiff]
 mov [ebx+tzrx],esi
 mov [ebx+tzby],edi
 mov edx,[ebx+lowlefty]
 mov [ebx+yyectr],edx
owh53008: mov edx,[ebp+968]
 add edx,[ebx+uprighty]
 mov ecx,[ebx+yyectr]
 cmp ecx,edx
 js ohh53008
 jmp noto53008
ohh53008: mov edx,[ebx+lowleftx]
 mov [ebx+xxjctr],edx
 mov edi,[ebx+yyectr]
 mov esi,[ebp+968]
 mov edx,[ebp+952]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call rw8056
; rem add esp,[ebp+908]
iwh53008: mov edx,[ebp+968]
 add edx,[ebx+uprightx]
 mov ecx,[ebx+xxjctr]
 cmp ecx,edx
 js ihh53008
 jmp wrtb53008
ihh53008: lea edi,[ebx+crz0160]
 add edi,[ebx+xxjctr]
 sub edi,[ebp+968]
 sub edi,2048
 xor esi,esi
 add esi,53040
 mov ecx,[ebx+xxjctr]
 cmp ecx,[ebx+lowleftb]
 js bk53008
 mov ecx,[ebx+tzrx]
 cmp ecx,[ebx+xxjctr]
 js bk53008
 mov ecx,[ebx+yyectr]
 cmp ecx,[ebx+lowleftc]
 js bk53008
 mov ecx,[ebx+tzby]
 cmp ecx,[ebx+yyectr]
 js bk53008
 xor esi,esi
 add esi,53042
bk53008: cmp esi,53040
 jnz bknw53008
 mov edx,[ebx+bkgnd]
 mov [edi+2048],dl
bknw53008: mov edx,[ebp+968]
 add [ebx+xxjctr],edx
 jmp iwh53008
wrtb53008: mov edi,[ebx+yyectr]
 mov esi,[ebp+968]
 mov edx,[ebp+948]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call rw8056
; rem add esp,[ebp+908]
 mov edx,[ebp+968]
 add [ebx+yyectr],edx
 jmp owh53008
noto53008: mov ecx,[ebx+lowleftb]
 mov edx,[ebx+lowleftc]
 mov [ebx+lowleftx],ecx
 mov [ebx+lowlefty],edx
 mov ecx,[ebx+jydiff]
 mov edx,[ebx+jxdiff]
 add [ebx+uprighty],ecx
 add [ebx+uprightx],edx
 mov ecx,[ebp+968]
 mov [ebx+chdoc],ecx
 xor esi,esi
 add esi,53098
 mov [ebx+dagrajmpnow],esi
 xor ecx,ecx
 add ecx,52642
 mov [ebx+freddynext],ecx
notron53008: xor ecx,ecx
 add ecx,53054
 cmp ecx,[ebx+dagrajmpnow]
 jz isr53054
 jmp notron53054
isr53054: mov edi,[ebx+yre]
 mov esi,[ebp+968]
 mov edx,[ebp+952]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call rw8056
; rem add esp,[ebp+908]
 push esi
 push ecx
 call dlenval
; rem add esp,[ebp+940]
 add esi,eax
 mov edx,[ebx+a80w]
 mov [ebx+xe],edx
 cmp esi,[ebp+968]
 js keebxe53054
 cmp edx,esi
 js keebxe53054
 mov [ebx+xe],esi
keebxe53054: mov edx,[ebp+968]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearline
; rem add esp,[ebp+940]
 mov edx,[ebx+xe]
 mov [ebx+x],edx
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron53054: xor edi,edi
 add edi,53072
 cmp edi,[ebx+dagrajmpnow]
 jnz notron53072
 mov esi,[ebp+964]
 mov edx,[ebp+732]
 xor ecx,ecx
 add ecx,53071
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
notron53072: xor edi,edi
 add edi,53071
 cmp edi,[ebx+dagrajmpnow]
 jnz notron53071
 mov esi,edi
 sub esi,[ebp+968]
 mov edx,[ebp+948]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call cdgetcoml
; rem add esp,[ebp+908]
notron53071: xor edi,edi
 add edi,53070
 cmp edi,[ebx+dagrajmpnow]
 jz isr53070
 jmp notron53070
isr53070: mov edx,[ebp+948]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 lea esi,[ebx+crz0160]
 add esi,eax
 xor edi,edi
 add edi,14393
 mov [ebx+y],edi
 lea edx,[ebx+y]
 xor ecx,ecx
 push esi
 push edx
 push ecx
 call rlnvalue
; rem add esp,[ebp+924]
 mov [ebx+rcmdctr],eax
 mov ecx,[ebx+rcmdctr]
 mov edx,[ebx+afilelen]
 cmp edx,ecx
 jns iir53070
 add edx,[ebp+968]
 mov [ebx+rcmdctr],edx
iir53070: mov esi,[ebp+968]
 mov edx,[ebx+rcmdctr]
 cmp edx,esi
 jns ihr53070
 mov [ebx+rcmdctr],esi
ihr53070: mov edx,[ebx+rcmdctr]
 mov [ebx+y],edx
 mov [ebx+yre],edx
 xor edi,edi
 mov [ebx+rcmdctr],edi
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron53070: xor edi,edi
 add edi,36154
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36154
 mov esi,[ebp+584]
 sub esi,[ebx+uppercase]
 mov [ebx+uppercase],esi
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron36154: xor ecx,ecx
 add ecx,36155
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron36155
 mov esi,[ebp+940]
 sub esi,[ebx+marginselect]
 mov [ebx+marginselect],esi
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron36155: xor ecx,ecx
 add ecx,36156
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron36156
 xor ecx,ecx
 add ecx,53098
 mov [ebx+dagrajmpnow],ecx
 xor edx,edx
 add edx,52648
 mov [ebx+freddynext],edx
 xor edi,edi
 cmp edi,[ebx+chdoc]
 jnz notron36156
 xor edx,edx
 add edx,52642
 mov [ebx+freddynext],edx
notron36156: xor ecx,ecx
 add ecx,36170
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron36170
 xor ecx,ecx
 add ecx,36180
 mov [ebx+dagrajmpnow],ecx
notron36170: xor ecx,ecx
 add ecx,36326
 cmp ecx,[ebx+dagrajmpnow]
 jnz notron36326
 xor edi,edi
 add edi,36180
 xor esi,esi
 mov edx,[ebp+968]
 mov eax,[ebp+1008]
 push ecx
 push esi
 push edx
 push edi
 push eax
 call tinypcl
; rem add esp,[ebp+892]
notron36326: xor edi,edi
 add edi,36180
 cmp edi,[ebx+dagrajmpnow]
 jz isr36180
 jmp notron36180
isr36180: xor esi,esi
 mov edx,[ebp+960]
 mov ecx,edi
 add ecx,[ebp+964]
 mov eax,[ebp+1008]
 push edi
; 36180 0
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
 mov edi,ecx
 xor esi,esi
 mov edx,[ebp+908]
 add ecx,[ebp+964]
 mov eax,[ebp+1008]
 push edi
; 36182 0
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
 mov edi,ecx
 mov esi,[ebp+972]
 mov edx,[ebp+856]
 add ecx,[ebp+964]
 mov eax,[ebp+1008]
 push edi
; 36184 0
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
 mov edi,ecx
 mov esi,[ebp+968]
 mov edx,[ebp+728]
 add ecx,[ebp+916]
 mov eax,[ebp+1008]
 push edi
; 36186 1
 push esi
 push edx
 push ecx
; 36190 line 10851 956.916 36200
 push eax
 call tinypcl
; rem add esp,[ebp+892]
 xor edx,edx
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call litrlsput
; rem add esp,[ebp+940]
 mov edi,[ebp+968]
 mov [ebx+keyclineinit],edi
 add edi,36199
 mov [ebx+freddynext],edi
notron36180: xor edi,edi
 add edi,36200
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36200
 mov ecx,edi
 add ecx,[ebp+964]
 mov esi,[ebp+928]
 mov eax,[ebp+1008]
 push edi
; 36200
 push ecx
 push esi
 push eax
 call udgetcoml
; rem add esp,[ebp+908]
; udgetcoml(*1008,11,+2,36200)
; udgetcoml(*1008,11,53098,36200)
notron36200: xor ecx,ecx
 add ecx,36202
 cmp ecx,[ebx+dagrajmpnow]
 jz isr36202
 jmp notron36202
isr36202: mov edx,[ebp+972]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call cmdjavcurz
; rem add esp,[ebp+940]
 mov [ebx+curcommand],eax
 mov edx,[ebp+968]
 mov [ebx+howmanycmd],edx
 mov eax,[ebx+curcommand]
 cmp eax,[ebp+896]
 jz inr362y0
 cmp eax,[ebp+900]
 jz inr362y0
 cmp eax,[ebp+884]
 jz inr362y0
 mov edx,[ebp+968]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call cmdjavcurz
; rem add esp,[ebp+940]
 mov [ebx+howmanycmd],eax
inr362y0: mov eax,[ebp+1008]
 push eax
 call iscommandarg
; rem add esp,[ebp+956]
 mov [ebx+rcmdctr],eax
 mov edx,[ebx+curcommand]
 cmp edx,[ebp+896]
 jz inr362y1
 cmp edx,[ebp+900]
 jz inr362y1
 cmp edx,[ebp+884]
 jz inr362y1
 xor edi,edi
; cmp or and
 and edi,[ebx+rcmdctr]
 jz isr362y2
inr362y1: jmp notron362y2
isr362y2: mov edx,[ebp+928]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 lea ecx,[ebx+crz0160]
 add ecx,eax
 xor edx,edx
 add edx,12857
 mov [ebx+dagrajmpnow],edi
 xor edi,edi
 add edi,14137
 mov [ebx+freddynext],edi
 mov edx,[ebp+972]
 mov eax,[ebp+1008]
 push edx
 push eax
 call litrlsput
; rem add esp,[ebp+940]
 lea edi,[ebx+dagrajmpnow]
 mov esi,[ebx+a80w]
 mov edx,[ebp+968]
 push edi
 push esi
 push edx
 push ecx
 call chnvalue
; rem add esp,[ebp+908]
 mov esi,[ebx+curcommand]
 mov edx,[ebp+956]
 push edi
 push esi
 push edx
 push ecx
 call chnvalue
; rem add esp,[ebp+908]
 lea edi,[ebx+freddynext]
 mov esi,[ebx+howmanycmd]
 mov edx,[ebp+940]
 push edi
 push esi
 push edx
 push ecx
 call chnvalue
; rem add esp,[ebp+908]
 mov esi,[ebx+y]
 mov edx,[ebp+900]
 push edi
 push esi
 push edx
 push ecx
 call chnvalue
; rem add esp,[ebp+908]
 xor edx,edx
 sub edx,[ebp+928]
 mov eax,[ebp+1008]
 push edx
 push eax
 call litrlsput
; rem add esp,[ebp+940]
 xor edx,edx
 mov eax,[ebp+1008]
 push edx
 push eax
 call litrlsput
; rem add esp,[ebp+940]
notron362y2: xor esi,esi
 add esi,53098
 mov [ebx+dagrajmpnow],esi
 xor edx,edx
 add edx,36326
 mov [ebx+freddynext],edx
 mov edi,[ebx+curcommand]
xotron02: cmp edi,[ebp+960]
 jnz xotron03
 xor esi,esi
 add esi,36303
xotron03: cmp edi,[ebp+956]
 jnz xotron04
 xor esi,esi
 add esi,36314
xotron04: cmp edi,[ebp+952]
 jnz xotron05
 xor esi,esi
 add esi,36325
xotron05: cmp edi,[ebp+948]
 jnz xotron06
 xor esi,esi
 add esi,36326
xotron06: cmp edi,[ebp+944]
 jnz xotron07
 xor esi,esi
 add esi,36337
xotron07: cmp edi,[ebp+940]
 jnz xotron08
 xor esi,esi
 add esi,36348
xotron08: cmp edi,[ebp+936]
 jnz xotron09
 xor esi,esi
 add esi,36349
xotron09: cmp edi,[ebp+932]
 jnz xotron10
 xor esi,esi
 add esi,36360
xotron10: cmp edi,[ebp+928]
 jnz xotron11
 xor esi,esi
 add esi,36371
xotron11: cmp edi,[ebp+924]
 jnz xotron12
 xor esi,esi
 add esi,36372
xotron12: cmp edi,[ebp+920]
 jnz xotron13
 xor esi,esi
 add esi,36383
xotron13: cmp edi,[ebp+916]
 jnz xotron14
 xor esi,esi
 add esi,36394
xotron14: cmp edi,[ebp+912]
 jnz xotron15
 xor esi,esi
 add esi,36395
xotron15: cmp edi,[ebp+908]
 jnz xotron16
 xor esi,esi
 add esi,36396
xotron16: cmp edi,[ebp+904]
 jnz xotron17
 xor esi,esi
 add esi,36407
xotron17: cmp edi,[ebp+900]
 jnz xotron18
 xor esi,esi
 add esi,36418
xotron18: cmp edi,[ebp+896]
 jnz xotron19
 xor esi,esi
 add esi,36429
xotron19: cmp edi,[ebp+892]
 jnz xotron20
 xor esi,esi
 add esi,36440
xotron20: cmp edi,[ebp+888]
 jnz xotron21
 xor esi,esi
 add esi,36451
xotron21: cmp edi,[ebp+884]
 jnz xotron22
 xor esi,esi
 add esi,36462
xotron22: cmp edi,[ebp+880]
 jnz xotron23
 xor esi,esi
 add esi,36473
xotron23: cmp edi,[ebp+876]
 jnz xotron24
 xor esi,esi
 add esi,36484
xotron24: cmp edi,[ebp+872]
 jnz xotron25
 xor esi,esi
 add esi,36495
xotron25: cmp edi,[ebp+868]
 jnz xotron26
 xor esi,esi
 add esi,36506
xotron26: cmp edi,[ebp+864]
 jnz xotron27
 xor esi,esi
 add esi,36517
xotron27: cmp edi,[ebp+860]
 jnz xotron28
 xor esi,esi
 add esi,36528
xotron28: cmp edi,[ebp+856]
 jnz xotron29
 xor esi,esi
 add esi,36529
xotron29: mov [ebx+dagrajmpnow],esi
notron36202: xor edi,edi
 add edi,36303
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36303
 xor esi,esi
; 36303 03 insertb
 mov [ebx+inserback],esi
 mov esi,[ebp+968]
 mov edx,[ebp+724]
 mov ecx,edi
 add ecx,[ebp+968]
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
notron36303: xor edi,edi
 add edi,36304
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36304
 mov esi,edi
 add esi,[ebp+968]
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
; rem add esp,[ebp+908]
notron36304: xor edi,edi
 add edi,36314
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36314
 mov esi,[ebp+972]
; 36314 04 insert
 mov [ebx+inserback],esi
 mov esi,[ebp+968]
 mov edx,[ebp+720]
 mov ecx,edi
 add ecx,esi
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
notron36314: xor edi,edi
 add edi,36315
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36315
 mov esi,[ebp+968]
 add esi,edi
 mov edx,[ebp+928]
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push eax
 call udgetcoml
; rem add esp,[ebp+908]
notron36315: xor edi,edi
 add edi,36316
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36316
 mov esi,[ebx+y]
 mov edx,[ebx+afilelen]
 xor ecx,ecx
 add ecx,36305
 mov [ebx+dagrajmpnow],ecx
 add edx,[ebp+968]
 cmp esi,edx
 jns notron36316
 add esi,[ebp+968]
 mov [ebx+y],esi
notron36316: xor edi,edi
 add edi,36305
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36305
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call aptinsert
; rem add esp,[ebp+940]
 mov esi,[ebx+y]
 add esi,[ebx+inserback]
 mov [ebx+y],esi
 xor esi,esi
 push esi
 push ecx
 call litrlsput
; rem add esp,[ebp+940]
 mov esi,[ebp+968]
 mov edx,[ebx+y]
 sub edx,esi
 mov [ebx+y],edx
 mov [ebx+chdoc],esi
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
notron36305: xor edi,edi
 add edi,36325
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36325
 xor esi,esi
; 36325 05 delete
 sub esi,[ebx+howmanycmd]
 jz skipbdelm71
 mov ecx,[ebp+1008]
 push esi
 push ecx
 call aptinsert
; rem add esp,[ebp+940]
skipbdelm71: mov edx,[ebp+968]
 mov [ebx+chdoc],edx
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
notron36325: xor edi,edi
 add edi,36337
 cmp edi,[ebx+dagrajmpnow]
 jz isr36337
 jmp notron36337
isr36337: mov edx,[ebp+972]
;  36337 07 M
 mov eax,[ebp+1008]
 push edx
 push eax
 call litrlsput
; rem add esp,[ebp+940]
 mov esi,[ebp+972]
 mov [ebx+rcmdctr],esi
 mov ecx,[ebx+afilelen]
 mov edx,[ebx+y]
 cmp ecx,edx
 jns yac36337
 sub edx,[ebx+cmdheight]
 mov [ebx+y],edx
yac36337: mov esi,[ebx+rcmdctr]
 cmp esi,[ebx+cmdheight]
 jns yae36337
 add esi,[ebx+y]
 mov edx,[ebp+928]
 mov ecx,[ebp+952]
 mov eax,[ebp+1008]
 push esi
 push edx
 push ecx
 push eax
 call rw8056
; rem add esp,[ebp+908]
 xor ecx,ecx
 sub ecx,edx
 mov eax,[ebp+1008]
 push ecx
 push eax
 call litrlsput
; rem add esp,[ebp+940]
 mov edx,[ebp+968]
 add [ebx+rcmdctr],edx
 xor ecx,ecx
 jz yac36337
yae36337: mov esi,[ebx+y]
 add esi,[ebx+rcmdctr]
 mov [ebx+y],esi
 xor ecx,ecx
 mov eax,[ebp+1008]
 push ecx
 push eax
 call litrlsput
; rem add esp,[ebp+940]
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
notron36337: xor edi,edi
 add edi,36348
 cmp edi,[ebx+dagrajmpnow]
 jz isr36348
 jmp notron36348
;    36348 K
isr36348: xor edx,edx
 mov eax,[ebp+1008]
 push edx
 push eax
 call litrlsput
; rem add esp,[ebp+940]
 xor esi,esi
 mov [ebx+rcmdctr],esi
yac36348: mov esi,[ebx+rcmdctr]
 cmp esi,[ebx+cmdheight]
 jns yae36348
 add esi,[ebx+y]
 mov edx,[ebp+928]
 mov ecx,[ebp+952]
 mov eax,[ebp+1008]
 push esi
 push edx
 push ecx
 push eax
 call rw8056
; rem add esp,[ebp+908]
 xor ecx,ecx
 sub ecx,edx
 mov eax,[ebp+1008]
 push ecx
 push eax
 call litrlsput
; rem add esp,[ebp+940]
 mov edx,[ebp+968]
 add [ebx+rcmdctr],edx
 xor ecx,ecx
 jz yac36348
yae36348: mov edx,[ebx+y]
 sub edx,[ebx+rcmdctr]
 mov [ebx+y],edx
 xor ecx,ecx
 mov eax,[ebp+1008]
 push ecx
 push eax
 call litrlsput
; rem add esp,[ebp+940]
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
 mov ecx,[ebx+y]
 mov edx,[ebp+968]
 cmp ecx,edx
 jns notron36348
 mov [ebx+y],edx
notron36348: xor edi,edi
 add edi,36349
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36349
; 36349 09 tof
 mov edx,[ebp+968]
 mov [ebx+y],edx
 xor ecx,ecx
 add ecx,36350
 mov [ebx+dagrajmpnow],ecx
notron36349: xor edi,edi
 add edi,36360
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36360
; 36360 11 bot
 mov esi,[ebx+afilelen]
 mov [ebx+y],esi
 xor ecx,ecx
 add ecx,36350
 mov [ebx+dagrajmpnow],ecx
notron36360: xor edi,edi
 add edi,36371
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36371
; 36371 11 up
 mov esi,[ebx+y]
 sub esi,[ebx+howmanycmd]
 mov [ebx+y],esi
 xor ecx,ecx
 add ecx,36350
 mov [ebx+dagrajmpnow],ecx
notron36371: xor edi,edi
 add edi,36372
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36372
; 36372 12 down
 mov esi,[ebx+howmanycmd]
 add [ebx+y],esi
 xor ecx,ecx
 add ecx,36350
 mov [ebx+dagrajmpnow],ecx
notron36372: xor edi,edi
 add edi,36350
 cmp edi,[ebx+dagrajmpnow]
 jz isr36350
; jmp notron36350
 xor edi,edi
 jz notron36350
isr36350: mov edx,[ebx+y]
 mov esi,[ebp+968]
 cmp edx,esi
 jns ist36350
 mov [ebx+y],esi
ist36350: mov ecx,[ebx+afilelen]
 cmp ecx,[ebx+y]
 jns isw36350
 add ecx,esi
 mov [ebx+y],ecx
isw36350: xor edx,edx
 mov edi,[ebp+1008]
 push edx
 push edi
 call litrlsput
; rem add esp,[ebp+940]
 mov esi,[ebx+y]
 mov edx,[ebp+928]
 mov ecx,[ebp+952]
 push esi
 push edx
 push ecx
 push edi
 call rw8056
; rem add esp,[ebp+908]
 xor ecx,ecx
 sub ecx,edx
 push ecx
 push edi
 call litrlsput
; rem add esp,[ebp+940]
 xor ecx,ecx
 push ecx
 push edi
 call litrlsput
; rem add esp,[ebp+940]
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
notron36350: xor edi,edi
 add edi,36383
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36383
; 36383 13 input
 xor esi,esi
 mov edx,[ebp+716]
 mov ecx,[ebp+968]
 add ecx,edi
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
notron36383: xor edi,edi
 add edi,36384
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36384
 mov esi,[ebp+968]
 add esi,[ebx+afilelen]
 mov [ebx+y],esi
 mov edx,[ebp+968]
 mov [ebx+keyclineinit],edx
 xor edx,edx
 add edx,53098
 mov [ebx+dagrajmpnow],edx
 xor ecx,ecx
 add ecx,36385
 mov [ebx+freddynext],ecx
notron36384: xor edi,edi
 add edi,36385
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36385
 mov esi,[ebp+968]
 add esi,edi
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
; rem add esp,[ebp+908]
notron36385: xor edi,edi
 add edi,36386
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36386
 mov edx,[ebp+928]
 mov eax,[ebp+1008]
 push edx
 push eax
 call dlenval
; rem add esp,[ebp+940]
 mov [ebx+rcmdctr],eax
 mov ecx,[ebp+968]
 mov [ebx+keyclineinit],ecx
 xor esi,esi
 add esi,36387
 mov [ebx+dagrajmpnow],esi
 xor esi,esi
 cmp esi,[ebx+rcmdctr]
 js notron36386
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
notron36386: xor edi,edi
 add edi,36387
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36387
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,36385
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
 mov esi,[ebp+968]
 mov [ebx+keyclineinit],esi
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call aptinsert
; rem add esp,[ebp+940]
 xor edx,edx
 push edx
 push ecx
 call litrlsput
; rem add esp,[ebp+940]
 mov [ebx+chdoc],esi
notron36387: xor edi,edi
 add edi,36394
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36394
; 36394 14 quit
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,11019
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron36394: xor edi,edi
 add edi,36395
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36395
; 36395 print 15 does not work
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,36326
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron36395: xor edi,edi
 add edi,36396
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36396
; 36396 16 replace
 mov edi,[ebx+y]
 mov esi,[ebp+928]
 mov edx,[ebp+952]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call rw8056
; rem add esp,[ebp+908]
 xor edx,edx
 sub edx,esi
 push edx
 push ecx
 call litrlsput
; rem add esp,[ebp+940]
 xor ecx,ecx
 mov eax,[ebp+1008]
 push ecx
 push eax
 call litrlsput
; rem add esp,[ebp+940]
 xor ecx,ecx
 add ecx,36397
 mov [ebx+dagrajmpnow],ecx
notron36396: xor edi,edi
 add edi,36397
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36397
 mov esi,[ebp+968]
 mov edx,[ebp+712]
 mov ecx,esi
 add ecx,edi
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
notron36397: xor edi,edi
 add edi,36398
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36398
 mov esi,[ebp+968]
 add esi,edi
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
; rem add esp,[ebp+908]
notron36398: xor edi,edi
 add edi,36399
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36399
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
; rem add esp,[ebp+940]
 mov [ebx+rcmdctr],eax
 xor ecx,ecx
 add ecx,36405
 mov [ebx+dagrajmpnow],ecx
 xor esi,esi
 cmp esi,[ebx+rcmdctr]
 js notron36399
 xor edx,edx
 add edx,36400
 mov [ebx+dagrajmpnow],edx
notron36399: xor edi,edi
 add edi,36400
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36400
 mov esi,[ebp+968]
 mov edx,[ebp+708]
 mov ecx,esi
 add ecx,edi
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
notron36400: xor edi,edi
 add edi,36401
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36401
 mov esi,[ebp+968]
 add esi,edi
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
; rem add esp,[ebp+908]
notron36401: xor edi,edi
 add edi,36402
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36402
 xor ecx,ecx
 add ecx,36180
 xor edx,edx
 add edx,53095
 mov [ebx+freddynext],ecx
 mov [ebx+dagrajmpnow],edx
 mov esi,[ebp+928]
 mov ecx,[ebp+1008]
 push esi
 push ecx
 call dlenval
; rem add esp,[ebp+940]
 mov [ebx+rcmdctr],eax
 mov ecx,[ebp+616]
 cmp ecx,[ebx+rcmdctr]
 jnz notron36402
 xor edx,edx
 add edx,36403
 mov [ebx+dagrajmpnow],edx
notron36402: xor edi,edi
 add edi,36403
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36403
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call clearline
; rem add esp,[ebp+940]
 xor ecx,ecx
 add ecx,36405
 mov [ebx+dagrajmpnow],ecx
notron36403: xor edi,edi
 add edi,36405
 cmp edi,[ebx+dagrajmpnow]
 jz isr36405
 xor edi,edi
 jz notron36405
isr36405: xor edx,edx
 add edx,53095
 mov [ebx+dagrajmpnow],edx
 mov esi,[ebx+y]
 cmp esi,[ebp+968]
 js notron36405
 mov ecx,[ebp+964]
 add ecx,[ebx+afilelen]
 cmp esi,ecx
 jns notron36405
 mov edi,[ebx+y]
 mov esi,[ebp+928]
 mov edx,[ebp+948]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call rw8056
; rem add esp,[ebp+908]
 mov esi,[ebp+968]
 mov [ebx+chdoc],esi
 mov edx,[ebp+972]
 push edx
 push ecx
 call litrlsput
; rem add esp,[ebp+940]
notron36405: xor edi,edi
 add edi,36407
 cmp edi,[ebx+dagrajmpnow]
 jz isr36407
; jmp notron36407
 xor edi,edi
 jz notron36407
isr36407: xor esi,esi
; 36407 17 v
 mov [ebx+rcmdctr],esi
isl36407: mov edx,[ebx+rcmdctr]
 cmp edx,[ebx+cmdheight]
 jns isb36407
 mov edi,[ebx+y]
 add edi,edx
 mov esi,[ebp+928]
 mov ecx,[ebp+952]
 mov eax,[ebp+1008]
 push edi
 push esi
 push ecx
 push eax
 call rw8056
; rem add esp,[ebp+908]
 mov ecx,[ebp+968]
 add [ebx+rcmdctr],ecx
 xor ecx,ecx
 sub ecx,esi
 mov eax,[ebp+1008]
 push ecx
 push eax
 call litrlsput
; rem add esp,[ebp+940]
 xor esi,esi
 jz isl36407
isb36407: xor ecx,ecx
 xor ecx,ecx
 mov eax,[ebp+1008]
 push ecx
 push eax
 call litrlsput
; rem add esp,[ebp+940]
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
notron36407: xor edi,edi
 add edi,36418
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36418
; 36418 18 open
 xor ecx,ecx
 add ecx,36419
 mov [ebx+dagrajmpnow],ecx
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
; rem add esp,[ebp+940]
 xor esi,esi
 cmp esi,eax
 jns notron36418
 cmp esi,[ebx+rcmdctr]
 jns notron36418
 xor ecx,ecx
 add ecx,36422
 mov [ebx+dagrajmpnow],ecx
notron36418: xor edi,edi
 add edi,36419
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36419
 mov esi,[ebp+968]
 mov edx,[ebp+744]
 mov ecx,esi
 add ecx,edi
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
notron36419: xor edi,edi
 add edi,36420
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36420
 mov esi,[ebp+968]
 add esi,edi
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
; rem add esp,[ebp+908]
notron36420: xor edi,edi
 add edi,36421
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36421
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,36326
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
 mov esi,[ebp+928]
 mov ecx,[ebp+1008]
 push esi
 push ecx
 call dlenval
; rem add esp,[ebp+940]
 xor esi,esi
 cmp esi,eax
 jns notron36421
 xor ecx,ecx
 add ecx,36422
 mov [ebx+dagrajmpnow],ecx
notron36421: xor edi,edi
 add edi,36422
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36422
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
 xor esi,esi
 cmp esi,[ebx+afilelen]
 jns notdoc36422
 mov eax,[ebp+968]
 mov [ebx+chdoc],eax
notdoc36422: mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push esi
 push edx
 push ecx
 call readol
; rem add esp,[ebp+924]
notron36422: xor edi,edi
 add edi,36429
 cmp edi,[ebx+dagrajmpnow]
 jz isr36429
 jmp notron36429
isr36429: xor ecx,ecx
 add ecx,36430
 mov [ebx+dagrajmpnow],ecx
 mov edx,[ebp+968]
 mov [ebx+nzsaveskipod],edx
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 lea esi,[ebx+crz0160]
 sub esi,2048
 mov edi,esi
 add esi,eax
 mov edx,[ebp+940]
 sub edx,[ebp+968]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 add edi,eax
 mov edx,[ebp+928]
 mov eax,[ebp+1008]
 push edx
 push eax
 call dlenval
; rem add esp,[ebp+940]
 xor edx,edx
 cmp edx,eax
 jns hafron36429
 cmp edx,[ebx+rcmdctr]
 jns hafron36429
 mov eax,[ebp+968]
lopron36429: mov dl,[esi+2048]
 mov [edi+2048],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz lopron36429
hafron36429: mov edx,[ebp+940]
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call dlenval
; rem add esp,[ebp+940]
 xor edx,edx
 cmp edx,eax
 jns notron36429
 xor ecx,ecx
 add ecx,36435
 mov [ebx+dagrajmpnow],ecx
notron36429: xor edi,edi
 add edi,36430
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36430
 mov esi,[ebp+968]
 mov edx,[ebp+756]
 mov ecx,esi
 add ecx,edi
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
notron36430: xor edi,edi
 add edi,36431
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36431
 mov esi,[ebp+968]
 add esi,edi
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
; rem add esp,[ebp+908]
notron36431: xor edi,edi
 add edi,36432
 cmp edi,[ebx+dagrajmpnow]
 jz isr36432
 jmp notron36432
isr36432: mov edx,[ebp+928]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 lea esi,[ebx+crz0160]
 sub esi,4096
 mov edi,esi
 add esi,eax
 mov edx,[ebp+940]
 sub edx,[ebp+968]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 add edi,eax
 mov eax,[ebp+968]
lopron36432: mov dl,[esi+4096]
 mov [edi+4096],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz lopron36432
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,36326
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
 mov ecx,[ebp+940]
 mov eax,[ebp+1008]
 push ecx
 push eax
 call dlenval
; rem add esp,[ebp+940]
 xor esi,esi
 cmp esi,eax
 jns notron36432
 xor ecx,ecx
 add ecx,36435
 mov [ebx+dagrajmpnow],ecx
notron36432: xor edi,edi
 add edi,36435
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36435
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,11019
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
 mov eax,[ebp+1008]
 push eax
 call eightsaveas
; rem add esp,[ebp+956]
 xor esi,esi
 mov [ebx+chdoc],esi
notron36435: xor edi,edi
 add edi,36440
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36440
; 36440 20 new
 mov esi,[ebp+1008]
 push esi
 call new2608
; rem add esp,[ebp+956]
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
notron36440: xor edi,edi
 add edi,36451
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36451
; 36451 21 change
 mov esi,[ebx+y]
 mov edx,[ebp+948]
 mov ecx,[ebp+952]
 mov eax,[ebp+1008]
 push esi
 push edx
 push ecx
 push eax
 call rw8056
; rem add esp,[ebp+908]
 mov edx,[ebp+928]
 push esi
 push edx
 push ecx
 push eax
 call rw8056
; rem add esp,[ebp+908]
 xor ecx,ecx
 sub ecx,edx
 mov eax,[ebp+1008]
 push ecx
 push eax
 call litrlsput
; rem add esp,[ebp+940]
 xor ecx,ecx
 mov eax,[ebp+1008]
 push ecx
 push eax
 call litrlsput
; rem add esp,[ebp+940]
 xor ecx,ecx
 add ecx,36452
 mov [ebx+dagrajmpnow],ecx
notron36451: xor edi,edi
 add edi,36452
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36452
 mov esi,[ebp+968]
 mov edx,[ebp+704]
 mov ecx,esi
 add ecx,edi
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
notron36452: xor edi,edi
 add edi,36453
 cmp edi,[ebx+dagrajmpnow]
 jz isr36453
; jmp notron36453
 xor edi,edi
 jz notron36453
isr36453: mov edx,[ebp+948]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 lea esi,[ebx+crz0160]
 sub esi,512
 mov edi,esi
 add esi,eax
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 add edi,eax
 mov eax,[ebp+968]
lop36453: mov dl,[esi+512]
 mov [edi+512],dl
 add esi,eax
 add edi,eax
 sub ecx,eax
 jnz lop36453
 mov ecx,[ebp+972]
 mov eax,[ebp+1008]
 push ecx
 push eax
 call litrlsput
; rem add esp,[ebp+940]
 xor ecx,ecx
 add ecx,36354
 mov [ebx+dagrajmpnow],ecx
notron36453: xor edi,edi
 add edi,36354
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36354
 mov esi,[ebp+568]
 add esi,edi
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
; rem add esp,[ebp+908]
notron36354: xor edi,edi
 add edi,36455
 cmp edi,[ebx+dagrajmpnow]
 jz isr36455
 jmp notron36455
isr36455: xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 lea esi,[ebx+crz0160]
 sub esi,2048
 mov edi,esi
 add esi,eax
 mov edx,[ebp+948]
 sub edx,[ebp+968]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 add edi,eax
 mov edx,[ebp+928]
 mov eax,[ebp+1008]
 push edx
 push eax
 call dlenval
; rem add esp,[ebp+940]
 mov ecx,eax
 xor edx,edx
 mov eax,[ebp+968]
rlop36455: cmp ecx,eax
 js rbot36455
 mov dl,[esi+2048]
 cmp edx,[ebp+844]
 jz skipr36455
 mov [edi+2048],dl
skipr36455: add esi,eax
 add edi,eax
 sub ecx,eax
 jnz rlop36455
rbot36455: mov esi,[ebx+y]
 mov edx,[ebp+948]
 mov ecx,[ebp+948]
 mov edi,[ebp+1008]
 push esi
 push edx
 push ecx
 push edi
 call rw8056
; rem add esp,[ebp+908]
 mov esi,[ebx+y]
 mov edx,[ebp+928]
 mov ecx,[ebp+952]
 push esi
 push edx
 push ecx
 push edi
 call rw8056
; rem add esp,[ebp+908]
 xor esi,esi
 sub esi,edx
 push esi
 push edi
 call litrlsput
; rem add esp,[ebp+940]
 xor ecx,ecx
 push ecx
 push edi
 call litrlsput
; rem add esp,[ebp+940]
; end of 36455
notron36455: xor edi,edi
 add edi,36462
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36462
; 36462 22 find
 xor ecx,ecx
 add ecx,36463
 mov [ebx+dagrajmpnow],ecx
 xor edx,edx
 cmp edx,[ebx+rcmdctr]
 jns notron36462
 xor ecx,ecx
 add ecx,36465
 mov [ebx+dagrajmpnow],ecx
notron36462: xor edi,edi
 add edi,36463
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36463
 mov esi,[ebp+968]
 mov edx,[ebp+736]
 mov ecx,esi
 add ecx,edi
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
notron36463: xor edi,edi
 add edi,36464
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36464
 mov esi,[ebp+968]
 add esi,edi
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
; rem add esp,[ebp+908]
notron36464: xor edi,edi
 add edi,36465
 cmp edi,[ebx+dagrajmpnow]
 jz isr36465
 jmp notron36465
isr36465: mov ecx,[ebx+y]
 mov [ebx+rcmdctr],ecx
 mov edx,[ebp+968]
 mov [ebx+chctr40],edx
 xor esi,esi
 mov ecx,[ebp+1008]
 push esi
 push ecx
 call litrlsput
; rem add esp,[ebp+940]
rlop36465: mov esi,[ebx+afilelen]
 cmp esi,[ebx+rcmdctr]
 js rlor36465
rlot36465: mov edi,[ebx+rcmdctr]
 xor esi,esi
 mov ecx,[ebp+928]
 mov eax,[ebp+1008]
 push edi
 push esi
 push esi
 push ecx
 push eax
 call findtwoeq
; rem add esp,[ebp+892]
 xor edx,edx
 cmp edx,eax
 jz rvop36465
 mov [ebx+chctr40],edx
rvop36465: cmp edx,[ebx+chctr40]
 jz rlor36465
 mov ecx,[ebp+968]
 add [ebx+rcmdctr],ecx
ryop36465: xor edx,edx
 jz rlop36465
rlor36465: mov esi,[ebx+afilelen]
 mov edi,[ebx+rcmdctr]
 cmp esi,edi
 jns rrt36465
 mov [ebx+rcmdctr],esi
 mov edi,esi
rrt36465: mov ecx,[ebp+968]
 cmp edi,ecx
 jns ryt36465
 mov [ebx+rcmdctr],ecx
ryt36465: mov edi,[ebx+rcmdctr]
 mov [ebx+y],edi
 mov esi,[ebp+928]
 mov edx,[ebp+952]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call rw8056
; rem add esp,[ebp+908]
 xor eax,eax
 sub eax,esi
 push eax
 push ecx
 call litrlsput
; rem add esp,[ebp+940]
 xor eax,eax
 push eax
 push ecx
 call litrlsput
; rem add esp,[ebp+940]
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
notron36465: xor edi,edi
 add edi,36473
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36473
; 36473 list 23
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,36326
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
 mov ecx,[ebp+844]
 mov [ebx+chchr40],ecx
 xor edx,edx
 mov ecx,[ebp+1008]
 push edx
 push ecx
 call litrlsput
; rem add esp,[ebp+940]
 mov edi,[ebp+968]
 mov [ebx+rcmdctr],edi
 cmp edi,[ebx+afilelen]
 jns notron36473
 xor ecx,ecx
 add ecx,36476
 mov [ebx+dagrajmpnow],ecx
notron36473: xor edi,edi
 add edi,36474
 cmp edi,[ebx+dagrajmpnow]
 jz isr36474
 xor edi,edi
 jz notron36474
isr36474: mov esi,[ebp+964]
 add esi,edi
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
; rem add esp,[ebp+908]
 mov edx,[ebp+928]
 sub edx,[ebp+968]
 mov ecx,[ebx+a80w]
 push edx
 push ecx
 call nampy
; rem add esp,[ebp+940]
 lea esi,[ebx+crz0160]
 add esi,eax
 xor edx,edx
 sub esi,8192
 mov dl,[esi+8192]
 cmp edx,[ebp+556]
 jnz notron36474
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
notron36474: xor edi,edi
 add edi,36476
 cmp edi,[ebx+dagrajmpnow]
 jz isr36476
 jmp notron36476
isr36476: xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
 mov ecx,[ebp+968]
 mov [ebx+chctr40],ecx
rlop36476: mov ecx,[ebx+chctr40]
 mov esi,[ebx+rcmdctr]
 mov edi,[ebx+afilelen]
 add edi,[ebp+968]
 cmp ecx,[ebx+cmdheight]
 jns rfai36476
 cmp esi,edi
 js rstr36476
rfai36476: xor esi,esi
 jz aftr36476
rstr36476: mov edi,[ebx+rcmdctr]
 mov esi,[ebp+928]
 mov edx,[ebp+952]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call rw8056
; rem add esp,[ebp+908]
 xor eax,eax
 sub eax,esi
 push eax
 push ecx
 call litrlsput
; rem add esp,[ebp+940]
 mov esi,[ebp+968]
 add [ebx+rcmdctr],esi
 add [ebx+chctr40],esi
 xor ecx,ecx
 jz rlop36476
aftr36476: mov esi,[ebx+rcmdctr]
 mov edi,[ebp+968]
 add edi,[ebx+afilelen]
 cmp esi,edi
 jns notron36476
 xor esi,esi
 add esi,36477
 mov [ebx+dagrajmpnow],esi
notron36476: xor edi,edi
 add edi,36477
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36477
 mov esi,[ebp+968]
 mov edx,[ebp+700]
 mov ecx,edi
 sub ecx,[ebp+960]
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
notron36477: xor edi,edi
 add edi,36484
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36484
; 36484 inputc 24
 mov esi,[ebp+968]
 mov edx,[ebp+696]
 mov ecx,esi
 add ecx,edi
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
notron36484: xor edi,edi
 add edi,36485
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36485
 mov esi,[ebp+968]
 add esi,edi
 mov edx,[ebp+928]
 mov ecx,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 call udgetcoml
; rem add esp,[ebp+908]
notron36485: xor edi,edi
 add edi,36486
 cmp edi,[ebx+dagrajmpnow]
 jz isr36486
 jmp notron36486
isr36486: mov esi,[ebp+928]
 mov ecx,[ebp+1008]
 push esi
 push ecx
 call dlenval
; rem add esp,[ebp+940]
 mov [ebx+rcmdctr],eax
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,36485
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
 xor esi,esi
 cmp esi,[ebx+rcmdctr]
 js nore36486
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
nore36486: mov ecx,[ebx+y]
 mov edx,[ebp+968]
 add edx,[ebx+afilelen]
 cmp ecx,edx
 jns noin36486
 add ecx,[ebp+968]
 mov [ebx+y],ecx
noin36486: mov esi,[ebp+928]
 mov ecx,[ebp+1008]
 push esi
 push ecx
 call aptinsert
; rem add esp,[ebp+940]
 mov esi,[ebp+968]
 mov [ebx+keyclineinit],esi
 xor eax,eax
 push eax
 push ecx
 call litrlsput
; rem add esp,[ebp+940]
 mov esi,[ebp+968]
 mov [ebx+chdoc],esi
 mov edx,[ebx+y]
 cmp edx,[ebp+964]
 js notron36486
 sub edx,esi
 mov [ebx+y],edx
notron36486: xor edi,edi
 add edi,36495
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36495
; 36495 uc 25
 mov esi,[ebp+584]
 mov [ebx+uppercase],esi
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
notron36495: xor edi,edi
 add edi,36506
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36506
; 36506 lc 26
 xor esi,esi
 mov [ebx+uppercase],esi
 xor ecx,ecx
 add ecx,53095
 mov [ebx+dagrajmpnow],ecx
notron36506: xor edi,edi
 add edi,36517
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36517
; 36517 gui 27
 mov ecx,[ebx+xe]
 mov edx,[ebx+yre]
 mov [ebx+x],ecx
 mov [ebx+y],edx
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron36517: xor edi,edi
 add edi,36528
 cmp edi,[ebx+dagrajmpnow]
 jnz notron36528
; 36528 28 guiy
 mov ecx,[ebx+x]
 mov edx,[ebx+y]
 mov [ebx+xe],ecx
 mov [ebx+yre],edx
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,52642
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron36528: xor edi,edi
 add edi,36539
 cmp edi,[ebx+dagrajmpnow]
 jnz notron3653r9
 xor ecx,ecx
 add ecx,53098
 xor edx,edx
 add edx,11019
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],edx
notron3653r9: xor edi,edi
 add edi,53095
 cmp edi,[ebx+dagrajmpnow]
 jnz notron53095
 mov edi,[ebp+972]
 mov [ebx+repceedag],edi
 xor edi,edi
 add edi,53098
 mov [ebx+dagrajmpnow],edi
 xor ecx,ecx
 add ecx,36180
 mov [ebx+freddynext],ecx
 mov ecx,[ebp+928]
 mov edx,[ebp+1008]
 push ecx
 push edx
 call clearline
; rem add esp,[ebp+940]
 mov ecx,[ebp+968]
 mov edx,[ebp+968]
 mov [ebx+keyclineinit],ecx
 mov [ebx+cmdkeyxctr],edx
 xor edi,edi
 jz notron53095
notron53095: xor ecx,ecx
 add ecx,36326
 cmp ecx,[ebx+dagrajmpnow]
 jnz notrox36326
 xor edi,edi
 add edi,36180
 xor esi,esi
 mov edx,[ebp+968]
 mov eax,[ebp+1008]
 push ecx
 push esi
 push edx
 push edi
 push eax
 call tinypcl
; rem add esp,[ebp+892]
 xor edi,edi
 add edi,53098
 mov [ebx+dagrajmpnow],edi
 xor ecx,ecx
 add ecx,36180
 mov [ebx+freddynext],ecx
notrox36326: xor edi,edi
 add edi,53098
 cmp edi,[ebx+dagrajmpnow]
 jz isr53098
 jmp notron53098
isr53098: xor ecx,ecx
 add ecx,36326
 cmp ecx,[ebx+freddynext]
 jz jsr53098
 xor ecx,ecx
 add ecx,36180
 cmp ecx,[ebx+freddynext]
 jz jss53098
 jmp jrr53098
jsr53098: mov esi,[ebx+freddynext]
 mov [ebx+dagrajmpnow],esi
 mov edi,ecx
 mov esi,[ebp+972]
 mov edx,[ebp+968]
 xor ecx,ecx
 add ecx,36180
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
jss53098: xor eax,eax
 mov edx,[ebp+1008]
 push eax
 push edx
 call litrlsput
; rem add esp,[ebp+940]
 mov esi,[ebx+freddynext]
 mov [ebx+dagrajmpnow],esi
 xor edi,edi
 add edi,36180
 xor esi,esi
 mov edx,[ebp+960]
 mov ecx,[ebp+964]
 add ecx,edi
 mov eax,[ebp+1008]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
 mov edi,ecx
 mov edx,[ebp+908]
 add ecx,[ebp+964]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
 mov edi,ecx
 mov edx,[ebp+856]
 add ecx,[ebp+964]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
 mov edi,ecx
 mov esi,[ebp+968]
 mov edx,[ebp+728]
 add ecx,[ebp+956]
 push edi
 push esi
 push edx
 push ecx
 push eax
 call tinypcl
; rem add esp,[ebp+892]
 mov ecx,[ebp+928]
 mov edx,[ebp+1008]
 push ecx
 push edx
 call clearline
; rem add esp,[ebp+940]
 mov ecx,[ebp+968]
 mov edx,[ebp+968]
 mov [ebx+keyclineinit],ecx
 mov [ebx+cmdkeyxctr],edx
 xor ecx,ecx
 add ecx,36200
 mov [ebx+freddynext],ecx
 xor ecx,ecx
 add ecx,53098
 mov [ebx+dagrajmpnow],ecx
jrr53098: xor ecx,ecx
 add ecx,52648
 cmp ecx,[ebx+freddynext]
 jnz jjb53098
 mov ecx,[ebp+1008]
 mov edx,[ebp+968]
 push edx
 push ecx
 call clearpage
; rem add esp,[ebp+940]
 mov esi,[ebp+768]
 sub esi,[ebp+852]
 add esi,[ebp+968]
 mov edx,[ebp+852]
 push esi
 push edx
 push ecx
 call printconst
; rem add esp,[ebp+924]
 xor ecx,ecx
 add ecx,52661
 mov [ebx+freddynext],ecx
jjb53098: xor ecx,ecx
 add ecx,52642
 cmp ecx,[ebx+freddynext]
 jnz jjx53098
 mov esi,[ebx+xe]
 mov edx,[ebx+yre]
 mov [ebx+x],esi
 mov [ebx+y],edx
 mov eax,[ebp+968]
 mov ecx,[ebp+1008]
 push eax
 push ecx
 call clearpage
; rem add esp,[ebp+940]
 xor esi,esi
 add esi,1084
 push esi
 push ecx
 call udregkey2176
; rem add esp,[ebp+940]
 xor ecx,ecx
 add ecx,52645
 mov [ebx+freddynext],ecx
jjx53098: mov esi,[ebx+freddynext]
 mov edi,[ebx+dagraprvjmp]
 mov edx,[ebx+dagrajmpnow]
 mov [ebx+dagraprvjmp],edx
 mov [ebx+dagrajmpnow],esi
 mov edx,[ebx+dagranewkey]
 mov [ebx+dagraprvkey],edx
 xor edi,edi
 cmp edi,[ebx+nzerror]
 jz notron53098
 xor ecx,ecx
 add ecx,11019
 mov [ebx+freddynext],ecx
 mov [ebx+dagrajmpnow],ecx
notron53098: xor edi,edi
 mov esi,[ebx+freddynext]
 mov [ebx+dagrajmpnow],esi
 mov esi,[ebp+1004]
 mov edi,[ebp+976]
 mov [ebp+1008],esi
 mov [ebp+1004],edi
 add esp,[ebp+596]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 ret
; bottom of ron52640  12111 11958 12650 17002
; surgery at line 17003
; -------------------
; agcapen(lnes* gcae)
; 1000 ebp    1004 retad    1008 *gcae
; 984 edx    988 ebx    992 esi    996 edi
; 968 1    972 0    976 eax    980 ecx
; 952 5    956 4    960 3    964 2
; 936 9    940 8    944 7    948 6
; 920 13    924 12    928 11    932 10
; 904 17    908 16    912 15    916 fixesp
; 888 21    892 20    896 19    900 argaddr
; 872 25    876 24    880 23    884 other
; 856 29    860 28    864 27    868
; 840 33    844 32    848 31    852
; 704 line of data
agcapen: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 add edi,1033
 mov ecx,edi
 mov edx,edi
 sub ecx,999
 sub edx,1032
 mov eax,ecx
 add eax,eax
 add eax,eax
 add eax,eax
 mov ebx,ecx
 xor esi,esi
agcapeu: push esi
 add esi,edx
 sub ecx,edx
 jnz agcapeu
 xor esi,esi
agcapel: push esi
 sub ebx,edx
 jnz agcapel
 mov [ebp+916],eax
 xor esi,esi
 add esi,[ebp+1008]
 sub esi,8192
 mov eax,[esi+hmanyargs]
 xor ecx,ecx
 xor edi,edi
 mov esi,eax
 add esi,[ebp+968]
 mov [ebp+900],esi
 mov edx,[ebp+844]
 add edx,edx
 add edx,edx
 mov ebx,[ebp+968]
 cmp esi,[ebp+972]
 jz agcalobt
 sub esi,1024
agcalopt: xor eax,eax
 mov al,[esi+1024]
 cmp eax,[ebp+840]
 js agcalobs
 add esi,ebx
 add ecx,ebx
 cmp ecx,edx
 js agcalopt
 xor ebx,ebx
 jz agcalobt
agcalobs: add esi,ebx
agcalobe: cmp ecx,edx
 jns agcalobt
 xor eax,eax
 mov al,[esi+1024]
 cmp al,[ebp+840]
 js agcalobt
 mov [ebp+edi*1+704],al
 add esi,ebx
 add edi,ebx
 add ecx,ebx
 cmp ecx,edx
 js agcalobe
agcalobt: mov ebx,[ebp+1008]
 sub ebx,8192
 xor eax,eax
 mov al,[ebp+704]
 cmp eax,[ebp+840]
 jns agcaea
 jmp agcabop
agcaea: xor edx,edx
 add edx,2111
 sub edx,2000
 mov [ebx+dagranewkey],edx
 mov ecx,[ebp+1008]
 push ecx
 call ron52640
; rem add esp,[ebp+956]
 xor edx,edx
 jz agcalopl
 add edx,2032
 sub edx,2000
 mov [ebx+dagranewkey],edx
 mov ecx,[ebp+1008]
 push ecx
 call ron52640
; rem add esp,[ebp+956]
agcalopl: xor esi,esi
 mov ecx,[ebp+844]
 add ecx,ecx
 add ecx,ecx
 mov edi,[ebp+968]
agcalapl: xor edx,edx
 mov dl,[ebp+esi*1+704]
 cmp edx,[ebp+840]
 js agcaboo
 mov [ebx+dagranewkey],edx
 mov eax,[ebp+1008]
 push eax
 call ron52640
; rem add esp,[ebp+956]
 add esi,edi
 cmp esi,ecx
 js agcalapl
agcaboo: xor edx,edx
 add edx,2010
 sub edx,2000
 mov [ebx+dagranewkey],edx
 mov ecx,[ebp+1008]
 push ecx
 call ron52640
; rem add esp,[ebp+956]
agcabop: xor ecx,ecx
 add ecx,[ebp+916]
 mov eax,[ebp+976]
 mov edx,[ebp+1004]
 mov [ebp+1008],edx
 mov [ebp+1004],eax
 add esp,ecx
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 ret
; bottom of agcapen 12664 13436
; rncmain125(
; 9000 ebp   9004 retad
; 8984 edx   8988 ebx   8992 esi   8996 edi
; 8968 1     8972 0     8976 eax   8980 ecx
; 8952 5     8956 4     8960 3     8964 2
; 8936 9     8940 8     8944 7     8948 6
; 8920 13    8924 12    8928 11    8932 10
; 8904 17    8908 16    8912 15    8916 14
; 8888 21    8892 20    8896 19    8900 18
; 8872 25    8876 24    8880 23    8884 22
; 8856 29    8860 28    8864       8868
; 8840 33    8844 32    8848       8852
; 8824 37    8828 36    8832 evenreq   8836
; 8808 41    8812 40    8816       8820 ewixtwo
; 8792 45    8796 44    8800 scnum     8804
; 8776 49    8780 48    8784       8788 scdis
; 8760 53    8764 52    8768 lpdis     8772
; 8744 57    8748 56    8752       8756 xwyhgt
; 8728 61    8732 60    8736 xwxwid    8740
; 8712 65    8716 64    8720       8724 codeaddr
; 8696 69    8700 68    8704 ramaddr   8708
; 8680 73    8684 72    8688       8692 espaddend
; 8664 77    8668 76    8672 sbmask    8676
; 8648 81    8652 80    8656       8660
; 0456 getevent[1024]      4552 sendevent[1024]
rncmain125: push ebp
 mov ebp,esp
 sub ebp,9000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 add edi,3082
 xor ebx,ebx
 mov edx,edi
 mov ecx,edi
 sub edx,3081
 sub ecx,3000
 mov eax,ecx
 add eax,eax
 add eax,eax
rncmaipu125: push ebx
 add ebx,edx
 sub ecx,edx
 jnz rncmaipu125
 xor ebx,ebx
 sub edi,1034
 mov esi,[ebp+8956]
rncmaipu124: push ebx
 add eax,esi
 sub edi,edx
 jnz rncmaipu124
; -----------------
; xor ecx,ecx
; add ecx,3072
; xor edi,edi
; add edi,2044
; rncmaipu123: push ebx
; add eax,esi
; sub esp,edi
; add eax,edi
; sub ecx,edx
; jnz rncmaipu123
; --------------------
 mov [ebp+8692],eax
; mov ecx,esp
; delay  mov [ebp+8704],ecx
 xor edx,edx
 push edx
 call getreala
; rem add esp,[ebp+8956]
 mov [ebp+8724],eax
 mov [ebp+8704],eax
; --------------------
 xor ecx,ecx
 xor edx,edx
 add ecx,592
 add edx,297
 mov [ebp+8736],ecx
 mov [ebp+8756],edx
; -----
 mov esi,[ebp+8704]
 mov ebx,esi
 sub ebx,8192
 xor ecx,ecx
 add ecx,52640
 mov [ebx+dagrajmpnow],ecx
 mov [ebx+freddynext],ecx
 mov edx,[ebp+8844]
 mov [ebx+dagranewkey],edx
 mov [ebx+keysdebugger],edx
 push esi
 call new2608
; ------------
; mov esi,[ebp+8704]
; lea edi,[ebp+456]
; xor edx,edx
; add edx,362
; mov [ebp+456],edx
; push edi
; push esi
; call keyevent23   ???????
; rem add esp,[ebp+8940]
; -----------------
 mov esi,[ebp+8704]
 mov edx,[ebp+8844]
 mov ebx,esi
 sub ebx,8192
 mov [ebx+dagranewkey],edx
 push esi
 call ron52640
 xor ecx,ecx
 add ecx,3095
 sub ecx,2000
 mov [ebx+dagranewkey],ecx
 push esi
 call ron52640
 xor ecx,ecx
; -----------------
 mov esi,[ebp+8704]
 mov ecx,esi
 sub esi,8192
 mov eax,[ebp+9008]
 cmp eax,[ebp+8964]
 jnz skipargsx
 mov eax,[ebp+9012]
 mov [esi+hmanyargs],eax
 push ecx
 call agcapen
 xor eax,eax
 jz drawat125
; rem add esp,[ebp+8956]
skipargsx: xor ecx,ecx
 add ecx,1098
 sub ecx,1000
 mov [ebx+dagranewkey],ecx
 xor eax,eax
 jz keyskip125
; surgery at line 17263
; ---------------------
; need keyboard loop next 17278
keyloop125: mov ebx,[ebp+8704]
 mov esi,ebx
 sub ebx,8192
 mov ecx,[ebx+dagrajmpnow]
 cmp ecx,11019
 jz keybot125
 call getdkey
 mov [ebx+dagranewkey],eax
keyskip125: mov esi,[ebp+8704]
 push esi
 call ron52640
drawat125: xor ecx,ecx
 or ecx,[ebx+virtscrn]
 jnz drawat105
; choose a type of page next
 mov esi,[ebp+8704]
 push esi
 call drawtexapage
drawed104:  xor ecx,ecx
 jz keyloop125
drawat105: mov esi,[ebp+8704]
 mov edx,[ebp+8968]
 cmp edx,[ebx+virtscrn]
 jnz drawto105
 push esi
 call typrint6
 push esi
 call wvirtpage
; virtual page drawing here
 xor ecx,ecx
 jz drawed104
drawto105: push esi
 call sagetodib
 push esi
 call wvirtpage
 xor ecx,ecx
 jz drawed104
keybot125: xor edi,edi
; ---------------------
quitevents: xor edi,edi
 mov [ebp+8976],edi
; -----------
 xor esi,esi
 add esi,17630
 xor ecx,ecx
 jz nostuat181
 xor ecx,ecx
 xor ecx,ecx
 push ecx
 push edx
 push esi
 call stuckat
; -----------
nostuat181: add esp,[ebp+8692]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; bottom of rncmain125
; void stuckat(int line,int value,int zurhalt)
; 1004 retad  1008 line  1012 value  1016 zurhalt
; 988 ebx     992 esi    996 edi     1000 ebp
; 972 0       976 eax    980 ecx     984 edx
; 956 4       960 3      964 2       968 1
; 940 8       944 7      948 6       952 5
; 924 12      928 11     932 10      936 9
; 908 16      912 15     916 14      920 13
; 892 20      896 19     900 18      904 handle
; 876 24      880 23     884 22      888 espaddend
; 860 28      864 memshift  868 26   872 codeaddr
; 844 32      848 31     852 30      856 cst_3639h
; 828 36    832 cst_3433h  836 34   840 cst_3845h
; 812 40      816 39     820 38      824 wrjunk
; 648 line_of_text
stuckat: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor ebx,ebx
 xor edi,edi
 add edi,1041
 mov edx,edi
 sub edx,1040
 mov ecx,edi
 sub ecx,1000
 mov eax,ecx
 add eax,eax
 add eax,eax
 add eax,eax
stuckru: push ebx
 add ebx,edx
 sub ecx,edx
 jnz stuckru
 mov ecx,edi
 sub ecx,1000
; mov ebx,[ebp+844]
; mov ebx,[ebp+820]
 xor ebx,ebx
 add ebx,020202020h
stuckpu: push ebx
 sub ecx,edx
 jnz stuckpu
 mov [ebp+888],eax
 xor ecx,ecx
 push ecx
 call getreala
 mov [ebp+872],eax
 mov esi,[ebp+872]
; mov edx,[esi+ramsize18_misspelled]
; mov [ebp+864],edx
 xor ecx,ecx
 add ecx,03639h
 mov [ebp+856],ecx
 xor edx,edx
 add edx,03846h
 mov [ebp+840],edx
 xor ecx,ecx
 add ecx,03433h
 mov [ebp+832],ecx
 lea eax,[ebp+856]
 mov ecx,[ebp+1008]
 mov edx,[ebp+964]
 lea esi,[ebp+648]
 push eax
 push ecx
 push edx
 push esi
 call chnvalue
 lea eax,[ebp+840]
 mov ecx,[ebp+1012]
 mov edx,[ebp+932]
 lea esi,[ebp+648]
 push eax
 push ecx
 push edx
 push esi
 call chnvalue
 lea eax,[ebp+840]
 mov ecx,[ebp+1016]
 mov edx,[ebp+892]
 lea esi,[ebp+648]
 push eax
 push ecx
 push edx
 push esi
 call chnvalue
 mov eax,[ebp+920]
 mov edx,[ebp+932]
 mov [ebp+706],al
 mov [ebp+707],dl
; -----------------
 mov ecx,[ebp+1012]
 cmp ecx,00200000h
 js stucknc
 xor edi,edi
 mov esi,ecx
 sub esi,1000
 mov eax,[ebp+968]
stuckci: mov dl,[esi+1000]
 mov [ebp+edi*1+676],dl
 add esi,eax
 add edi,eax
 cmp edi,[ebp+916]
 js stuckci
stucknc: mov eax,[ebp+972]
 sub eax,[ebp+928]
 mov esi,[ebp+872]
 lea ecx,[esi+stuckha]
; add esi,[ebp+864]
; mov edx,[esi+wiogsh80]
; push eax
; push ecx
; push edx
; ret
stuckha: mov [ebp+904],eax
 mov eax,[ebp+972]
 lea ecx,[ebp+824]
 mov edx,[ebp+852]
 add edx,edx
 lea esi,[ebp+648]
 mov edi,[ebp+904]
 mov eax,[ebp+956]
 mov ecx,[ebp+968]
 push eax
 push edx
 push esi
 push ecx
 push eax
 call twioswitch
; push eax
; push ecx
; push edx
; push esi
; push edi
; mov esi,[ebp+872]
; lea eax,[esi+stuckwr]
; add esi,[ebp+864]
; mov ecx,[esi+wiowrt84]
; push eax
; push ecx
; ret
stuckwr: mov edx,[ebp+972]
 cmp edx,[ebp+1016]
 jnz stucknh
 mov eax,[ebp+1016]
 mov esi,[ebp+872]
 lea ecx,[esi+stucknh]
; add esi,[ebp+864]
; mov edx,[esi+wioexit]
 mov eax,[ebp+972]
 mov ecx,[ebp+968]
 push eax
 push eax
 push eax
 push eax
 push ecx
 call twioswitch
; push eax
; push ecx
; push edx
; ret
stucknh: mov esi,[ebp+976]
 mov edi,[ebp+1004]
 mov [ebp+1016],edi
 mov [ebp+1012],esi
 add esp,[ebp+888]
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 ret
; bottom of stuckat
; ------------------
; -----------------------
; eax      ebx     ecx     edx     esi
; 01_exit  retcode
; 03_read  rhand   *buff   width
; 04_write whand   *buffer width
; 05_open  *asciiz 0or2_0  perms_493
; 06_close handle
; 08_creat *asciiz modet_493
; 19_lseek rhand   offset  whence0or2
; 54_ioctl mode    han     offset
; ***********************************
; wrao_list locations
; 0_exit   1_read    2_write   3_open
; 4_close  5_creat   6_lseek   7_ioctl_22
intlistwrao: db 000h,040h,000h,0C1h,0C2h,0C3h,044h,000h
             db 085h,000h,000h,000h,000h,000h,000h,000h
             db 000h,000h,000h,0C6h,000h,000h,0C7h,000h
             db 000h,000h,000h,000h,000h,000h,000h,000h
; twioswitch(za,zb,zc,zd,zsi)
; 3024 zsi
; 3012 zb        3016 zc        3020 zd
; 3000 ebp       3004 retad     3008 za
; 2988 ebx       2992 esi       2996 edi
; 2976 cstm1     2980 ecx       2984 edx
; 2964 cst2      2968 cst1      2972 cst0
; 2952 cst5      2956 cst4      2960 cst3
; 2940 cst8      2944 cst7      2948 cst6
; 2928 cst11     2932 cst10     2936 cst9
; 2916 cst14     2920 cst13     2924 cst12
; 2904 cst17     2908 cst16     2912 cst15
; 2892 cst20     2896 cst19     2900 cst18
; 2880 cst23     2884 cst22     2888 cst21
; 2868 cst26     2872 cst25     2876 cst24
; 2856 800k      2860 cst28     2864 cst27
; 2844 cst32     2848 cst31     2852 cst30
; 2832 cst35     2836 cst34     2840 learetaddr
; 2820 hmanyarg   2824 cstm769   2828 codebaddress
; 2808 arg4      2812 arg5      2816 arg6
; 2796 arg1      2800 arg2      2804 arg3
twioswitch: push ebp
 mov ebp,esp
 sub ebp,3000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 xor edi,edi
 add edi,1000
 mov edx,edi
 sub edi,1001
 mov ecx,edx
 sub edx,999
 sub ecx,954
wioswipu: push edi
 add edi,edx
 sub ecx,edx
 jnz wioswipu
 xor ecx,ecx
 push ecx
 call getreala
; rem add esp,[ebp+2956]
 mov [ebp+2828],eax
 mov ebx,[ebp+2828]
 mov esi,[ebp+3008]
 and esi,[ebp+2848]
 xor edx,edx
 mov dl,[ebx+esi*1+intlistwrao]
 mov ecx,edx
; -- 6203 13360
; mov eax,[ebp+3008]
; mov ebx,[ebp+3012]
; mov ecx,[ebp+3016]
; mov edx,[ebp+3020]
; mov esi,[ebp+3024]
; int 080h
; --------
 mov eax,[ebp+2848]
 add eax,[ebp+2844]
 and ecx,eax
 mov edi,ecx
 add edi,edi
 add edi,edi
 mov ecx,[ebp+2948]
 shr edx,cl
 and edx,[ebp+2960]
 mov esi,edx
 add esi,esi
 add esi,esi
 mov [ebp+2820],esi
 mov ecx,[ebp+2820]
 cmp ecx,[ebp+2972]
 jnz skip13679
 lea eax,[ebx+twre00]
 mov [ebp+2840],eax
skip13679: cmp ecx,[ebp+2956]
 jnz skip13684
 lea eax,[ebx+twre04]
 mov [ebp+2840],eax
skip13684: cmp ecx,[ebp+2940]
 jnz skip13688
 lea eax,[ebx+twre08]
 mov [ebp+2840],eax
skip13688: cmp ecx,[ebp+2924]
 jnz voopswipu
 lea eax,[ebx+twre12]
 mov [ebp+2840],eax
voopswipu: mov ecx,[ebp+2956]
 sub esi,ecx
 js voopswipb
 mov eax,[ebp+esi*1+3012]
 push eax
 xor ecx,ecx
 jz voopswipu
; **** 0880h is intlistsub ****
voopswipb: mov eax,[ebx+edi*1+0880h]
 or eax,eax
 jz wiobotf
; lea ecx,[ebx+voopswipc]
 mov ecx,[ebp+2840]
 push ecx
 push eax
 ret
twre12: xor edx,edx
 add edx,1004
 sub edx,1000
 add esp,edx
twre08: xor edx,edx
 add edx,1004
 sub edx,1000
 add esp,edx
twre04: xor edx,edx
 add edx,1004
 sub edx,1000
 add esp,edx
twre00: mov ebp,esp
 sub ebp,2796
; ------------------
; voopswipc: mov edx,[ebp+2820]
; mov ecx,edx
; or ecx,ecx
; or ecx,ecx
; add esp,ecx
; ------------------
 xor ecx,ecx
 jz wiobott
wiobotf: xor esi,esi
 xor ebx,ebx
 xor edx,edx
 xor ecx,ecx
 xor edi,edi
 add edi,4001
 sub edi,4000
 mov eax,edi
; mov eax,[ebp+2968]
 int 080h
; db 0ebh,0feh
; xxxxxxxxxxxxxxxxx
wiobott: xor edi,edi
 add edi,1000
 sub edi,954
 add edi,edi
 add edi,edi
 mov [ebp+3020],eax
 mov esi,[ebp+3004]
 mov [ebp+3024],esi
 add esp,edi
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 pop eax
 pop eax
 pop eax
 pop eax
 pop eax
 ret
; ------
; end of twioswitch
; eax      ebx     ecx     edx     esi
; 01_exit  retcode
; 03_read  rhand   *buff   width
; 04_write whand   *buffer width
; 05_open  *asciiz 0or2_0  perms
; 06_close handle
; 08_creat *asciiz modet_493
; 19_lseek rhand   offset  whence0or2
; 54_ioctl mode    han     offset
; bottom of twioswitch
; needs intlistsub 4*9 at uuuuh+codeaddr
twioend: db 00h,00h,00h,00h,00h
; -----------------------------
; xxxxxxxxx temporary xxxxxxxxxxx
rncmain105: push ebp
 mov ebp,esp
 sub ebp,1000
 push edi
 push esi
 push ebx
 push edx
 push ecx
 push eax
 xor edi,edi
 xor edi,edi
 push edi
 call getreala
 mov ebx,eax
 push ebx
 call new2608
 mov esi,ebx
rncloop105: call getdkey
 mov [ebp+976],eax
 lea ecx,[ebp+976]
 xor edx,edx
 xor eax,eax
 add edx,1003
 sub edx,1000
 push edx
 push ecx
 call getbase4
 mov edi,eax
 xor edx,edx
 xor eax,eax
 add edx,1002
 sub edx,1000
 push edx
 push ecx
 call getbase4
 mov esi,eax
skipkey8: push edi
 push eax
 push esi
 call stuckat
 xor ecx,ecx
 jz rncloop105
 pop eax
 pop ecx
 pop edx
 pop ebx
 pop esi
 pop edi
 pop ebp
 ret
; ..
; filler to 73728
 db 00h
 db 00h,00h,00h,00h
 dd 0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
; --------------------
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
; --------------------
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
; --------------------
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
; --------------------
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
; --------------------
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
; ----------------- 11F00
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0,0
 dd 0,0,0,0,0,0,0
lastdword dd 0
; 57344.73728         E000.12000h
 section .bss
; rem org 02000h
 resb 8192
; skip first 8192 attempted bytes because re orging not allowed
hmanyargs resd 1
argsarea resb 512
nonscroll resd 1
keysdebugger resd 1
nzsaveskipod resd 1
leftdebugger resd 1
nznormalend resd 1
inserback resd 1
cmdheight resd 1
nzerror resd 1
keychar5 resd 1
tzrx resd 1
tzby resd 1
yyectr resd 1
xxjctr resd 1
lfdal resd 1
opendell resd 1
chchr40 resd 1
rcmdctr resd 1
howmanycmd resd 1
repceedag resd 1
keycmd5 resd 1
uprighty resd 1
lowlefty resd 1
lowleftb resd 1
lowleftc resd 1
curcommand resd 1
jxwidth resd 1
jyheight resd 1
jynext resd 1
jysrc resd 1
jydest resd 1
yjn resd 1
jydiff resd 1
jyctr resd 1
jxdiff resd 1
yre resd 1
xe resd 1
uprightx resd 1
lowleftx resd 1
bkgnd resd 1
cmdkeyxctr resd 1
chctr40 resd 1
uppercase resd 1
evdk resd 1
elevrd resd 1
dagraprvkey resd 1
dagranewkey resd 1
keyclineinit resd 1
; dib section
 resb 2
vardib resb 65534
threelines resb 8224
virtscrn resd 1
nzalways0d0a resd 1
te resd 1
dkey resd 1
le resd 1
r resd 1
revl resd 4
wmwindclass resd 24
tevl resd 4
wmwindmsg resd 16
rquesize resd 1
rquesave resd 1024
nzshift resd 1
cmd resd 1
tjctr resd 1
teepbase resd 1
; -
rep0 resd 1
one2 resd 1
fp04 resd 1
fp05 resd 1
sfgprv resd 1
sfgcur resd 1
sfgshow02 resd 1
sfgcount resd 1
fl06 resd 1
eofi resd 1
eofdelay resd 1
a80w resd 1
hv0c resd 1
evrd resb 88
hiskrba resb 512
edhanb resd 2
pose resd 1
hiskwid resd 1
afilelen resd 1
largestln resd 1
wegmode resd 1
weginc resd 1
wegcur resd 1
posw resd 1
wp04 resd 1
sfnbase resd 1
sftime resd 1
needclose resd 1
wegerr resd 1
keyctr resd 1
zeeconsole resd 1
dagrajmpnow resd 1
freddynext resd 1
dagraprvjmp resd 1
tprnctr resd 1
klinewid resd 1
editwithin resd 1
chkline resd 1
str96 resd 1
iojump resd 1
namzset resd 1
pitchin resd 1
filenamz resb 84
conrhan resd 2
conrham resd 2
conwhan resd 2
conwham resd 2
onecurwozx resd 1
onecurwozy resd 1
twocurwozx resd 1
twocurwozy resd 1
x resd 1
y resd 1
requestwid resd 1
ypheight resd 1
prindiff resd 1
prinjill resd 1
prindiffprv resd 1
chzerv resd 1
chnext resd 1
chdoc resd 1
alsel resd 1
insel resd 1
marginselect resd 1
moualglobal resd 1
mouallocal resd 1
moux resd 1
mouy resd 1
insertype resd 1
inspg resd 1
nzfileg resd 1
evwr resb 2080
crz0160 resb 16384
fdimg2880 resb 1474560
sandoval resb 2092152
; ------------------
; this is the last line of this file edmackxb.852
; This is actually ed2342.aso alpha test for changes.

